CG_SetGhoul2InfoRef( ent_, s1_ ) = ccall((:CG_SetGhoul2InfoRef, lib), Void, ( Ptr{refEntity_t}, Ptr{refEntity_t},  ), ent_, s1_ );
CG_RegisterItemVisuals( itemNum_ ) = ccall((:CG_RegisterItemVisuals, lib), Void, ( Int32,  ), itemNum_ );
CG_MapTorsoToWeaponFrame( ci_, frame_, animNum_ ) = ccall((:CG_MapTorsoToWeaponFrame, lib), Int32, ( Ptr{clientInfo_t}, Int32, Int32,  ), ci_, frame_, animNum_ );
CG_CalculateWeaponPosition( origin_, angles_ ) = ccall((:CG_CalculateWeaponPosition, lib), Void, ( vec3_t, vec3_t,  ), origin_, angles_ );
CG_LightningBolt( cent_, origin_ ) = ccall((:CG_LightningBolt, lib), Void, ( Ptr{centity_t}, vec3_t,  ), cent_, origin_ );
CG_AddWeaponWithPowerups( gun_, powerups_ ) = ccall((:CG_AddWeaponWithPowerups, lib), Void, ( Ptr{refEntity_t}, Int32,  ), gun_, powerups_ );
CG_AddPlayerWeapon( parent_, ps_, cent_, team_, newAngles_, thirdPerson_ ) = ccall((:CG_AddPlayerWeapon, lib), Void, ( Ptr{refEntity_t}, Ptr{playerState_t}, Ptr{centity_t}, Int32, vec3_t, qboolean,  ), parent_, ps_, cent_, team_, newAngles_, thirdPerson_ );
CG_AddViewWeapon( ps_ ) = ccall((:CG_AddViewWeapon, lib), Void, ( Ptr{playerState_t},  ), ps_ );
CG_DrawIconBackground() = ccall((:CG_DrawIconBackground, lib), Void, (),  );
CG_WeaponCheck( weap_ ) = ccall((:CG_WeaponCheck, lib), qboolean, ( Int32,  ), weap_ );
CG_WeaponSelectable( i_ ) = ccall((:CG_WeaponSelectable, lib), qboolean, ( Int32,  ), i_ );
CG_DrawWeaponSelect() = ccall((:CG_DrawWeaponSelect, lib), Void, (),  );
CG_NextWeapon_f() = ccall((:CG_NextWeapon_f, lib), Void, (),  );
CG_PrevWeapon_f() = ccall((:CG_PrevWeapon_f, lib), Void, (),  );
CG_Weapon_f() = ccall((:CG_Weapon_f, lib), Void, (),  );
CG_WeaponClean_f() = ccall((:CG_WeaponClean_f, lib), Void, (),  );
CG_OutOfAmmoChange( oldWeapon_ ) = ccall((:CG_OutOfAmmoChange, lib), Void, ( Int32,  ), oldWeapon_ );
CG_GetClientWeaponMuzzleBoltPoint( clIndex_, to_ ) = ccall((:CG_GetClientWeaponMuzzleBoltPoint, lib), Void, ( Int32, vec3_t,  ), clIndex_, to_ );
CG_FireWeapon( cent_, altFire_ ) = ccall((:CG_FireWeapon, lib), Void, ( Ptr{centity_t}, qboolean,  ), cent_, altFire_ );
CG_VehicleWeaponImpact( cent_ ) = ccall((:CG_VehicleWeaponImpact, lib), qboolean, ( Ptr{centity_t},  ), cent_ );
CG_MissileHitWall( weapon_, clientNum_, origin_, dir_, soundType_, altFire_, charge_ ) = ccall((:CG_MissileHitWall, lib), Void, ( Int32, Int32, vec3_t, vec3_t, impactSound_t, qboolean, Int32,  ), weapon_, clientNum_, origin_, dir_, soundType_, altFire_, charge_ );
CG_MissileHitPlayer( weapon_, origin_, dir_, entityNum_, altFire_ ) = ccall((:CG_MissileHitPlayer, lib), Void, ( Int32, vec3_t, vec3_t, Int32, qboolean,  ), weapon_, origin_, dir_, entityNum_, altFire_ );
CG_CalcMuzzlePoint( entityNum_, muzzle_ ) = ccall((:CG_CalcMuzzlePoint, lib), qboolean, ( Int32, vec3_t,  ), entityNum_, muzzle_ );
CG_InitG2Weapons() = ccall((:CG_InitG2Weapons, lib), Void, (),  );
CG_ShutDownG2Weapons() = ccall((:CG_ShutDownG2Weapons, lib), Void, (),  );
CG_G2WeaponInstance( cent_, weapon_ ) = ccall((:CG_G2WeaponInstance, lib), Void, ( Ptr{centity_t}, Int32,  ), cent_, weapon_ );
CG_CopyG2WeaponInstance( cent_, weaponNum_, toGhoul2_ ) = ccall((:CG_CopyG2WeaponInstance, lib), Void, ( Ptr{centity_t}, Int32, Ptr{Void},  ), cent_, weaponNum_, toGhoul2_ );
CG_CheckPlayerG2Weapons( ps_, cent_ ) = ccall((:CG_CheckPlayerG2Weapons, lib), Void, ( Ptr{playerState_t}, Ptr{centity_t},  ), ps_, cent_ );
