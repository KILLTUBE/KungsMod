CG_NoUseableForce() = ccall((:CG_NoUseableForce, lib), qboolean, (),  );
C_PointContents() = ccall((:C_PointContents, lib), Int32, (),  );
C_GetLerpOrigin() = ccall((:C_GetLerpOrigin, lib), Void, (),  );
C_GetLerpData() = ccall((:C_GetLerpData, lib), Void, (),  );
C_Trace() = ccall((:C_Trace, lib), Void, (),  );
C_G2Trace() = ccall((:C_G2Trace, lib), Void, (),  );
C_G2Mark() = ccall((:C_G2Mark, lib), Void, (),  );
CG_DebugBoxLines( mins_, maxs_, duration_ ) = ccall((:CG_DebugBoxLines, lib), Void, ( vec3_t, vec3_t, Int32,  ), mins_, maxs_, duration_ );
CG_RagCallback( callType_ ) = ccall((:CG_RagCallback, lib), Int32, ( Int32,  ), callType_ );
C_ImpactMark() = ccall((:C_ImpactMark, lib), Void, (),  );
CG_MiscEnt() = ccall((:CG_MiscEnt, lib), Void, (),  );
CG_CrosshairPlayer() = ccall((:CG_CrosshairPlayer, lib), Int32, (),  );
CG_LastAttacker() = ccall((:CG_LastAttacker, lib), Int32, (),  );
CG_Argv( arg_ ) = ccall((:CG_Argv, lib), Char, ( Int32,  ), arg_ );
CG_RegisterItemSounds( itemNum_ ) = ccall((:CG_RegisterItemSounds, lib), Void, ( Int32,  ), itemNum_ );
CG_AS_Register() = ccall((:CG_AS_Register, lib), Void, (),  );
CG_ParseWeatherEffect( str_ ) = ccall((:CG_ParseWeatherEffect, lib), Void, ( Ptr{Char},  ), str_ );
CG_ParseSiegeState( str_ ) = ccall((:CG_ParseSiegeState, lib), Void, ( Ptr{Char},  ), str_ );
CG_RegisterSounds() = ccall((:CG_RegisterSounds, lib), Void, (),  );
CG_RegisterEffects() = ccall((:CG_RegisterEffects, lib), Void, (),  );
CG_RegisterGraphics() = ccall((:CG_RegisterGraphics, lib), Void, (),  );
CG_GetStringEdString( refSection_, refName_ ) = ccall((:CG_GetStringEdString, lib), Char, ( Ptr{Char}, Ptr{Char},  ), refSection_, refName_ );
CG_SiegeCountCvars() = ccall((:CG_SiegeCountCvars, lib), Void, (),  );
CG_BuildSpectatorString() = ccall((:CG_BuildSpectatorString, lib), Void, (),  );
CG_RegisterClients() = ccall((:CG_RegisterClients, lib), Void, (),  );
CG_ConfigString( index_ ) = ccall((:CG_ConfigString, lib), Char, ( Int32,  ), index_ );
CG_StartMusic( bForceStart_ ) = ccall((:CG_StartMusic, lib), Void, ( qboolean,  ), bForceStart_ );
CG_GetMenuBuffer( filename_ ) = ccall((:CG_GetMenuBuffer, lib), Char, ( Ptr{Char},  ), filename_ );
CG_Asset_Parse( handle_ ) = ccall((:CG_Asset_Parse, lib), qboolean, ( Int32,  ), handle_ );
CG_ParseMenu( menuFile_ ) = ccall((:CG_ParseMenu, lib), Void, ( Ptr{Char},  ), menuFile_ );
CG_Load_Menu( p_ ) = ccall((:CG_Load_Menu, lib), qboolean, ( Ptr{Ptr{Char}},  ), p_ );
CG_OwnerDrawHandleKey( ownerDraw_, flags_, special_, key_ ) = ccall((:CG_OwnerDrawHandleKey, lib), qboolean, ( Int32, Int32, Ptr{Float32}, Int32,  ), ownerDraw_, flags_, special_, key_ );
CG_FeederCount( feederID_ ) = ccall((:CG_FeederCount, lib), Int32, ( Float32,  ), feederID_ );
CG_SetScoreSelection( p_ ) = ccall((:CG_SetScoreSelection, lib), Void, ( Ptr{Void},  ), p_ );
CG_InfoFromScoreIndex( index_, team_, scoreIndex_ ) = ccall((:CG_InfoFromScoreIndex, lib), clientInfo_t, ( Int32, Int32, Ptr{Int32},  ), index_, team_, scoreIndex_ );
CG_FeederItemText( feederID_, index_, column_, handle1_, handle2_, handle3_ ) = ccall((:CG_FeederItemText, lib), Char, ( Float32, Int32, Int32, Ptr{qhandle_t}, Ptr{qhandle_t}, Ptr{qhandle_t},  ), feederID_, index_, column_, handle1_, handle2_, handle3_ );
CG_FeederItemImage( feederID_, index_ ) = ccall((:CG_FeederItemImage, lib), qhandle_t, ( Float32, Int32,  ), feederID_, index_ );
CG_FeederSelection( feederID_, index_, item_ ) = ccall((:CG_FeederSelection, lib), qboolean, ( Float32, Int32, Ptr{itemDef_t},  ), feederID_, index_, item_ );
CG_Cvar_Get( cvar_ ) = ccall((:CG_Cvar_Get, lib), Float32, ( Ptr{Char},  ), cvar_ );
CG_Text_PaintWithCursor( x_, y_, scale_, color_, text_, cursorPos_, cursor_, limit_, style_, iMenuFont_ ) = ccall((:CG_Text_PaintWithCursor, lib), Void, ( Float32, Float32, Float32, vec4_t, Ptr{Char}, Int32, Char, Int32, Int32, Int32,  ), x_, y_, scale_, color_, text_, cursorPos_, cursor_, limit_, style_, iMenuFont_ );
CG_OwnerDrawWidth( ownerDraw_, scale_ ) = ccall((:CG_OwnerDrawWidth, lib), Int32, ( Int32, Float32,  ), ownerDraw_, scale_ );
CG_PlayCinematic( name_, x_, y_, w_, h_ ) = ccall((:CG_PlayCinematic, lib), Int32, ( Ptr{Char}, Float32, Float32, Float32, Float32,  ), name_, x_, y_, w_, h_ );
CG_StopCinematic( handle_ ) = ccall((:CG_StopCinematic, lib), Void, ( Int32,  ), handle_ );
CG_DrawCinematic( handle_, x_, y_, w_, h_ ) = ccall((:CG_DrawCinematic, lib), Void, ( Int32, Float32, Float32, Float32, Float32,  ), handle_, x_, y_, w_, h_ );
CG_RunCinematicFrame( handle_ ) = ccall((:CG_RunCinematicFrame, lib), Void, ( Int32,  ), handle_ );
CG_LoadMenus( menuFile_ ) = ccall((:CG_LoadMenus, lib), Void, ( Ptr{Char},  ), menuFile_ );
CG_LoadHudMenu() = ccall((:CG_LoadHudMenu, lib), Void, (),  );
CG_AssetCache() = ccall((:CG_AssetCache, lib), Void, (),  );
CG_Init_CG() = ccall((:CG_Init_CG, lib), Void, (),  );
CG_Init_CGents() = ccall((:CG_Init_CGents, lib), Void, (),  );
CG_InitItems() = ccall((:CG_InitItems, lib), Void, (),  );
CG_TransitionPermanent() = ccall((:CG_TransitionPermanent, lib), Void, (),  );
CG_Init( serverMessageNum_, serverCommandSequence_, clientNum_ ) = ccall((:CG_Init, lib), Void, ( Int32, Int32, Int32,  ), serverMessageNum_, serverCommandSequence_, clientNum_ );
CG_GetLocationString( loc_ ) = ccall((:CG_GetLocationString, lib), Char, ( Ptr{Char},  ), loc_ );
CG_DestroyAllGhoul2() = ccall((:CG_DestroyAllGhoul2, lib), Void, (),  );
CG_Shutdown() = ccall((:CG_Shutdown, lib), Void, (),  );
CG_NextForcePower_f() = ccall((:CG_NextForcePower_f, lib), Void, (),  );
CG_PrevForcePower_f() = ccall((:CG_PrevForcePower_f, lib), Void, (),  );
CG_NextInventory_f() = ccall((:CG_NextInventory_f, lib), Void, (),  );
CG_PrevInventory_f() = ccall((:CG_PrevInventory_f, lib), Void, (),  );
_CG_MouseEvent( x_, y_ ) = ccall((:_CG_MouseEvent, lib), Void, ( Int32, Int32,  ), x_, y_ );
CG_IncomingConsoleCommand() = ccall((:CG_IncomingConsoleCommand, lib), qboolean, (),  );
CG_GetOrigin( entID_, out_ ) = ccall((:CG_GetOrigin, lib), Void, ( Int32, vec3_t,  ), entID_, out_ );
CG_GetAngles( entID_, out_ ) = ccall((:CG_GetAngles, lib), Void, ( Int32, vec3_t,  ), entID_, out_ );
CG_GetOriginTrajectory( entID_ ) = ccall((:CG_GetOriginTrajectory, lib), trajectory_t, ( Int32,  ), entID_ );
CG_GetAngleTrajectory( entID_ ) = ccall((:CG_GetAngleTrajectory, lib), trajectory_t, ( Int32,  ), entID_ );
_CG_ROFF_NotetrackCallback( entID_, notetrack_ ) = ccall((:_CG_ROFF_NotetrackCallback, lib), Void, ( Int32, Ptr{Char},  ), entID_, notetrack_ );
CG_MapChange() = ccall((:CG_MapChange, lib), Void, (),  );
CG_AutomapInput() = ccall((:CG_AutomapInput, lib), Void, (),  );
CG_FX_CameraShake() = ccall((:CG_FX_CameraShake, lib), Void, (),  );
