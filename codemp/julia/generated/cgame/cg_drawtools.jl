CG_DrawRect( x_, y_, width_, height_, size_, color_ ) = ccall((:CG_DrawRect, lib), Void, ( Float32, Float32, Float32, Float32, Float32, Ptr{Float32},  ), x_, y_, width_, height_, size_, color_ );
CG_GetColorForHealth( health_, armor_, hcolor_ ) = ccall((:CG_GetColorForHealth, lib), Void, ( Int32, Int32, vec4_t,  ), health_, armor_, hcolor_ );
CG_DrawSides( x_, y_, w_, h_, size_ ) = ccall((:CG_DrawSides, lib), Void, ( Float32, Float32, Float32, Float32, Float32,  ), x_, y_, w_, h_, size_ );
CG_DrawTopBottom( x_, y_, w_, h_, size_ ) = ccall((:CG_DrawTopBottom, lib), Void, ( Float32, Float32, Float32, Float32, Float32,  ), x_, y_, w_, h_, size_ );
CG_FillRect2( x_, y_, width_, height_, color_ ) = ccall((:CG_FillRect2, lib), Void, ( Float32, Float32, Float32, Float32, Ptr{Float32},  ), x_, y_, width_, height_, color_ );
CG_FillRect( x_, y_, width_, height_, color_ ) = ccall((:CG_FillRect, lib), Void, ( Float32, Float32, Float32, Float32, Ptr{Float32},  ), x_, y_, width_, height_, color_ );
CG_DrawPic( x_, y_, width_, height_, hShader_ ) = ccall((:CG_DrawPic, lib), Void, ( Float32, Float32, Float32, Float32, qhandle_t,  ), x_, y_, width_, height_, hShader_ );
CG_DrawRotatePic( x_, y_, width_, height_, angle_, hShader_ ) = ccall((:CG_DrawRotatePic, lib), Void, ( Float32, Float32, Float32, Float32, Float32, qhandle_t,  ), x_, y_, width_, height_, angle_, hShader_ );
CG_DrawRotatePic2( x_, y_, width_, height_, angle_, hShader_ ) = ccall((:CG_DrawRotatePic2, lib), Void, ( Float32, Float32, Float32, Float32, Float32, qhandle_t,  ), x_, y_, width_, height_, angle_, hShader_ );
CG_DrawChar( x_, y_, width_, height_, ch_ ) = ccall((:CG_DrawChar, lib), Void, ( Int32, Int32, Int32, Int32, Int32,  ), x_, y_, width_, height_, ch_ );
CG_DrawStringExt( x_, y_, string_, setColor_, forceColor_, shadow_, charWidth_, charHeight_, maxChars_ ) = ccall((:CG_DrawStringExt, lib), Void, ( Int32, Int32, Ptr{Char}, Ptr{Float32}, qboolean, qboolean, Int32, Int32, Int32,  ), x_, y_, string_, setColor_, forceColor_, shadow_, charWidth_, charHeight_, maxChars_ );
CG_DrawBigString( x_, y_, s_, alpha_ ) = ccall((:CG_DrawBigString, lib), Void, ( Int32, Int32, Ptr{Char}, Float32,  ), x_, y_, s_, alpha_ );
CG_DrawBigStringColor( x_, y_, s_, color_ ) = ccall((:CG_DrawBigStringColor, lib), Void, ( Int32, Int32, Ptr{Char}, vec4_t,  ), x_, y_, s_, color_ );
CG_DrawSmallString( x_, y_, s_, alpha_ ) = ccall((:CG_DrawSmallString, lib), Void, ( Int32, Int32, Ptr{Char}, Float32,  ), x_, y_, s_, alpha_ );
CG_DrawSmallStringColor( x_, y_, s_, color_ ) = ccall((:CG_DrawSmallStringColor, lib), Void, ( Int32, Int32, Ptr{Char}, vec4_t,  ), x_, y_, s_, color_ );
CG_DrawStrlen( str_ ) = ccall((:CG_DrawStrlen, lib), Int32, ( Ptr{Char},  ), str_ );
CG_TileClearBox( x_, y_, w_, h_, hShader_ ) = ccall((:CG_TileClearBox, lib), Void, ( Int32, Int32, Int32, Int32, qhandle_t,  ), x_, y_, w_, h_, hShader_ );
CG_TileClear() = ccall((:CG_TileClear, lib), Void, (),  );
CG_FadeColor( startMsec_, totalMsec_ ) = ccall((:CG_FadeColor, lib), Ptr{Float32}, ( Int32, Int32,  ), startMsec_, totalMsec_ );
CG_ColorForGivenHealth( hcolor_, health_ ) = ccall((:CG_ColorForGivenHealth, lib), Void, ( vec4_t, Int32,  ), hcolor_, health_ );
CG_ColorForHealth( hcolor_ ) = ccall((:CG_ColorForHealth, lib), Void, ( vec4_t,  ), hcolor_ );
CG_DrawNumField( x_, y_, width_, value_, charWidth_, charHeight_, style_, zeroFill_ ) = ccall((:CG_DrawNumField, lib), Void, ( Int32, Int32, Int32, Int32, Int32, Int32, Int32, qboolean,  ), x_, y_, width_, value_, charWidth_, charHeight_, style_, zeroFill_ );
CG_DrawProportionalString( x_, y_, str_, style_, color_ ) = ccall((:CG_DrawProportionalString, lib), Void, ( Int32, Int32, Ptr{Char}, Int32, vec4_t,  ), x_, y_, str_, style_, color_ );
CG_DrawScaledProportionalString( x_, y_, str_, style_, color_, scale_ ) = ccall((:CG_DrawScaledProportionalString, lib), Void, ( Int32, Int32, Ptr{Char}, Int32, vec4_t, Float32,  ), x_, y_, str_, style_, color_, scale_ );
