CG_PositionEntityOnTag( entity_, parent_, parentModel_, tagName_ ) = ccall((:CG_PositionEntityOnTag, lib), Void, ( Ptr{refEntity_t}, Ptr{refEntity_t}, qhandle_t, Ptr{Char},  ), entity_, parent_, parentModel_, tagName_ );
CG_PositionRotatedEntityOnTag( entity_, parent_, parentModel_, tagName_ ) = ccall((:CG_PositionRotatedEntityOnTag, lib), Void, ( Ptr{refEntity_t}, Ptr{refEntity_t}, qhandle_t, Ptr{Char},  ), entity_, parent_, parentModel_, tagName_ );
CG_SetEntitySoundPosition( cent_ ) = ccall((:CG_SetEntitySoundPosition, lib), Void, ( Ptr{centity_t},  ), cent_ );
CG_S_AddLoopingSound( entityNum_, origin_, velocity_, sfx_ ) = ccall((:CG_S_AddLoopingSound, lib), Void, ( Int32, vec3_t, vec3_t, sfxHandle_t,  ), entityNum_, origin_, velocity_, sfx_ );
CG_S_AddRealLoopingSound( entityNum_, origin_, velocity_, sfx_ ) = ccall((:CG_S_AddRealLoopingSound, lib), Void, ( Int32, vec3_t, vec3_t, sfxHandle_t,  ), entityNum_, origin_, velocity_, sfx_ );
CG_S_StopLoopingSound( entityNum_, sfx_ ) = ccall((:CG_S_StopLoopingSound, lib), Void, ( Int32, sfxHandle_t,  ), entityNum_, sfx_ );
CG_S_UpdateLoopingSounds( entityNum_ ) = ccall((:CG_S_UpdateLoopingSounds, lib), Void, ( Int32,  ), entityNum_ );
CG_EntityEffects( cent_ ) = ccall((:CG_EntityEffects, lib), Void, ( Ptr{centity_t},  ), cent_ );
FX_AddOrientedLine( start_, end_, normal_, stScale_, scale_, dscale_, startalpha_, endalpha_, killTime_, shader_ ) = ccall((:FX_AddOrientedLine, lib), localEntity_t, ( vec3_t, vec3_t, vec3_t, Float32, Float32, Float32, Float32, Float32, Float32, qhandle_t,  ), start_, end_, normal_, stScale_, scale_, dscale_, startalpha_, endalpha_, killTime_, shader_ );
FX_DrawPortableShield( cent_ ) = ccall((:FX_DrawPortableShield, lib), Void, ( Ptr{centity_t},  ), cent_ );
CG_Special( cent_ ) = ccall((:CG_Special, lib), Void, ( Ptr{centity_t},  ), cent_ );
CG_SetGhoul2Info( ent_, cent_ ) = ccall((:CG_SetGhoul2Info, lib), Void, ( Ptr{refEntity_t}, Ptr{centity_t},  ), ent_, cent_ );
CG_CreateBBRefEnts( s1_, origin_ ) = ccall((:CG_CreateBBRefEnts, lib), Void, ( Ptr{entityState_t}, vec3_t,  ), s1_, origin_ );
G2_BoltToGhoul2Model( cent_, ent_ ) = ccall((:G2_BoltToGhoul2Model, lib), Void, ( Ptr{centity_t}, Ptr{refEntity_t},  ), cent_, ent_ );
ScaleModelAxis( ent_ ) = ccall((:ScaleModelAxis, lib), Void, ( Ptr{refEntity_t},  ), ent_ );
CG_Disintegration( cent_, ent_ ) = ccall((:CG_Disintegration, lib), Void, ( Ptr{centity_t}, Ptr{refEntity_t},  ), cent_, ent_ );
CG_RenderTimeEntBolt( cent_ ) = ccall((:CG_RenderTimeEntBolt, lib), qboolean, ( Ptr{centity_t},  ), cent_ );
CG_AddRadarEnt( cent_ ) = ccall((:CG_AddRadarEnt, lib), Void, ( Ptr{centity_t},  ), cent_ );
CG_AddBracketedEnt( cent_ ) = ccall((:CG_AddBracketedEnt, lib), Void, ( Ptr{centity_t},  ), cent_ );
CG_General( cent_ ) = ccall((:CG_General, lib), Void, ( Ptr{centity_t},  ), cent_ );
CG_Speaker( cent_ ) = ccall((:CG_Speaker, lib), Void, ( Ptr{centity_t},  ), cent_ );
CG_GreyItem( type_, tag_, plSide_ ) = ccall((:CG_GreyItem, lib), qboolean, ( Int32, Int32, Int32,  ), type_, tag_, plSide_ );
CG_Item( cent_ ) = ccall((:CG_Item, lib), Void, ( Ptr{centity_t},  ), cent_ );
CG_CreateDistortionTrailPart( cent_, scale_, pos_ ) = ccall((:CG_CreateDistortionTrailPart, lib), Void, ( Ptr{centity_t}, Float32, vec3_t,  ), cent_, scale_, pos_ );
CG_Missile( cent_ ) = ccall((:CG_Missile, lib), Void, ( Ptr{centity_t},  ), cent_ );
CG_PlayDoorLoopSound( cent_ ) = ccall((:CG_PlayDoorLoopSound, lib), Void, ( Ptr{centity_t},  ), cent_ );
CG_PlayDoorSound( cent_, type_ ) = ccall((:CG_PlayDoorSound, lib), Void, ( Ptr{centity_t}, Int32,  ), cent_, type_ );
CG_Mover( cent_ ) = ccall((:CG_Mover, lib), Void, ( Ptr{centity_t},  ), cent_ );
CG_Beam( cent_ ) = ccall((:CG_Beam, lib), Void, ( Ptr{centity_t},  ), cent_ );
CG_Portal( cent_ ) = ccall((:CG_Portal, lib), Void, ( Ptr{centity_t},  ), cent_ );
CG_AdjustPositionForMover( in_, moverNum_, fromTime_, toTime_, out_ ) = ccall((:CG_AdjustPositionForMover, lib), Void, ( vec3_t, Int32, Int32, Int32, vec3_t,  ), in_, moverNum_, fromTime_, toTime_, out_ );
CG_InterpolateEntityPosition( cent_ ) = ccall((:CG_InterpolateEntityPosition, lib), Void, ( Ptr{centity_t},  ), cent_ );
CG_CalcEntityLerpPositions( cent_ ) = ccall((:CG_CalcEntityLerpPositions, lib), Void, ( Ptr{centity_t},  ), cent_ );
CG_FX( cent_ ) = ccall((:CG_FX, lib), Void, ( Ptr{centity_t},  ), cent_ );
CG_AddCEntity( cent_ ) = ccall((:CG_AddCEntity, lib), Void, ( Ptr{centity_t},  ), cent_ );
CG_ManualEntityRender( cent_ ) = ccall((:CG_ManualEntityRender, lib), Void, ( Ptr{centity_t},  ), cent_ );
CG_AddPacketEntities( isPortal_ ) = ccall((:CG_AddPacketEntities, lib), Void, ( qboolean,  ), isPortal_ );
CG_ROFF_NotetrackCallback( cent_, notetrack_ ) = ccall((:CG_ROFF_NotetrackCallback, lib), Void, ( Ptr{centity_t}, Ptr{Char},  ), cent_, notetrack_ );
CG_Cube( mins_, maxs_, color_, alpha_ ) = ccall((:CG_Cube, lib), Void, ( vec3_t, vec3_t, vec3_t, Float32,  ), mins_, maxs_, color_, alpha_ );
