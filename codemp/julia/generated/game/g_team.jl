Team_InitGame() = ccall((:Team_InitGame, lib), Void, (),  );
OtherTeam( team_ ) = ccall((:OtherTeam, lib), Int32, ( Int32,  ), team_ );
TeamName( team_ ) = ccall((:TeamName, lib), Char, ( Int32,  ), team_ );
OtherTeamName( team_ ) = ccall((:OtherTeamName, lib), Char, ( Int32,  ), team_ );
TeamColorString( team_ ) = ccall((:TeamColorString, lib), Char, ( Int32,  ), team_ );
PrintCTFMessage( plIndex_, teamIndex_, ctfMessage_ ) = ccall((:PrintCTFMessage, lib), Void, ( Int32, Int32, Int32,  ), plIndex_, teamIndex_, ctfMessage_ );
AddTeamScore( origin_, team_, score_ ) = ccall((:AddTeamScore, lib), Void, ( vec3_t, Int32, Int32,  ), origin_, team_, score_ );
OnSameTeam( ent1_, ent2_ ) = ccall((:OnSameTeam, lib), qboolean, ( Ptr{gentity_t}, Ptr{gentity_t},  ), ent1_, ent2_ );
Team_SetFlagStatus( team_, status_ ) = ccall((:Team_SetFlagStatus, lib), Void, ( Int32, flagStatus_t,  ), team_, status_ );
Team_CheckDroppedItem( dropped_ ) = ccall((:Team_CheckDroppedItem, lib), Void, ( Ptr{gentity_t},  ), dropped_ );
Team_FragBonuses( targ_, inflictor_, attacker_ ) = ccall((:Team_FragBonuses, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), targ_, inflictor_, attacker_ );
Team_CheckHurtCarrier( targ_, attacker_ ) = ccall((:Team_CheckHurtCarrier, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t},  ), targ_, attacker_ );
Team_ResetFlag( team_ ) = ccall((:Team_ResetFlag, lib), gentity_t, ( Int32,  ), team_ );
Team_ResetFlags() = ccall((:Team_ResetFlags, lib), Void, (),  );
Team_ReturnFlagSound( ent_, team_ ) = ccall((:Team_ReturnFlagSound, lib), Void, ( Ptr{gentity_t}, Int32,  ), ent_, team_ );
Team_TakeFlagSound( ent_, team_ ) = ccall((:Team_TakeFlagSound, lib), Void, ( Ptr{gentity_t}, Int32,  ), ent_, team_ );
Team_CaptureFlagSound( ent_, team_ ) = ccall((:Team_CaptureFlagSound, lib), Void, ( Ptr{gentity_t}, Int32,  ), ent_, team_ );
Team_ReturnFlag( team_ ) = ccall((:Team_ReturnFlag, lib), Void, ( Int32,  ), team_ );
Team_FreeEntity( ent_ ) = ccall((:Team_FreeEntity, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Team_DroppedFlagThink( ent_ ) = ccall((:Team_DroppedFlagThink, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Team_TouchOurFlag( ent_, other_, team_ ) = ccall((:Team_TouchOurFlag, lib), Int32, ( Ptr{gentity_t}, Ptr{gentity_t}, Int32,  ), ent_, other_, team_ );
Team_TouchEnemyFlag( ent_, other_, team_ ) = ccall((:Team_TouchEnemyFlag, lib), Int32, ( Ptr{gentity_t}, Ptr{gentity_t}, Int32,  ), ent_, other_, team_ );
Pickup_Team( ent_, other_ ) = ccall((:Pickup_Team, lib), Int32, ( Ptr{gentity_t}, Ptr{gentity_t},  ), ent_, other_ );
Team_GetLocation( ent_ ) = ccall((:Team_GetLocation, lib), locationData_t, ( Ptr{gentity_t},  ), ent_ );
Team_GetLocationMsg( ent_, loc_, loclen_ ) = ccall((:Team_GetLocationMsg, lib), qboolean, ( Ptr{gentity_t}, Ptr{Char}, Int32,  ), ent_, loc_, loclen_ );
SelectRandomTeamSpawnPoint( teamstate_, team_, siegeClass_ ) = ccall((:SelectRandomTeamSpawnPoint, lib), gentity_t, ( Int32, team_t, Int32,  ), teamstate_, team_, siegeClass_ );
SelectCTFSpawnPoint( team_, teamstate_, origin_, angles_, isbot_ ) = ccall((:SelectCTFSpawnPoint, lib), gentity_t, ( team_t, Int32, vec3_t, vec3_t, qboolean,  ), team_, teamstate_, origin_, angles_, isbot_ );
SelectSiegeSpawnPoint( siegeClass_, team_, teamstate_, origin_, angles_, isbot_ ) = ccall((:SelectSiegeSpawnPoint, lib), gentity_t, ( Int32, team_t, Int32, vec3_t, vec3_t, qboolean,  ), siegeClass_, team_, teamstate_, origin_, angles_, isbot_ );
SortClients( a_, b_ ) = ccall((:SortClients, lib), Int32, ( Ptr{Void}, Ptr{Void},  ), a_, b_ );
TeamplayInfoMessage( ent_ ) = ccall((:TeamplayInfoMessage, lib), Void, ( Ptr{gentity_t},  ), ent_ );
CheckTeamStatus() = ccall((:CheckTeamStatus, lib), Void, (),  );
SP_team_CTF_redplayer( ent_ ) = ccall((:SP_team_CTF_redplayer, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SP_team_CTF_blueplayer( ent_ ) = ccall((:SP_team_CTF_blueplayer, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SP_team_CTF_redspawn( ent_ ) = ccall((:SP_team_CTF_redspawn, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SP_team_CTF_bluespawn( ent_ ) = ccall((:SP_team_CTF_bluespawn, lib), Void, ( Ptr{gentity_t},  ), ent_ );
