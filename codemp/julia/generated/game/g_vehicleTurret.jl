VEH_TurretCheckFire( pVeh_, parent_, turretStats_, vehWeapon_, turretNum_, curMuzzle_ ) = ccall((:VEH_TurretCheckFire, lib), Void, ( Ptr{Vehicle_t}, Ptr{gentity_t}, Ptr{turretStats_t}, Ptr{vehWeaponInfo_t}, Int32, Int32,  ), pVeh_, parent_, turretStats_, vehWeapon_, turretNum_, curMuzzle_ );
VEH_TurretAnglesToEnemy( pVeh_, curMuzzle_, fSpeed_, turretEnemy_, bAILead_, desiredAngles_ ) = ccall((:VEH_TurretAnglesToEnemy, lib), Void, ( Ptr{Vehicle_t}, Int32, Float32, Ptr{gentity_t}, qboolean, vec3_t,  ), pVeh_, curMuzzle_, fSpeed_, turretEnemy_, bAILead_, desiredAngles_ );
VEH_TurretAim( pVeh_, parent_, turretEnemy_, turretStats_, vehWeapon_, turretNum_, curMuzzle_, desiredAngles_ ) = ccall((:VEH_TurretAim, lib), qboolean, ( Ptr{Vehicle_t}, Ptr{gentity_t}, Ptr{gentity_t}, Ptr{turretStats_t}, Ptr{vehWeaponInfo_t}, Int32, Int32, vec3_t,  ), pVeh_, parent_, turretEnemy_, turretStats_, vehWeapon_, turretNum_, curMuzzle_, desiredAngles_ );
VEH_TurretFindEnemies( pVeh_, parent_, turretStats_, turretNum_, curMuzzle_ ) = ccall((:VEH_TurretFindEnemies, lib), qboolean, ( Ptr{Vehicle_t}, Ptr{gentity_t}, Ptr{turretStats_t}, Int32, Int32,  ), pVeh_, parent_, turretStats_, turretNum_, curMuzzle_ );
VEH_TurretObeyPassengerControl( pVeh_, parent_, turretNum_ ) = ccall((:VEH_TurretObeyPassengerControl, lib), Void, ( Ptr{Vehicle_t}, Ptr{gentity_t}, Int32,  ), pVeh_, parent_, turretNum_ );
VEH_TurretThink( pVeh_, parent_, turretNum_ ) = ccall((:VEH_TurretThink, lib), Void, ( Ptr{Vehicle_t}, Ptr{gentity_t}, Int32,  ), pVeh_, parent_, turretNum_ );
