isGame() = ccall((:isGame, lib), qboolean, (),  );
isCGame() = ccall((:isCGame, lib), qboolean, (),  );
isUI() = ccall((:isUI, lib), qboolean, (),  );
SP_info_player_duel( ent_ ) = ccall((:SP_info_player_duel, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SP_info_player_duel1( ent_ ) = ccall((:SP_info_player_duel1, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SP_info_player_duel2( ent_ ) = ccall((:SP_info_player_duel2, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SP_info_player_deathmatch( ent_ ) = ccall((:SP_info_player_deathmatch, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SP_info_player_start( ent_ ) = ccall((:SP_info_player_start, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SP_info_player_start_red( ent_ ) = ccall((:SP_info_player_start_red, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SP_info_player_start_blue( ent_ ) = ccall((:SP_info_player_start_blue, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SiegePointUse( self_, other_, activator_ ) = ccall((:SiegePointUse, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), self_, other_, activator_ );
SP_info_player_siegeteam1( ent_ ) = ccall((:SP_info_player_siegeteam1, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SP_info_player_siegeteam2( ent_ ) = ccall((:SP_info_player_siegeteam2, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SP_info_player_intermission( ent_ ) = ccall((:SP_info_player_intermission, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SP_info_player_intermission_red( ent_ ) = ccall((:SP_info_player_intermission_red, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SP_info_player_intermission_blue( ent_ ) = ccall((:SP_info_player_intermission_blue, lib), Void, ( Ptr{gentity_t},  ), ent_ );
ThrowSaberToAttacker( self_, attacker_ ) = ccall((:ThrowSaberToAttacker, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t},  ), self_, attacker_ );
JMSaberThink( ent_ ) = ccall((:JMSaberThink, lib), Void, ( Ptr{gentity_t},  ), ent_ );
JMSaberTouch( self_, other_, trace_ ) = ccall((:JMSaberTouch, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{trace_t},  ), self_, other_, trace_ );
SP_info_jedimaster_start( ent_ ) = ccall((:SP_info_jedimaster_start, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SpotWouldTelefrag( spot_ ) = ccall((:SpotWouldTelefrag, lib), qboolean, ( Ptr{gentity_t},  ), spot_ );
SpotWouldTelefrag2( mover_, dest_ ) = ccall((:SpotWouldTelefrag2, lib), qboolean, ( Ptr{gentity_t}, vec3_t,  ), mover_, dest_ );
SelectNearestDeathmatchSpawnPoint( from_ ) = ccall((:SelectNearestDeathmatchSpawnPoint, lib), Ptr{gentity_t}, ( vec3_t,  ), from_ );
SelectRandomDeathmatchSpawnPoint( isbot_ ) = ccall((:SelectRandomDeathmatchSpawnPoint, lib), Ptr{gentity_t}, ( qboolean,  ), isbot_ );
SelectRandomFurthestSpawnPoint( avoidPoint_, origin_, angles_, team_, isbot_ ) = ccall((:SelectRandomFurthestSpawnPoint, lib), Ptr{gentity_t}, ( vec3_t, vec3_t, vec3_t, team_t, qboolean,  ), avoidPoint_, origin_, angles_, team_, isbot_ );
SelectDuelSpawnPoint( team_, avoidPoint_, origin_, angles_, isbot_ ) = ccall((:SelectDuelSpawnPoint, lib), Ptr{gentity_t}, ( Int32, vec3_t, vec3_t, vec3_t, qboolean,  ), team_, avoidPoint_, origin_, angles_, isbot_ );
SelectSpawnPoint( avoidPoint_, origin_, angles_, team_, isbot_ ) = ccall((:SelectSpawnPoint, lib), Ptr{gentity_t}, ( vec3_t, vec3_t, vec3_t, team_t, qboolean,  ), avoidPoint_, origin_, angles_, team_, isbot_ );
SelectInitialSpawnPoint( origin_, angles_, team_, isbot_ ) = ccall((:SelectInitialSpawnPoint, lib), Ptr{gentity_t}, ( vec3_t, vec3_t, team_t, qboolean,  ), origin_, angles_, team_, isbot_ );
SelectSpectatorSpawnPoint( origin_, angles_ ) = ccall((:SelectSpectatorSpawnPoint, lib), Ptr{gentity_t}, ( vec3_t, vec3_t,  ), origin_, angles_ );
InitBodyQue() = ccall((:InitBodyQue, lib), Void, (),  );
BodySink( ent_ ) = ccall((:BodySink, lib), Void, ( Ptr{gentity_t},  ), ent_ );
CopyToBodyQue( ent_ ) = ccall((:CopyToBodyQue, lib), qboolean, ( Ptr{gentity_t},  ), ent_ );
SetClientViewAngle( ent_, angle_ ) = ccall((:SetClientViewAngle, lib), Void, ( Ptr{gentity_t}, vec3_t,  ), ent_, angle_ );
MaintainBodyQueue( ent_ ) = ccall((:MaintainBodyQueue, lib), Void, ( Ptr{gentity_t},  ), ent_ );
ClientRespawn( ent_ ) = ccall((:ClientRespawn, lib), Void, ( Ptr{gentity_t},  ), ent_ );
TeamCount( ignoreClientNum_, team_ ) = ccall((:TeamCount, lib), Int32, ( Int32, team_t,  ), ignoreClientNum_, team_ );
TeamLeader( team_ ) = ccall((:TeamLeader, lib), Int32, ( Int32,  ), team_ );
PickTeam( ignoreClientNum_ ) = ccall((:PickTeam, lib), team_t, ( Int32,  ), ignoreClientNum_ );
ClientCleanName( in_, out_, outSize_ ) = ccall((:ClientCleanName, lib), Void, ( Ptr{Char}, Ptr{Char}, Int32,  ), in_, out_, outSize_ );
G_DebugWrite( path_, text_ ) = ccall((:G_DebugWrite, lib), Void, ( Ptr{Char}, Ptr{Char},  ), path_, text_ );
G_SaberModelSetup( ent_ ) = ccall((:G_SaberModelSetup, lib), qboolean, ( Ptr{gentity_t},  ), ent_ );
SetupGameGhoul2Model( ent_, modelname_, skinName_ ) = ccall((:SetupGameGhoul2Model, lib), Void, ( Ptr{gentity_t}, Ptr{Char}, Ptr{Char},  ), ent_, modelname_, skinName_ );
Svcmd_ToggleUserinfoValidation_f() = ccall((:Svcmd_ToggleUserinfoValidation_f, lib), Void, (),  );
G_ValidateUserinfo( userinfo_ ) = ccall((:G_ValidateUserinfo, lib), Ptr{Char}, ( Ptr{Char},  ), userinfo_ );
ClientUserinfoChanged( clientNum_ ) = ccall((:ClientUserinfoChanged, lib), qboolean, ( Int32,  ), clientNum_ );
CompareIPs( ip1_, ip2_ ) = ccall((:CompareIPs, lib), qboolean, ( Ptr{Char}, Ptr{Char},  ), ip1_, ip2_ );
ClientConnect( clientNum_, firstTime_, isBot_ ) = ccall((:ClientConnect, lib), Ptr{Char}, ( Int32, qboolean, qboolean,  ), clientNum_, firstTime_, isBot_ );
ClientBegin( clientNum_, allowTeamReset_ ) = ccall((:ClientBegin, lib), Void, ( Int32, qboolean,  ), clientNum_, allowTeamReset_ );
AllForceDisabled( force_ ) = ccall((:AllForceDisabled, lib), qboolean, ( Int32,  ), force_ );
G_BreakArm( ent_, arm_ ) = ccall((:G_BreakArm, lib), Void, ( Ptr{gentity_t}, Int32,  ), ent_, arm_ );
G_UpdateClientAnims( self_, animSpeedScale_ ) = ccall((:G_UpdateClientAnims, lib), Void, ( Ptr{gentity_t}, Float32,  ), self_, animSpeedScale_ );
ClientSpawn( ent_ ) = ccall((:ClientSpawn, lib), Void, ( Ptr{gentity_t},  ), ent_ );
G_ClearVote( ent_ ) = ccall((:G_ClearVote, lib), Void, ( Ptr{gentity_t},  ), ent_ );
G_ClearTeamVote( ent_, team_ ) = ccall((:G_ClearTeamVote, lib), Void, ( Ptr{gentity_t}, Int32,  ), ent_, team_ );
ClientDisconnect( clientNum_ ) = ccall((:ClientDisconnect, lib), Void, ( Int32,  ), clientNum_ );
