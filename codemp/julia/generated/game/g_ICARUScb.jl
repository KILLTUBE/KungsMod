ICARUS_VariableDeclared( name_ ) = ccall((:ICARUS_VariableDeclared, lib), Int32, ( Ptr{Char},  ), name_ );
ICARUS_GetFloatVariable( name_, value_ ) = ccall((:ICARUS_GetFloatVariable, lib), Int32, ( Ptr{Char}, Ptr{Float32},  ), name_, value_ );
ICARUS_SetVar( taskID_, entID_, type_name_, data_ ) = ccall((:ICARUS_SetVar, lib), Void, ( Int32, Int32, Ptr{Char}, Ptr{Char},  ), taskID_, entID_, type_name_, data_ );
#G_DebugPrint( printLevel_, format_, _ ) = ccall((:G_DebugPrint, lib), Void, ( Int32, Ptr{Char}, ,  ), printLevel_, format_, _ );
Q3_GetAnimLower( ent_ ) = ccall((:Q3_GetAnimLower, lib), Ptr{Char}, ( Ptr{gentity_t},  ), ent_ );
Q3_GetAnimUpper( ent_ ) = ccall((:Q3_GetAnimUpper, lib), Ptr{Char}, ( Ptr{gentity_t},  ), ent_ );
Q3_GetAnimBoth( ent_ ) = ccall((:Q3_GetAnimBoth, lib), Ptr{Char}, ( Ptr{gentity_t},  ), ent_ );
Q3_PlaySound( taskID_, entID_, name_, channel_ ) = ccall((:Q3_PlaySound, lib), Int32, ( Int32, Int32, Ptr{Char}, Ptr{Char},  ), taskID_, entID_, name_, channel_ );
Q3_Play( taskID_, entID_, type_, name_ ) = ccall((:Q3_Play, lib), Void, ( Int32, Int32, Ptr{Char}, Ptr{Char},  ), taskID_, entID_, type_, name_ );
anglerCallback( ent_ ) = ccall((:anglerCallback, lib), Void, ( Ptr{gentity_t},  ), ent_ );
moverCallback( ent_ ) = ccall((:moverCallback, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Blocked_Mover( ent_, other_ ) = ccall((:Blocked_Mover, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t},  ), ent_, other_ );
moveAndRotateCallback( ent_ ) = ccall((:moveAndRotateCallback, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Q3_Lerp2Start( entID_, taskID_, duration_ ) = ccall((:Q3_Lerp2Start, lib), Void, ( Int32, Int32, Float32,  ), entID_, taskID_, duration_ );
Q3_Lerp2End( entID_, taskID_, duration_ ) = ccall((:Q3_Lerp2End, lib), Void, ( Int32, Int32, Float32,  ), entID_, taskID_, duration_ );
Q3_Lerp2Pos( taskID_, entID_, origin_, angles_, duration_ ) = ccall((:Q3_Lerp2Pos, lib), Void, ( Int32, Int32, vec3_t, vec3_t, Float32,  ), taskID_, entID_, origin_, angles_, duration_ );
Q3_Lerp2Angles( taskID_, entID_, angles_, duration_ ) = ccall((:Q3_Lerp2Angles, lib), Void, ( Int32, Int32, vec3_t, Float32,  ), taskID_, entID_, angles_, duration_ );
Q3_GetTag( entID_, name_, lookup_, info_ ) = ccall((:Q3_GetTag, lib), Int32, ( Int32, Ptr{Char}, Int32, vec3_t,  ), entID_, name_, lookup_, info_ );
Q3_Use( entID_, target_ ) = ccall((:Q3_Use, lib), Void, ( Int32, Ptr{Char},  ), entID_, target_ );
Q3_Kill( entID_, name_ ) = ccall((:Q3_Kill, lib), Void, ( Int32, Ptr{Char},  ), entID_, name_ );
Q3_RemoveEnt( victim_ ) = ccall((:Q3_RemoveEnt, lib), Void, ( Ptr{gentity_t},  ), victim_ );
Q3_Remove( entID_, name_ ) = ccall((:Q3_Remove, lib), Void, ( Int32, Ptr{Char},  ), entID_, name_ );
Q3_GetFloat( entID_, type_, name_, value_ ) = ccall((:Q3_GetFloat, lib), Int32, ( Int32, Int32, Ptr{Char}, Ptr{Float32},  ), entID_, type_, name_, value_ );
Q3_GetVector( entID_, type_, name_, value_ ) = ccall((:Q3_GetVector, lib), Int32, ( Int32, Int32, Ptr{Char}, vec3_t,  ), entID_, type_, name_, value_ );
Q3_GetString( entID_, type_, name_, value_ ) = ccall((:Q3_GetString, lib), Int32, ( Int32, Int32, Ptr{Char}, Ptr{Ptr{Char}},  ), entID_, type_, name_, value_ );
MoveOwner( self_ ) = ccall((:MoveOwner, lib), Void, ( Ptr{gentity_t},  ), self_ );
Q3_SetTeleportDest( entID_, org_ ) = ccall((:Q3_SetTeleportDest, lib), qboolean, ( Int32, vec3_t,  ), entID_, org_ );
Q3_SetOrigin( entID_, origin_ ) = ccall((:Q3_SetOrigin, lib), Void, ( Int32, vec3_t,  ), entID_, origin_ );
Q3_SetCopyOrigin( entID_, name_ ) = ccall((:Q3_SetCopyOrigin, lib), Void, ( Int32, Ptr{Char},  ), entID_, name_ );
Q3_SetVelocity( entID_, axis_, speed_ ) = ccall((:Q3_SetVelocity, lib), Void, ( Int32, Int32, Float32,  ), entID_, axis_, speed_ );
Q3_SetAngles( entID_, angles_ ) = ccall((:Q3_SetAngles, lib), Void, ( Int32, vec3_t,  ), entID_, angles_ );
Q3_Lerp2Origin( taskID_, entID_, origin_, duration_ ) = ccall((:Q3_Lerp2Origin, lib), Void, ( Int32, Int32, vec3_t, Float32,  ), taskID_, entID_, origin_, duration_ );
Q3_SetOriginOffset( entID_, axis_, offset_ ) = ccall((:Q3_SetOriginOffset, lib), Void, ( Int32, Int32, Float32,  ), entID_, axis_, offset_ );
Q3_SetEnemy( entID_, name_ ) = ccall((:Q3_SetEnemy, lib), Void, ( Int32, Ptr{Char},  ), entID_, name_ );
Q3_SetLeader( entID_, name_ ) = ccall((:Q3_SetLeader, lib), Void, ( Int32, Ptr{Char},  ), entID_, name_ );
Q3_SetNavGoal( entID_, name_ ) = ccall((:Q3_SetNavGoal, lib), qboolean, ( Int32, Ptr{Char},  ), entID_, name_ );
SetLowerAnim( entID_, animID_ ) = ccall((:SetLowerAnim, lib), Void, ( Int32, Int32,  ), entID_, animID_ );
SetUpperAnim( entID_, animID_ ) = ccall((:SetUpperAnim, lib), Void, ( Int32, Int32,  ), entID_, animID_ );
Q3_SetAnimUpper( entID_, anim_name_ ) = ccall((:Q3_SetAnimUpper, lib), qboolean, ( Int32, Ptr{Char},  ), entID_, anim_name_ );
Q3_SetAnimLower( entID_, anim_name_ ) = ccall((:Q3_SetAnimLower, lib), qboolean, ( Int32, Ptr{Char},  ), entID_, anim_name_ );
Q3_SetAnimHoldTime( entID_, int_data_, lower_ ) = ccall((:Q3_SetAnimHoldTime, lib), Void, ( Int32, Int32, qboolean,  ), entID_, int_data_, lower_ );
Q3_SetHealth( entID_, data_ ) = ccall((:Q3_SetHealth, lib), Void, ( Int32, Int32,  ), entID_, data_ );
Q3_SetArmor( entID_, data_ ) = ccall((:Q3_SetArmor, lib), Void, ( Int32, Int32,  ), entID_, data_ );
Q3_SetBState( entID_, bs_name_ ) = ccall((:Q3_SetBState, lib), qboolean, ( Int32, Ptr{Char},  ), entID_, bs_name_ );
Q3_SetTempBState( entID_, bs_name_ ) = ccall((:Q3_SetTempBState, lib), qboolean, ( Int32, Ptr{Char},  ), entID_, bs_name_ );
Q3_SetDefaultBState( entID_, bs_name_ ) = ccall((:Q3_SetDefaultBState, lib), Void, ( Int32, Ptr{Char},  ), entID_, bs_name_ );
Q3_SetDPitch( entID_, data_ ) = ccall((:Q3_SetDPitch, lib), Void, ( Int32, Float32,  ), entID_, data_ );
Q3_SetDYaw( entID_, data_ ) = ccall((:Q3_SetDYaw, lib), Void, ( Int32, Float32,  ), entID_, data_ );
Q3_SetShootDist( entID_, data_ ) = ccall((:Q3_SetShootDist, lib), Void, ( Int32, Float32,  ), entID_, data_ );
Q3_SetVisrange( entID_, data_ ) = ccall((:Q3_SetVisrange, lib), Void, ( Int32, Float32,  ), entID_, data_ );
Q3_SetEarshot( entID_, data_ ) = ccall((:Q3_SetEarshot, lib), Void, ( Int32, Float32,  ), entID_, data_ );
Q3_SetVigilance( entID_, data_ ) = ccall((:Q3_SetVigilance, lib), Void, ( Int32, Float32,  ), entID_, data_ );
Q3_SetVFOV( entID_, data_ ) = ccall((:Q3_SetVFOV, lib), Void, ( Int32, Int32,  ), entID_, data_ );
Q3_SetHFOV( entID_, data_ ) = ccall((:Q3_SetHFOV, lib), Void, ( Int32, Int32,  ), entID_, data_ );
Q3_SetWidth( entID_, data_ ) = ccall((:Q3_SetWidth, lib), Void, ( Int32, Int32,  ), entID_, data_ );
Q3_SetTimeScale( entID_, data_ ) = ccall((:Q3_SetTimeScale, lib), Void, ( Int32, Ptr{Char},  ), entID_, data_ );
Q3_SetInvisible( entID_, invisible_ ) = ccall((:Q3_SetInvisible, lib), Void, ( Int32, qboolean,  ), entID_, invisible_ );
Q3_SetVampire( entID_, vampire_ ) = ccall((:Q3_SetVampire, lib), Void, ( Int32, qboolean,  ), entID_, vampire_ );
Q3_SetGreetAllies( entID_, greet_ ) = ccall((:Q3_SetGreetAllies, lib), Void, ( Int32, qboolean,  ), entID_, greet_ );
Q3_SetViewTarget( entID_, name_ ) = ccall((:Q3_SetViewTarget, lib), Void, ( Int32, Ptr{Char},  ), entID_, name_ );
Q3_SetWatchTarget( entID_, name_ ) = ccall((:Q3_SetWatchTarget, lib), Void, ( Int32, Ptr{Char},  ), entID_, name_ );
Q3_SetLoopSound( entID_, name_ ) = ccall((:Q3_SetLoopSound, lib), Void, ( Int32, Ptr{Char},  ), entID_, name_ );
Q3_SetICARUSFreeze( entID_, name_, freeze_ ) = ccall((:Q3_SetICARUSFreeze, lib), Void, ( Int32, Ptr{Char}, qboolean,  ), entID_, name_, freeze_ );
Q3_SetViewEntity( entID_, name_ ) = ccall((:Q3_SetViewEntity, lib), Void, ( Int32, Ptr{Char},  ), entID_, name_ );
Q3_SetWeapon( entID_, wp_name_ ) = ccall((:Q3_SetWeapon, lib), Void, ( Int32, Ptr{Char},  ), entID_, wp_name_ );
Q3_SetItem( entID_, item_name_ ) = ccall((:Q3_SetItem, lib), Void, ( Int32, Ptr{Char},  ), entID_, item_name_ );
Q3_SetWalkSpeed( entID_, int_data_ ) = ccall((:Q3_SetWalkSpeed, lib), Void, ( Int32, Int32,  ), entID_, int_data_ );
Q3_SetRunSpeed( entID_, int_data_ ) = ccall((:Q3_SetRunSpeed, lib), Void, ( Int32, Int32,  ), entID_, int_data_ );
Q3_SetYawSpeed( entID_, float_data_ ) = ccall((:Q3_SetYawSpeed, lib), Void, ( Int32, Float32,  ), entID_, float_data_ );
Q3_SetAggression( entID_, int_data_ ) = ccall((:Q3_SetAggression, lib), Void, ( Int32, Int32,  ), entID_, int_data_ );
Q3_SetAim( entID_, int_data_ ) = ccall((:Q3_SetAim, lib), Void, ( Int32, Int32,  ), entID_, int_data_ );
Q3_SetFriction( entID_, int_data_ ) = ccall((:Q3_SetFriction, lib), Void, ( Int32, Int32,  ), entID_, int_data_ );
Q3_SetGravity( entID_, float_data_ ) = ccall((:Q3_SetGravity, lib), Void, ( Int32, Float32,  ), entID_, float_data_ );
Q3_SetWait( entID_, float_data_ ) = ccall((:Q3_SetWait, lib), Void, ( Int32, Float32,  ), entID_, float_data_ );
Q3_SetShotSpacing( entID_, int_data_ ) = ccall((:Q3_SetShotSpacing, lib), Void, ( Int32, Int32,  ), entID_, int_data_ );
Q3_SetFollowDist( entID_, float_data_ ) = ccall((:Q3_SetFollowDist, lib), Void, ( Int32, Float32,  ), entID_, float_data_ );
Q3_SetScale( entID_, float_data_ ) = ccall((:Q3_SetScale, lib), Void, ( Int32, Float32,  ), entID_, float_data_ );
Q3_GameSideCheckStringCounterIncrement( string_ ) = ccall((:Q3_GameSideCheckStringCounterIncrement, lib), Float32, ( Ptr{Char},  ), string_ );
Q3_SetCount( entID_, data_ ) = ccall((:Q3_SetCount, lib), Void, ( Int32, Ptr{Char},  ), entID_, data_ );
Q3_SetTargetName( entID_, targetname_ ) = ccall((:Q3_SetTargetName, lib), Void, ( Int32, Ptr{Char},  ), entID_, targetname_ );
Q3_SetTarget( entID_, target_ ) = ccall((:Q3_SetTarget, lib), Void, ( Int32, Ptr{Char},  ), entID_, target_ );
Q3_SetTarget2( entID_, target2_ ) = ccall((:Q3_SetTarget2, lib), Void, ( Int32, Ptr{Char},  ), entID_, target2_ );
Q3_SetRemoveTarget( entID_, target_ ) = ccall((:Q3_SetRemoveTarget, lib), Void, ( Int32, Ptr{Char},  ), entID_, target_ );
Q3_SetPainTarget( entID_, targetname_ ) = ccall((:Q3_SetPainTarget, lib), Void, ( Int32, Ptr{Char},  ), entID_, targetname_ );
Q3_SetFullName( entID_, fullName_ ) = ccall((:Q3_SetFullName, lib), Void, ( Int32, Ptr{Char},  ), entID_, fullName_ );
Q3_SetMusicState( dms_ ) = ccall((:Q3_SetMusicState, lib), Void, ( Ptr{Char},  ), dms_ );
Q3_SetForcePowerLevel( entID_, forcePower_, forceLevel_ ) = ccall((:Q3_SetForcePowerLevel, lib), Void, ( Int32, Int32, Int32,  ), entID_, forcePower_, forceLevel_ );
Q3_SetParm( entID_, parmNum_, parmValue_ ) = ccall((:Q3_SetParm, lib), Void, ( Int32, Int32, Ptr{Char},  ), entID_, parmNum_, parmValue_ );
Q3_SetCaptureGoal( entID_, name_ ) = ccall((:Q3_SetCaptureGoal, lib), Void, ( Int32, Ptr{Char},  ), entID_, name_ );
Q3_SetEvent( entID_, event_name_ ) = ccall((:Q3_SetEvent, lib), Void, ( Int32, Ptr{Char},  ), entID_, event_name_ );
Q3_SetIgnorePain( entID_, data_ ) = ccall((:Q3_SetIgnorePain, lib), Void, ( Int32, qboolean,  ), entID_, data_ );
Q3_SetIgnoreEnemies( entID_, data_ ) = ccall((:Q3_SetIgnoreEnemies, lib), Void, ( Int32, qboolean,  ), entID_, data_ );
Q3_SetIgnoreAlerts( entID_, data_ ) = ccall((:Q3_SetIgnoreAlerts, lib), Void, ( Int32, qboolean,  ), entID_, data_ );
Q3_SetNoTarget( entID_, data_ ) = ccall((:Q3_SetNoTarget, lib), Void, ( Int32, qboolean,  ), entID_, data_ );
Q3_SetDontShoot( entID_, add_ ) = ccall((:Q3_SetDontShoot, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetDontFire( entID_, add_ ) = ccall((:Q3_SetDontFire, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetFireWeapon( entID_, add_ ) = ccall((:Q3_SetFireWeapon, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetInactive( entID_, add_ ) = ccall((:Q3_SetInactive, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetFuncUsableVisible( entID_, visible_ ) = ccall((:Q3_SetFuncUsableVisible, lib), Void, ( Int32, qboolean,  ), entID_, visible_ );
Q3_SetLockedEnemy( entID_, locked_ ) = ccall((:Q3_SetLockedEnemy, lib), Void, ( Int32, qboolean,  ), entID_, locked_ );
Q3_SetCinematicSkipScript( scriptname_ ) = ccall((:Q3_SetCinematicSkipScript, lib), Void, ( Ptr{Char},  ), scriptname_ );
Q3_SetNoMindTrick( entID_, add_ ) = ccall((:Q3_SetNoMindTrick, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetCrouched( entID_, add_ ) = ccall((:Q3_SetCrouched, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetWalking( entID_, add_ ) = ccall((:Q3_SetWalking, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetRunning( entID_, add_ ) = ccall((:Q3_SetRunning, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetForcedMarch( entID_, add_ ) = ccall((:Q3_SetForcedMarch, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetChaseEnemies( entID_, add_ ) = ccall((:Q3_SetChaseEnemies, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetLookForEnemies( entID_, add_ ) = ccall((:Q3_SetLookForEnemies, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetFaceMoveDir( entID_, add_ ) = ccall((:Q3_SetFaceMoveDir, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetAltFire( entID_, add_ ) = ccall((:Q3_SetAltFire, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetDontFlee( entID_, add_ ) = ccall((:Q3_SetDontFlee, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetNoResponse( entID_, add_ ) = ccall((:Q3_SetNoResponse, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetCombatTalk( entID_, add_ ) = ccall((:Q3_SetCombatTalk, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetAlertTalk( entID_, add_ ) = ccall((:Q3_SetAlertTalk, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetUseCpNearest( entID_, add_ ) = ccall((:Q3_SetUseCpNearest, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetNoForce( entID_, add_ ) = ccall((:Q3_SetNoForce, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetNoAcrobatics( entID_, add_ ) = ccall((:Q3_SetNoAcrobatics, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetUseSubtitles( entID_, add_ ) = ccall((:Q3_SetUseSubtitles, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetNoFallToDeath( entID_, add_ ) = ccall((:Q3_SetNoFallToDeath, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetDismemberable( entID_, dismemberable_ ) = ccall((:Q3_SetDismemberable, lib), Void, ( Int32, qboolean,  ), entID_, dismemberable_ );
Q3_SetMoreLight( entID_, add_ ) = ccall((:Q3_SetMoreLight, lib), Void, ( Int32, qboolean,  ), entID_, add_ );
Q3_SetUndying( entID_, undying_ ) = ccall((:Q3_SetUndying, lib), Void, ( Int32, qboolean,  ), entID_, undying_ );
Q3_SetInvincible( entID_, invincible_ ) = ccall((:Q3_SetInvincible, lib), Void, ( Int32, qboolean,  ), entID_, invincible_ );
Q3_SetForceInvincible( entID_, forceInv_ ) = ccall((:Q3_SetForceInvincible, lib), Void, ( Int32, qboolean,  ), entID_, forceInv_ );
Q3_SetNoAvoid( entID_, noAvoid_ ) = ccall((:Q3_SetNoAvoid, lib), Void, ( Int32, qboolean,  ), entID_, noAvoid_ );
SolidifyOwner( self_ ) = ccall((:SolidifyOwner, lib), Void, ( Ptr{gentity_t},  ), self_ );
Q3_SetSolid( entID_, solid_ ) = ccall((:Q3_SetSolid, lib), qboolean, ( Int32, qboolean,  ), entID_, solid_ );
Q3_SetForwardMove( entID_, fmoveVal_ ) = ccall((:Q3_SetForwardMove, lib), Void, ( Int32, Int32,  ), entID_, fmoveVal_ );
Q3_SetRightMove( entID_, rmoveVal_ ) = ccall((:Q3_SetRightMove, lib), Void, ( Int32, Int32,  ), entID_, rmoveVal_ );
Q3_SetLockAngle( entID_, lockAngle_ ) = ccall((:Q3_SetLockAngle, lib), Void, ( Int32, Ptr{Char},  ), entID_, lockAngle_ );
Q3_CameraGroup( entID_, camG_ ) = ccall((:Q3_CameraGroup, lib), Void, ( Int32, Ptr{Char},  ), entID_, camG_ );
Q3_CameraGroupZOfs( camGZOfs_ ) = ccall((:Q3_CameraGroupZOfs, lib), Void, ( Float32,  ), camGZOfs_ );
Q3_CameraGroupTag( camGTag_ ) = ccall((:Q3_CameraGroupTag, lib), Void, ( Ptr{Char},  ), camGTag_ );
Q3_RemoveRHandModel( entID_, addModel_ ) = ccall((:Q3_RemoveRHandModel, lib), Void, ( Int32, Ptr{Char},  ), entID_, addModel_ );
Q3_AddRHandModel( entID_, addModel_ ) = ccall((:Q3_AddRHandModel, lib), Void, ( Int32, Ptr{Char},  ), entID_, addModel_ );
Q3_AddLHandModel( entID_, addModel_ ) = ccall((:Q3_AddLHandModel, lib), Void, ( Int32, Ptr{Char},  ), entID_, addModel_ );
Q3_RemoveLHandModel( entID_, addModel_ ) = ccall((:Q3_RemoveLHandModel, lib), Void, ( Int32, Ptr{Char},  ), entID_, addModel_ );
Q3_LookTarget( entID_, targetName_ ) = ccall((:Q3_LookTarget, lib), Void, ( Int32, Ptr{Char},  ), entID_, targetName_ );
Q3_Face( entID_, expression_, holdtime_ ) = ccall((:Q3_Face, lib), Void, ( Int32, Int32, Float32,  ), entID_, expression_, holdtime_ );
Q3_SetLocation( entID_, location_ ) = ccall((:Q3_SetLocation, lib), qboolean, ( Int32, Ptr{Char},  ), entID_, location_ );
Q3_SetPlayerLocked( entID_, locked_ ) = ccall((:Q3_SetPlayerLocked, lib), Void, ( Int32, qboolean,  ), entID_, locked_ );
Q3_SetLockPlayerWeapons( entID_, locked_ ) = ccall((:Q3_SetLockPlayerWeapons, lib), Void, ( Int32, qboolean,  ), entID_, locked_ );
Q3_SetNoImpactDamage( entID_, noImp_ ) = ccall((:Q3_SetNoImpactDamage, lib), Void, ( Int32, qboolean,  ), entID_, noImp_ );
Q3_SetBehaviorSet( entID_, toSet_, scriptname_ ) = ccall((:Q3_SetBehaviorSet, lib), qboolean, ( Int32, Int32, Ptr{Char},  ), entID_, toSet_, scriptname_ );
Q3_SetDelayScriptTime( entID_, delayTime_ ) = ccall((:Q3_SetDelayScriptTime, lib), Void, ( Int32, Int32,  ), entID_, delayTime_ );
Q3_SetPlayerUsable( entID_, usable_ ) = ccall((:Q3_SetPlayerUsable, lib), Void, ( Int32, qboolean,  ), entID_, usable_ );
Q3_SetDisableShaderAnims( entID_, disabled_ ) = ccall((:Q3_SetDisableShaderAnims, lib), Void, ( Int32, Int32,  ), entID_, disabled_ );
Q3_SetShaderAnim( entID_, disabled_ ) = ccall((:Q3_SetShaderAnim, lib), Void, ( Int32, Int32,  ), entID_, disabled_ );
Q3_SetStartFrame( entID_, startFrame_ ) = ccall((:Q3_SetStartFrame, lib), Void, ( Int32, Int32,  ), entID_, startFrame_ );
Q3_SetEndFrame( entID_, endFrame_ ) = ccall((:Q3_SetEndFrame, lib), Void, ( Int32, Int32,  ), entID_, endFrame_ );
Q3_SetAnimFrame( entID_, animFrame_ ) = ccall((:Q3_SetAnimFrame, lib), Void, ( Int32, Int32,  ), entID_, animFrame_ );
Q3_SetLoopAnim( entID_, loopAnim_ ) = ccall((:Q3_SetLoopAnim, lib), Void, ( Int32, qboolean,  ), entID_, loopAnim_ );
Q3_SetShields( entID_, shields_ ) = ccall((:Q3_SetShields, lib), Void, ( Int32, qboolean,  ), entID_, shields_ );
Q3_SetSaberActive( entID_, active_ ) = ccall((:Q3_SetSaberActive, lib), Void, ( Int32, qboolean,  ), entID_, active_ );
Q3_SetNoKnockback( entID_, noKnockback_ ) = ccall((:Q3_SetNoKnockback, lib), Void, ( Int32, qboolean,  ), entID_, noKnockback_ );
Q3_SetCleanDamagingEnts() = ccall((:Q3_SetCleanDamagingEnts, lib), Void, (),  );
Q3_SetTextColor( textcolor_, color_ ) = ccall((:Q3_SetTextColor, lib), Void, ( vec4_t, Ptr{Char},  ), textcolor_, color_ );
Q3_SetCaptionTextColor( color_ ) = ccall((:Q3_SetCaptionTextColor, lib), Void, ( Ptr{Char},  ), color_ );
Q3_SetCenterTextColor( color_ ) = ccall((:Q3_SetCenterTextColor, lib), Void, ( Ptr{Char},  ), color_ );
Q3_SetScrollTextColor( color_ ) = ccall((:Q3_SetScrollTextColor, lib), Void, ( Ptr{Char},  ), color_ );
Q3_ScrollText( id_ ) = ccall((:Q3_ScrollText, lib), Void, ( Ptr{Char},  ), id_ );
Q3_LCARSText( id_ ) = ccall((:Q3_LCARSText, lib), Void, ( Ptr{Char},  ), id_ );
Q3_Set( taskID_, entID_, type_name_, data_ ) = ccall((:Q3_Set, lib), qboolean, ( Int32, Int32, Ptr{Char}, Ptr{Char},  ), taskID_, entID_, type_name_, data_ );
