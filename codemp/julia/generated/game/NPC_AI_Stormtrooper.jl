ST_AggressionAdjust( self_, change_ ) = ccall((:ST_AggressionAdjust, lib), Void, ( Ptr{gentity_t}, Int32,  ), self_, change_ );
ST_ClearTimers( ent_ ) = ccall((:ST_ClearTimers, lib), Void, ( Ptr{gentity_t},  ), ent_ );
ST_Speech( self_, speechType_, failChance_ ) = ccall((:ST_Speech, lib), Void, ( Ptr{gentity_t}, Int32, Float32,  ), self_, speechType_, failChance_ );
ST_MarkToCover( self_ ) = ccall((:ST_MarkToCover, lib), Void, ( Ptr{gentity_t},  ), self_ );
ST_StartFlee( self_, enemy_, dangerPoint_, dangerLevel_, minTime_, maxTime_ ) = ccall((:ST_StartFlee, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, vec3_t, Int32, Int32, Int32,  ), self_, enemy_, dangerPoint_, dangerLevel_, minTime_, maxTime_ );
NPC_ST_Pain( self_, attacker_, damage_ ) = ccall((:NPC_ST_Pain, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Int32,  ), self_, attacker_, damage_ );
ST_HoldPosition() = ccall((:ST_HoldPosition, lib), Void, (),  );
NPC_ST_SayMovementSpeech() = ccall((:NPC_ST_SayMovementSpeech, lib), Void, (),  );
NPC_ST_StoreMovementSpeech( speech_, chance_ ) = ccall((:NPC_ST_StoreMovementSpeech, lib), Void, ( Int32, Float32,  ), speech_, chance_ );
ST_Move() = ccall((:ST_Move, lib), qboolean, (),  );
NPC_ST_SleepShuffle() = ccall((:NPC_ST_SleepShuffle, lib), Void, (),  );
NPC_BSST_Sleep() = ccall((:NPC_BSST_Sleep, lib), Void, (),  );
NPC_CheckEnemyStealth( target_ ) = ccall((:NPC_CheckEnemyStealth, lib), qboolean, ( Ptr{gentity_t},  ), target_ );
NPC_CheckPlayerTeamStealth() = ccall((:NPC_CheckPlayerTeamStealth, lib), qboolean, (),  );
NPC_ST_InvestigateEvent( eventID_, extraSuspicious_ ) = ccall((:NPC_ST_InvestigateEvent, lib), qboolean, ( Int32, qboolean,  ), eventID_, extraSuspicious_ );
ST_OffsetLook( offset_, out_ ) = ccall((:ST_OffsetLook, lib), Void, ( Float32, vec3_t,  ), offset_, out_ );
ST_LookAround() = ccall((:ST_LookAround, lib), Void, (),  );
NPC_BSST_Investigate() = ccall((:NPC_BSST_Investigate, lib), Void, (),  );
NPC_BSST_Patrol() = ccall((:NPC_BSST_Patrol, lib), Void, (),  );
ST_CheckMoveState() = ccall((:ST_CheckMoveState, lib), Void, (),  );
ST_ResolveBlockedShot( hit_ ) = ccall((:ST_ResolveBlockedShot, lib), Void, ( Int32,  ), hit_ );
ST_CheckFireState() = ccall((:ST_CheckFireState, lib), Void, (),  );
ST_TrackEnemy( self_, enemyPos_ ) = ccall((:ST_TrackEnemy, lib), Void, ( Ptr{gentity_t}, vec3_t,  ), self_, enemyPos_ );
ST_ApproachEnemy( self_ ) = ccall((:ST_ApproachEnemy, lib), Int32, ( Ptr{gentity_t},  ), self_ );
ST_HuntEnemy( self_ ) = ccall((:ST_HuntEnemy, lib), Void, ( Ptr{gentity_t},  ), self_ );
ST_TransferTimers( self_, other_ ) = ccall((:ST_TransferTimers, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t},  ), self_, other_ );
ST_TransferMoveGoal( self_, other_ ) = ccall((:ST_TransferMoveGoal, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t},  ), self_, other_ );
ST_GetCPFlags() = ccall((:ST_GetCPFlags, lib), Int32, (),  );
ST_Commander() = ccall((:ST_Commander, lib), Void, (),  );
NPC_BSST_Attack() = ccall((:NPC_BSST_Attack, lib), Void, (),  );
NPC_BSST_Default() = ccall((:NPC_BSST_Default, lib), Void, (),  );
