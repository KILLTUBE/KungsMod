DeathmatchScoreboardMessage( ent_ ) = ccall((:DeathmatchScoreboardMessage, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_Score_f( ent_ ) = ccall((:Cmd_Score_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
ConcatArgs( start_ ) = ccall((:ConcatArgs, lib), Ptr{Char}, ( Int32,  ), start_ );
StringIsInteger( s_ ) = ccall((:StringIsInteger, lib), qboolean, ( Ptr{Char},  ), s_ );
ClientNumberFromString( to_, s_, allowconnecting_ ) = ccall((:ClientNumberFromString, lib), Int32, ( Ptr{gentity_t}, Ptr{Char}, qboolean,  ), to_, s_, allowconnecting_ );
G_Give( ent_, name_, args_, argc_ ) = ccall((:G_Give, lib), Void, ( Ptr{gentity_t}, Ptr{Char}, Ptr{Char}, Int32,  ), ent_, name_, args_, argc_ );
Cmd_Give_f( ent_ ) = ccall((:Cmd_Give_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_GiveOther_f( ent_ ) = ccall((:Cmd_GiveOther_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_God_f( ent_ ) = ccall((:Cmd_God_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_Notarget_f( ent_ ) = ccall((:Cmd_Notarget_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_Noclip_f( ent_ ) = ccall((:Cmd_Noclip_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_LevelShot_f( ent_ ) = ccall((:Cmd_LevelShot_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_TeamTask_f( ent_ ) = ccall((:Cmd_TeamTask_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
G_Kill( ent_ ) = ccall((:G_Kill, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_Kill_f( ent_ ) = ccall((:Cmd_Kill_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_KillOther_f( ent_ ) = ccall((:Cmd_KillOther_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
BroadcastTeamChange( client_, oldTeam_ ) = ccall((:BroadcastTeamChange, lib), Void, ( Ptr{gclient_t}, Int32,  ), client_, oldTeam_ );
G_PowerDuelCheckFail( ent_ ) = ccall((:G_PowerDuelCheckFail, lib), qboolean, ( Ptr{gentity_t},  ), ent_ );
SetTeam( ent_, s_ ) = ccall((:SetTeam, lib), Void, ( Ptr{gentity_t}, Ptr{Char},  ), ent_, s_ );
StopFollowing( ent_ ) = ccall((:StopFollowing, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_Team_f( ent_ ) = ccall((:Cmd_Team_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_DuelTeam_f( ent_ ) = ccall((:Cmd_DuelTeam_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
G_TeamForSiegeClass( clName_ ) = ccall((:G_TeamForSiegeClass, lib), Int32, ( Ptr{Char},  ), clName_ );
Cmd_SiegeClass_f( ent_ ) = ccall((:Cmd_SiegeClass_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_ForceChanged_f( ent_ ) = ccall((:Cmd_ForceChanged_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
G_SetSaber( ent_, saberNum_, saberName_, siegeOverride_ ) = ccall((:G_SetSaber, lib), qboolean, ( Ptr{gentity_t}, Int32, Ptr{Char}, qboolean,  ), ent_, saberNum_, saberName_, siegeOverride_ );
Cmd_Follow_f( ent_ ) = ccall((:Cmd_Follow_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_FollowCycle_f( ent_, dir_ ) = ccall((:Cmd_FollowCycle_f, lib), Void, ( Ptr{gentity_t}, Int32,  ), ent_, dir_ );
Cmd_FollowNext_f( ent_ ) = ccall((:Cmd_FollowNext_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_FollowPrev_f( ent_ ) = ccall((:Cmd_FollowPrev_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
G_SayTo( ent_, other_, mode_, color_, name_, message_, locMsg_ ) = ccall((:G_SayTo, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Int32, Int32, Ptr{Char}, Ptr{Char}, Ptr{Char},  ), ent_, other_, mode_, color_, name_, message_, locMsg_ );
G_Say( ent_, target_, mode_, chatText_ ) = ccall((:G_Say, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Int32, Ptr{Char},  ), ent_, target_, mode_, chatText_ );
Cmd_Say_f( ent_ ) = ccall((:Cmd_Say_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_SayTeam_f( ent_ ) = ccall((:Cmd_SayTeam_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_Tell_f( ent_ ) = ccall((:Cmd_Tell_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_VoiceCommand_f( ent_ ) = ccall((:Cmd_VoiceCommand_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_GameCommand_f( ent_ ) = ccall((:Cmd_GameCommand_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_Where_f( ent_ ) = ccall((:Cmd_Where_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
G_VoteCapturelimit( ent_, numArgs_, arg1_, arg2_ ) = ccall((:G_VoteCapturelimit, lib), qboolean, ( Ptr{gentity_t}, Int32, Ptr{Char}, Ptr{Char},  ), ent_, numArgs_, arg1_, arg2_ );
G_VoteClientkick( ent_, numArgs_, arg1_, arg2_ ) = ccall((:G_VoteClientkick, lib), qboolean, ( Ptr{gentity_t}, Int32, Ptr{Char}, Ptr{Char},  ), ent_, numArgs_, arg1_, arg2_ );
G_VoteFraglimit( ent_, numArgs_, arg1_, arg2_ ) = ccall((:G_VoteFraglimit, lib), qboolean, ( Ptr{gentity_t}, Int32, Ptr{Char}, Ptr{Char},  ), ent_, numArgs_, arg1_, arg2_ );
G_VoteGametype( ent_, numArgs_, arg1_, arg2_ ) = ccall((:G_VoteGametype, lib), qboolean, ( Ptr{gentity_t}, Int32, Ptr{Char}, Ptr{Char},  ), ent_, numArgs_, arg1_, arg2_ );
G_VoteKick( ent_, numArgs_, arg1_, arg2_ ) = ccall((:G_VoteKick, lib), qboolean, ( Ptr{gentity_t}, Int32, Ptr{Char}, Ptr{Char},  ), ent_, numArgs_, arg1_, arg2_ );
Cmd_MapList_f( ent_ ) = ccall((:Cmd_MapList_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
G_VoteMap( ent_, numArgs_, arg1_, arg2_ ) = ccall((:G_VoteMap, lib), qboolean, ( Ptr{gentity_t}, Int32, Ptr{Char}, Ptr{Char},  ), ent_, numArgs_, arg1_, arg2_ );
G_VoteMapRestart( ent_, numArgs_, arg1_, arg2_ ) = ccall((:G_VoteMapRestart, lib), qboolean, ( Ptr{gentity_t}, Int32, Ptr{Char}, Ptr{Char},  ), ent_, numArgs_, arg1_, arg2_ );
G_VoteNextmap( ent_, numArgs_, arg1_, arg2_ ) = ccall((:G_VoteNextmap, lib), qboolean, ( Ptr{gentity_t}, Int32, Ptr{Char}, Ptr{Char},  ), ent_, numArgs_, arg1_, arg2_ );
G_VoteTimelimit( ent_, numArgs_, arg1_, arg2_ ) = ccall((:G_VoteTimelimit, lib), qboolean, ( Ptr{gentity_t}, Int32, Ptr{Char}, Ptr{Char},  ), ent_, numArgs_, arg1_, arg2_ );
G_VoteWarmup( ent_, numArgs_, arg1_, arg2_ ) = ccall((:G_VoteWarmup, lib), qboolean, ( Ptr{gentity_t}, Int32, Ptr{Char}, Ptr{Char},  ), ent_, numArgs_, arg1_, arg2_ );
Svcmd_ToggleAllowVote_f() = ccall((:Svcmd_ToggleAllowVote_f, lib), Void, (),  );
Cmd_CallVote_f( ent_ ) = ccall((:Cmd_CallVote_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_Vote_f( ent_ ) = ccall((:Cmd_Vote_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
G_TeamVoteLeader( ent_, cs_offset_, team_, numArgs_, arg1_, arg2_ ) = ccall((:G_TeamVoteLeader, lib), qboolean, ( Ptr{gentity_t}, Int32, team_t, Int32, Ptr{Char}, Ptr{Char},  ), ent_, cs_offset_, team_, numArgs_, arg1_, arg2_ );
Cmd_CallTeamVote_f( ent_ ) = ccall((:Cmd_CallTeamVote_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_TeamVote_f( ent_ ) = ccall((:Cmd_TeamVote_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_SetViewpos_f( ent_ ) = ccall((:Cmd_SetViewpos_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
G_LeaveVehicle( ent_, ConCheck_ ) = ccall((:G_LeaveVehicle, lib), Void, ( Ptr{gentity_t}, qboolean,  ), ent_, ConCheck_ );
G_ItemUsable( ps_, forcedUse_ ) = ccall((:G_ItemUsable, lib), Int32, ( Ptr{playerState_t}, Int32,  ), ps_, forcedUse_ );
Cmd_ToggleSaber_f( ent_ ) = ccall((:Cmd_ToggleSaber_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_SaberAttackCycle_f( ent_ ) = ccall((:Cmd_SaberAttackCycle_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
G_OtherPlayersDueling() = ccall((:G_OtherPlayersDueling, lib), qboolean, (),  );
Cmd_EngageDuel_f( ent_ ) = ccall((:Cmd_EngageDuel_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_DebugSetSaberMove_f( self_ ) = ccall((:Cmd_DebugSetSaberMove_f, lib), Void, ( Ptr{gentity_t},  ), self_ );
Cmd_DebugSetBodyAnim_f( self_ ) = ccall((:Cmd_DebugSetBodyAnim_f, lib), Void, ( Ptr{gentity_t},  ), self_ );
StandardSetBodyAnim( self_, anim_, flags_ ) = ccall((:StandardSetBodyAnim, lib), Void, ( Ptr{gentity_t}, Int32, Int32,  ), self_, anim_, flags_ );
TryGrapple( ent_ ) = ccall((:TryGrapple, lib), qboolean, ( Ptr{gentity_t},  ), ent_ );
Cmd_TargetUse_f( ent_ ) = ccall((:Cmd_TargetUse_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_TheDestroyer_f( ent_ ) = ccall((:Cmd_TheDestroyer_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_BotMoveForward_f( ent_ ) = ccall((:Cmd_BotMoveForward_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_BotMoveBack_f( ent_ ) = ccall((:Cmd_BotMoveBack_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_BotMoveRight_f( ent_ ) = ccall((:Cmd_BotMoveRight_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_BotMoveLeft_f( ent_ ) = ccall((:Cmd_BotMoveLeft_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_BotMoveUp_f( ent_ ) = ccall((:Cmd_BotMoveUp_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Cmd_AddBot_f( ent_ ) = ccall((:Cmd_AddBot_f, lib), Void, ( Ptr{gentity_t},  ), ent_ );
cmdcmp( a_, b_ ) = ccall((:cmdcmp, lib), Int32, ( Ptr{Void}, Ptr{Void},  ), a_, b_ );
ClientCommand( clientNum_ ) = ccall((:ClientCommand, lib), Void, ( Int32,  ), clientNum_ );
