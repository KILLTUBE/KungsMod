P_SetTwitchInfo( client_ ) = ccall((:P_SetTwitchInfo, lib), Void, ( Ptr{gclient_t},  ), client_ );
P_DamageFeedback( player_ ) = ccall((:P_DamageFeedback, lib), Void, ( Ptr{gentity_t},  ), player_ );
P_WorldEffects( ent_ ) = ccall((:P_WorldEffects, lib), Void, ( Ptr{gentity_t},  ), ent_ );
DoImpact( self_, other_, damageSelf_ ) = ccall((:DoImpact, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, qboolean,  ), self_, other_, damageSelf_ );
Client_CheckImpactBBrush( self_, other_ ) = ccall((:Client_CheckImpactBBrush, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t},  ), self_, other_ );
G_SetClientSound( ent_ ) = ccall((:G_SetClientSound, lib), Void, ( Ptr{gentity_t},  ), ent_ );
ClientImpacts( ent_, pmove_ ) = ccall((:ClientImpacts, lib), Void, ( Ptr{gentity_t}, Ptr{pmove_t},  ), ent_, pmove_ );
G_TouchTriggers( ent_ ) = ccall((:G_TouchTriggers, lib), Void, ( Ptr{gentity_t},  ), ent_ );
G_MoverTouchPushTriggers( ent_, oldOrg_ ) = ccall((:G_MoverTouchPushTriggers, lib), Void, ( Ptr{gentity_t}, vec3_t,  ), ent_, oldOrg_ );
SV_PMTrace( results_, start_, mins_, maxs_, end_, passEntityNum_, contentMask_ ) = ccall((:SV_PMTrace, lib), Void, ( Ptr{trace_t}, vec3_t, vec3_t, vec3_t, vec3_t, Int32, Int32,  ), results_, start_, mins_, maxs_, end_, passEntityNum_, contentMask_ );
SpectatorThink( ent_, ucmd_ ) = ccall((:SpectatorThink, lib), Void, ( Ptr{gentity_t}, Ptr{usercmd_t},  ), ent_, ucmd_ );
ClientInactivityTimer( client_ ) = ccall((:ClientInactivityTimer, lib), qboolean, ( Ptr{gclient_t},  ), client_ );
ClientTimerActions( ent_, msec_ ) = ccall((:ClientTimerActions, lib), Void, ( Ptr{gentity_t}, Int32,  ), ent_, msec_ );
ClientIntermissionThink( client_ ) = ccall((:ClientIntermissionThink, lib), Void, ( Ptr{gclient_t},  ), client_ );
G_VehicleAttachDroidUnit( vehEnt_ ) = ccall((:G_VehicleAttachDroidUnit, lib), Void, ( Ptr{gentity_t},  ), vehEnt_ );
G_CheapWeaponFire( entNum_, ev_ ) = ccall((:G_CheapWeaponFire, lib), Void, ( Int32, Int32,  ), entNum_, ev_ );
ClientEvents( ent_, oldEventSequence_ ) = ccall((:ClientEvents, lib), Void, ( Ptr{gentity_t}, Int32,  ), ent_, oldEventSequence_ );
SendPendingPredictableEvents( ps_ ) = ccall((:SendPendingPredictableEvents, lib), Void, ( Ptr{playerState_t},  ), ps_ );
G_UpdateClientBroadcasts( self_ ) = ccall((:G_UpdateClientBroadcasts, lib), Void, ( Ptr{gentity_t},  ), self_ );
G_AddPushVecToUcmd( self_, ucmd_ ) = ccall((:G_AddPushVecToUcmd, lib), Void, ( Ptr{gentity_t}, Ptr{usercmd_t},  ), self_, ucmd_ );
G_StandingAnim( anim_ ) = ccall((:G_StandingAnim, lib), qboolean, ( Int32,  ), anim_ );
G_ActionButtonPressed( buttons_ ) = ccall((:G_ActionButtonPressed, lib), qboolean, ( Int32,  ), buttons_ );
G_CheckClientIdle( ent_, ucmd_ ) = ccall((:G_CheckClientIdle, lib), Void, ( Ptr{gentity_t}, Ptr{usercmd_t},  ), ent_, ucmd_ );
NPC_Accelerate( ent_, fullWalkAcc_, fullRunAcc_ ) = ccall((:NPC_Accelerate, lib), Void, ( Ptr{gentity_t}, qboolean, qboolean,  ), ent_, fullWalkAcc_, fullRunAcc_ );
NPC_GetWalkSpeed( ent_ ) = ccall((:NPC_GetWalkSpeed, lib), Int32, ( Ptr{gentity_t},  ), ent_ );
NPC_GetRunSpeed( ent_ ) = ccall((:NPC_GetRunSpeed, lib), Int32, ( Ptr{gentity_t},  ), ent_ );
G_CheckMovingLoopingSounds( ent_, ucmd_ ) = ccall((:G_CheckMovingLoopingSounds, lib), Void, ( Ptr{gentity_t}, Ptr{usercmd_t},  ), ent_, ucmd_ );
G_HeldByMonster( ent_, ucmd_ ) = ccall((:G_HeldByMonster, lib), Void, ( Ptr{gentity_t}, Ptr{usercmd_t},  ), ent_, ucmd_ );
G_SetTauntAnim( ent_, taunt_ ) = ccall((:G_SetTauntAnim, lib), Void, ( Ptr{gentity_t}, Int32,  ), ent_, taunt_ );
ClientThink_real( ent_ ) = ccall((:ClientThink_real, lib), Void, ( Ptr{gentity_t},  ), ent_ );
G_CheckClientTimeouts( ent_ ) = ccall((:G_CheckClientTimeouts, lib), Void, ( Ptr{gentity_t},  ), ent_ );
ClientThink( clientNum_, ucmd_ ) = ccall((:ClientThink, lib), Void, ( Int32, Ptr{usercmd_t},  ), clientNum_, ucmd_ );
G_RunClient( ent_ ) = ccall((:G_RunClient, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SpectatorClientEndFrame( ent_ ) = ccall((:SpectatorClientEndFrame, lib), Void, ( Ptr{gentity_t},  ), ent_ );
ClientEndFrame( ent_ ) = ccall((:ClientEndFrame, lib), Void, ( Ptr{gentity_t},  ), ent_ );
