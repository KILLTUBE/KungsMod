G_ClearLineOfSight( point1_, point2_, ignore_, clipmask_ ) = ccall((:G_ClearLineOfSight, lib), qboolean, ( vec3_t, vec3_t, Int32, Int32,  ), point1_, point2_, ignore_, clipmask_ );
CanSee( ent_ ) = ccall((:CanSee, lib), qboolean, ( Ptr{gentity_t},  ), ent_ );
InFront( spot_, from_, fromAngles_, threshHold_ ) = ccall((:InFront, lib), qboolean, ( vec3_t, vec3_t, vec3_t, Float32,  ), spot_, from_, fromAngles_, threshHold_ );
InFOV3( spot_, from_, fromAngles_, hFOV_, vFOV_ ) = ccall((:InFOV3, lib), qboolean, ( vec3_t, vec3_t, vec3_t, Int32, Int32,  ), spot_, from_, fromAngles_, hFOV_, vFOV_ );
InFOV2( origin_, from_, hFOV_, vFOV_ ) = ccall((:InFOV2, lib), qboolean, ( vec3_t, Ptr{gentity_t}, Int32, Int32,  ), origin_, from_, hFOV_, vFOV_ );
InFOV( ent_, from_, hFOV_, vFOV_ ) = ccall((:InFOV, lib), qboolean, ( Ptr{gentity_t}, Ptr{gentity_t}, Int32, Int32,  ), ent_, from_, hFOV_, vFOV_ );
InVisrange( ent_ ) = ccall((:InVisrange, lib), qboolean, ( Ptr{gentity_t},  ), ent_ );
NPC_CheckVisibility( ent_, flags_ ) = ccall((:NPC_CheckVisibility, lib), visibility_t, ( Ptr{gentity_t}, Int32,  ), ent_, flags_ );
G_CheckSoundEvents( self_, maxHearDist_, ignoreAlert_, mustHaveOwner_, minAlertLevel_ ) = ccall((:G_CheckSoundEvents, lib), Int32, ( Ptr{gentity_t}, Float32, Int32, qboolean, Int32,  ), self_, maxHearDist_, ignoreAlert_, mustHaveOwner_, minAlertLevel_ );
G_GetLightLevel( pos_, fromDir_ ) = ccall((:G_GetLightLevel, lib), Float32, ( vec3_t, vec3_t,  ), pos_, fromDir_ );
G_CheckSightEvents( self_, hFOV_, vFOV_, maxSeeDist_, ignoreAlert_, mustHaveOwner_, minAlertLevel_ ) = ccall((:G_CheckSightEvents, lib), Int32, ( Ptr{gentity_t}, Int32, Int32, Float32, Int32, qboolean, Int32,  ), self_, hFOV_, vFOV_, maxSeeDist_, ignoreAlert_, mustHaveOwner_, minAlertLevel_ );
G_CheckAlertEvents( self_, checkSight_, checkSound_, maxSeeDist_, maxHearDist_, ignoreAlert_, mustHaveOwner_, minAlertLevel_ ) = ccall((:G_CheckAlertEvents, lib), Int32, ( Ptr{gentity_t}, qboolean, qboolean, Float32, Float32, Int32, qboolean, Int32,  ), self_, checkSight_, checkSound_, maxSeeDist_, maxHearDist_, ignoreAlert_, mustHaveOwner_, minAlertLevel_ );
NPC_CheckAlertEvents( checkSight_, checkSound_, ignoreAlert_, mustHaveOwner_, minAlertLevel_ ) = ccall((:NPC_CheckAlertEvents, lib), Int32, ( qboolean, qboolean, Int32, qboolean, Int32,  ), checkSight_, checkSound_, ignoreAlert_, mustHaveOwner_, minAlertLevel_ );
G_CheckForDanger( self_, alertEvent_ ) = ccall((:G_CheckForDanger, lib), qboolean, ( Ptr{gentity_t}, Int32,  ), self_, alertEvent_ );
NPC_CheckForDanger( alertEvent_ ) = ccall((:NPC_CheckForDanger, lib), qboolean, ( Int32,  ), alertEvent_ );
AddSoundEvent( owner_, position_, radius_, alertLevel_, needLOS_ ) = ccall((:AddSoundEvent, lib), Void, ( Ptr{gentity_t}, vec3_t, Float32, alertEventLevel_e, qboolean,  ), owner_, position_, radius_, alertLevel_, needLOS_ );
AddSightEvent( owner_, position_, radius_, alertLevel_, addLight_ ) = ccall((:AddSightEvent, lib), Void, ( Ptr{gentity_t}, vec3_t, Float32, alertEventLevel_e, Float32,  ), owner_, position_, radius_, alertLevel_, addLight_ );
ClearPlayerAlertEvents() = ccall((:ClearPlayerAlertEvents, lib), Void, (),  );
RemoveOldestAlert() = ccall((:RemoveOldestAlert, lib), qboolean, (),  );
G_ClearLOS( self_, start_, end_ ) = ccall((:G_ClearLOS, lib), qboolean, ( Ptr{gentity_t}, vec3_t, vec3_t,  ), self_, start_, end_ );
G_ClearLOS2( self_, ent_, end_ ) = ccall((:G_ClearLOS2, lib), qboolean, ( Ptr{gentity_t}, Ptr{gentity_t}, vec3_t,  ), self_, ent_, end_ );
G_ClearLOS3( self_, start_, ent_ ) = ccall((:G_ClearLOS3, lib), qboolean, ( Ptr{gentity_t}, vec3_t, Ptr{gentity_t},  ), self_, start_, ent_ );
G_ClearLOS4( self_, ent_ ) = ccall((:G_ClearLOS4, lib), qboolean, ( Ptr{gentity_t}, Ptr{gentity_t},  ), self_, ent_ );
G_ClearLOS5( self_, end_ ) = ccall((:G_ClearLOS5, lib), qboolean, ( Ptr{gentity_t}, vec3_t,  ), self_, end_ );
NPC_GetHFOVPercentage( spot_, from_, facing_, hFOV_ ) = ccall((:NPC_GetHFOVPercentage, lib), Float32, ( vec3_t, vec3_t, vec3_t, Float32,  ), spot_, from_, facing_, hFOV_ );
NPC_GetVFOVPercentage( spot_, from_, facing_, vFOV_ ) = ccall((:NPC_GetVFOVPercentage, lib), Float32, ( vec3_t, vec3_t, vec3_t, Float32,  ), spot_, from_, facing_, vFOV_ );
G_FindLocalInterestPoint( self_ ) = ccall((:G_FindLocalInterestPoint, lib), Int32, ( Ptr{gentity_t},  ), self_ );
SP_target_interest( self_ ) = ccall((:SP_target_interest, lib), Void, ( Ptr{gentity_t},  ), self_ );
