G_ClearEnemy( self_ ) = ccall((:G_ClearEnemy, lib), Void, ( Ptr{gentity_t},  ), self_ );
G_AngerAlert( self_ ) = ccall((:G_AngerAlert, lib), Void, ( Ptr{gentity_t},  ), self_ );
G_TeamEnemy( self_ ) = ccall((:G_TeamEnemy, lib), qboolean, ( Ptr{gentity_t},  ), self_ );
G_AttackDelay( self_, enemy_ ) = ccall((:G_AttackDelay, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t},  ), self_, enemy_ );
G_ForceSaberOn( ent_ ) = ccall((:G_ForceSaberOn, lib), Void, ( Ptr{gentity_t},  ), ent_ );
G_SetEnemy( self_, enemy_ ) = ccall((:G_SetEnemy, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t},  ), self_, enemy_ );
ChangeWeapon( ent_, newWeapon_ ) = ccall((:ChangeWeapon, lib), Void, ( Ptr{gentity_t}, Int32,  ), ent_, newWeapon_ );
NPC_ChangeWeapon( newWeapon_ ) = ccall((:NPC_ChangeWeapon, lib), Void, ( Int32,  ), newWeapon_ );
NPC_ApplyWeaponFireDelay() = ccall((:NPC_ApplyWeaponFireDelay, lib), Void, (),  );
ShootThink() = ccall((:ShootThink, lib), Void, (),  );
WeaponThink( inCombat_ ) = ccall((:WeaponThink, lib), Void, ( qboolean,  ), inCombat_ );
HaveWeapon( weapon_ ) = ccall((:HaveWeapon, lib), qboolean, ( Int32,  ), weapon_ );
EntIsGlass( check_ ) = ccall((:EntIsGlass, lib), qboolean, ( Ptr{gentity_t},  ), check_ );
ShotThroughGlass( tr_, target_, spot_, mask_ ) = ccall((:ShotThroughGlass, lib), qboolean, ( Ptr{trace_t}, Ptr{gentity_t}, vec3_t, Int32,  ), tr_, target_, spot_, mask_ );
CanShoot( ent_, shooter_ ) = ccall((:CanShoot, lib), qboolean, ( Ptr{gentity_t}, Ptr{gentity_t},  ), ent_, shooter_ );
NPC_CheckPossibleEnemy( other_, vis_ ) = ccall((:NPC_CheckPossibleEnemy, lib), Void, ( Ptr{gentity_t}, visibility_t,  ), other_, vis_ );
NPC_AttackDebounceForWeapon() = ccall((:NPC_AttackDebounceForWeapon, lib), Int32, (),  );
NPC_MaxDistSquaredForWeapon() = ccall((:NPC_MaxDistSquaredForWeapon, lib), Float32, (),  );
ValidEnemy( ent_ ) = ccall((:ValidEnemy, lib), qboolean, ( Ptr{gentity_t},  ), ent_ );
NPC_EnemyTooFar( enemy_, dist_, toShoot_ ) = ccall((:NPC_EnemyTooFar, lib), qboolean, ( Ptr{gentity_t}, Float32, qboolean,  ), enemy_, dist_, toShoot_ );
NPC_PickEnemy( closestTo_, enemyTeam_, checkVis_, findPlayersFirst_, findClosest_ ) = ccall((:NPC_PickEnemy, lib), gentity_t, ( Ptr{gentity_t}, Int32, qboolean, qboolean, qboolean,  ), closestTo_, enemyTeam_, checkVis_, findPlayersFirst_, findClosest_ );
NPC_PickAlly( facingEachOther_, range_, ignoreGroup_, movingOnly_ ) = ccall((:NPC_PickAlly, lib), gentity_t, ( qboolean, Float32, qboolean, qboolean,  ), facingEachOther_, range_, ignoreGroup_, movingOnly_ );
NPC_CheckEnemy( findNew_, tooFarOk_, setEnemy_ ) = ccall((:NPC_CheckEnemy, lib), gentity_t, ( qboolean, qboolean, qboolean,  ), findNew_, tooFarOk_, setEnemy_ );
NPC_ClearShot( ent_ ) = ccall((:NPC_ClearShot, lib), qboolean, ( Ptr{gentity_t},  ), ent_ );
NPC_ShotEntity( ent_, impactPos_ ) = ccall((:NPC_ShotEntity, lib), Int32, ( Ptr{gentity_t}, vec3_t,  ), ent_, impactPos_ );
NPC_EvaluateShot( hit_, glassOK_ ) = ccall((:NPC_EvaluateShot, lib), qboolean, ( Int32, qboolean,  ), hit_, glassOK_ );
NPC_CheckAttack( scale_ ) = ccall((:NPC_CheckAttack, lib), qboolean, ( Float32,  ), scale_ );
NPC_CheckDefend( scale_ ) = ccall((:NPC_CheckDefend, lib), qboolean, ( Float32,  ), scale_ );
NPC_CheckCanAttack( attack_scale_, stationary_ ) = ccall((:NPC_CheckCanAttack, lib), qboolean, ( Float32, qboolean,  ), attack_scale_, stationary_ );
IdealDistance( self_ ) = ccall((:IdealDistance, lib), Float32, ( Ptr{gentity_t},  ), self_ );
SP_point_combat( self_ ) = ccall((:SP_point_combat, lib), Void, ( Ptr{gentity_t},  ), self_ );
CP_FindCombatPointWaypoints() = ccall((:CP_FindCombatPointWaypoints, lib), Void, (),  );
NPC_CollectCombatPoints( origin_, radius_, points_, flags_ ) = ccall((:NPC_CollectCombatPoints, lib), Int32, ( vec3_t, Float32, Ptr{combatPt_t}, Int32,  ), origin_, radius_, points_, flags_ );
NPC_FindCombatPoint( position_, avoidPosition_, enemyPosition_, flags_, avoidDist_, ignorePoint_ ) = ccall((:NPC_FindCombatPoint, lib), Int32, ( vec3_t, vec3_t, vec3_t, Int32, Float32, Int32,  ), position_, avoidPosition_, enemyPosition_, flags_, avoidDist_, ignorePoint_ );
NPC_FindSquadPoint( position_ ) = ccall((:NPC_FindSquadPoint, lib), Int32, ( vec3_t,  ), position_ );
NPC_ReserveCombatPoint( combatPointID_ ) = ccall((:NPC_ReserveCombatPoint, lib), qboolean, ( Int32,  ), combatPointID_ );
NPC_FreeCombatPoint( combatPointID_, failed_ ) = ccall((:NPC_FreeCombatPoint, lib), qboolean, ( Int32, qboolean,  ), combatPointID_, failed_ );
NPC_SetCombatPoint( combatPointID_ ) = ccall((:NPC_SetCombatPoint, lib), qboolean, ( Int32,  ), combatPointID_ );
NPC_SearchForWeapons() = ccall((:NPC_SearchForWeapons, lib), gentity_t, (),  );
NPC_SetPickUpGoal( foundWeap_ ) = ccall((:NPC_SetPickUpGoal, lib), Void, ( Ptr{gentity_t},  ), foundWeap_ );
NPC_CheckGetNewWeapon() = ccall((:NPC_CheckGetNewWeapon, lib), Void, (),  );
NPC_AimAdjust( change_ ) = ccall((:NPC_AimAdjust, lib), Void, ( Int32,  ), change_ );
G_AimSet( self_, aim_ ) = ccall((:G_AimSet, lib), Void, ( Ptr{gentity_t}, Int32,  ), self_, aim_ );
