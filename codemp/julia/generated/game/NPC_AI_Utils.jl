AI_GetGroupSize( origin_, radius_, playerTeam_, avoid_ ) = ccall((:AI_GetGroupSize, lib), Int32, ( vec3_t, Int32, team_t, Ptr{gentity_t},  ), origin_, radius_, playerTeam_, avoid_ );
AI_GetGroupSize2( ent_, radius_ ) = ccall((:AI_GetGroupSize2, lib), Int32, ( Ptr{gentity_t}, Int32,  ), ent_, radius_ );
AI_SetClosestBuddy( group_ ) = ccall((:AI_SetClosestBuddy, lib), Void, ( Ptr{AIGroupInfo_t},  ), group_ );
AI_SortGroupByPathCostToEnemy( group_ ) = ccall((:AI_SortGroupByPathCostToEnemy, lib), Void, ( Ptr{AIGroupInfo_t},  ), group_ );
AI_FindSelfInPreviousGroup( self_ ) = ccall((:AI_FindSelfInPreviousGroup, lib), qboolean, ( Ptr{gentity_t},  ), self_ );
AI_InsertGroupMember( group_, member_ ) = ccall((:AI_InsertGroupMember, lib), Void, ( Ptr{AIGroupInfo_t}, Ptr{gentity_t},  ), group_, member_ );
AI_TryJoinPreviousGroup( self_ ) = ccall((:AI_TryJoinPreviousGroup, lib), qboolean, ( Ptr{gentity_t},  ), self_ );
AI_GetNextEmptyGroup( self_ ) = ccall((:AI_GetNextEmptyGroup, lib), qboolean, ( Ptr{gentity_t},  ), self_ );
AI_ValidateNoEnemyGroupMember( group_, member_ ) = ccall((:AI_ValidateNoEnemyGroupMember, lib), qboolean, ( Ptr{AIGroupInfo_t}, Ptr{gentity_t},  ), group_, member_ );
AI_ValidateGroupMember( group_, member_ ) = ccall((:AI_ValidateGroupMember, lib), qboolean, ( Ptr{AIGroupInfo_t}, Ptr{gentity_t},  ), group_, member_ );
AI_GetGroup( self_ ) = ccall((:AI_GetGroup, lib), Void, ( Ptr{gentity_t},  ), self_ );
AI_SetNewGroupCommander( group_ ) = ccall((:AI_SetNewGroupCommander, lib), Void, ( Ptr{AIGroupInfo_t},  ), group_ );
AI_DeleteGroupMember( group_, memberNum_ ) = ccall((:AI_DeleteGroupMember, lib), Void, ( Ptr{AIGroupInfo_t}, Int32,  ), group_, memberNum_ );
AI_DeleteSelfFromGroup( self_ ) = ccall((:AI_DeleteSelfFromGroup, lib), Void, ( Ptr{gentity_t},  ), self_ );
AI_GroupMemberKilled( self_ ) = ccall((:AI_GroupMemberKilled, lib), Void, ( Ptr{gentity_t},  ), self_ );
AI_GroupUpdateEnemyLastSeen( group_, spot_ ) = ccall((:AI_GroupUpdateEnemyLastSeen, lib), Void, ( Ptr{AIGroupInfo_t}, vec3_t,  ), group_, spot_ );
AI_GroupUpdateClearShotTime( group_ ) = ccall((:AI_GroupUpdateClearShotTime, lib), Void, ( Ptr{AIGroupInfo_t},  ), group_ );
AI_GroupUpdateSquadstates( group_, member_, newSquadState_ ) = ccall((:AI_GroupUpdateSquadstates, lib), Void, ( Ptr{AIGroupInfo_t}, Ptr{gentity_t}, Int32,  ), group_, member_, newSquadState_ );
AI_RefreshGroup( group_ ) = ccall((:AI_RefreshGroup, lib), qboolean, ( Ptr{AIGroupInfo_t},  ), group_ );
AI_UpdateGroups() = ccall((:AI_UpdateGroups, lib), Void, (),  );
AI_GroupContainsEntNum( group_, entNum_ ) = ccall((:AI_GroupContainsEntNum, lib), qboolean, ( Ptr{AIGroupInfo_t}, Int32,  ), group_, entNum_ );
AI_CheckEnemyCollision( ent_, takeEnemy_ ) = ccall((:AI_CheckEnemyCollision, lib), qboolean, ( Ptr{gentity_t}, qboolean,  ), ent_, takeEnemy_ );
AI_DistributeAttack( attacker_, enemy_, team_, threshold_ ) = ccall((:AI_DistributeAttack, lib), gentity_t, ( Ptr{gentity_t}, Ptr{gentity_t}, team_t, Int32,  ), attacker_, enemy_, team_, threshold_ );
