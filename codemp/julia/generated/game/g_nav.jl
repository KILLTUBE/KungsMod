G_Line( start_, end_, color_, alpha_ ) = ccall((:G_Line, lib), Void, ( vec3_t, vec3_t, vec3_t, Float32,  ), start_, end_, color_, alpha_ );
G_Cube( mins_, maxs_, color_, alpha_ ) = ccall((:G_Cube, lib), Void, ( vec3_t, vec3_t, vec3_t, Float32,  ), mins_, maxs_, color_, alpha_ );
G_CubeOutline( mins_, maxs_, time_, color_, alpha_ ) = ccall((:G_CubeOutline, lib), Void, ( vec3_t, vec3_t, Int32, Int32, Float32,  ), mins_, maxs_, time_, color_, alpha_ );
G_DrawEdge( start_, end_, type_ ) = ccall((:G_DrawEdge, lib), Void, ( vec3_t, vec3_t, Int32,  ), start_, end_, type_ );
G_DrawNode( origin_, type_ ) = ccall((:G_DrawNode, lib), Void, ( vec3_t, Int32,  ), origin_, type_ );
G_DrawCombatPoint( origin_, type_ ) = ccall((:G_DrawCombatPoint, lib), Void, ( vec3_t, Int32,  ), origin_, type_ );
TAG_ShowTags( flags_ ) = ccall((:TAG_ShowTags, lib), Void, ( Int32,  ), flags_ );
FlyingCreature( ent_ ) = ccall((:FlyingCreature, lib), qboolean, ( Ptr{gentity_t},  ), ent_ );
NPC_Blocked( self_, blocker_ ) = ccall((:NPC_Blocked, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t},  ), self_, blocker_ );
NPC_SetMoveGoal( ent_, point_, radius_, isNavGoal_, combatPoint_, targetEnt_ ) = ccall((:NPC_SetMoveGoal, lib), Void, ( Ptr{gentity_t}, vec3_t, Int32, qboolean, Int32, Ptr{gentity_t},  ), ent_, point_, radius_, isNavGoal_, combatPoint_, targetEnt_ );
NAV_HitNavGoal( point_, mins_, maxs_, dest_, radius_, flying_ ) = ccall((:NAV_HitNavGoal, lib), qboolean, ( vec3_t, vec3_t, vec3_t, vec3_t, Int32, qboolean,  ), point_, mins_, maxs_, dest_, radius_, flying_ );
NAV_ClearPathToPoint( self_, pmins_, pmaxs_, point_, clipmask_, okToHitEntNum_ ) = ccall((:NAV_ClearPathToPoint, lib), qboolean, ( Ptr{gentity_t}, vec3_t, vec3_t, vec3_t, Int32, Int32,  ), self_, pmins_, pmaxs_, point_, clipmask_, okToHitEntNum_ );
NAV_FindClosestWaypointForEnt( ent_, targWp_ ) = ccall((:NAV_FindClosestWaypointForEnt, lib), Int32, ( Ptr{gentity_t}, Int32,  ), ent_, targWp_ );
NAV_FindClosestWaypointForPoint( ent_, point_ ) = ccall((:NAV_FindClosestWaypointForPoint, lib), Int32, ( Ptr{gentity_t}, vec3_t,  ), ent_, point_ );
NAV_FindClosestWaypointForPoint2( point_ ) = ccall((:NAV_FindClosestWaypointForPoint2, lib), Int32, ( vec3_t,  ), point_ );
NAV_ClearBlockedInfo( self_ ) = ccall((:NAV_ClearBlockedInfo, lib), Void, ( Ptr{gentity_t},  ), self_ );
NAV_SetBlockedInfo( self_, entId_ ) = ccall((:NAV_SetBlockedInfo, lib), Void, ( Ptr{gentity_t}, Int32,  ), self_, entId_ );
NAV_Steer( self_, dir_, distance_ ) = ccall((:NAV_Steer, lib), Int32, ( Ptr{gentity_t}, vec3_t, Float32,  ), self_, dir_, distance_ );
NAV_CheckAhead( self_, end_, trace_, clipmask_ ) = ccall((:NAV_CheckAhead, lib), qboolean, ( Ptr{gentity_t}, vec3_t, Ptr{trace_t}, Int32,  ), self_, end_, trace_, clipmask_ );
NAV_TestBypass( self_, yaw_, blocked_dist_, movedir_ ) = ccall((:NAV_TestBypass, lib), qboolean, ( Ptr{gentity_t}, Float32, Float32, vec3_t,  ), self_, yaw_, blocked_dist_, movedir_ );
NAV_Bypass( self_, blocker_, blocked_dir_, blocked_dist_, movedir_ ) = ccall((:NAV_Bypass, lib), qboolean, ( Ptr{gentity_t}, Ptr{gentity_t}, vec3_t, Float32, vec3_t,  ), self_, blocker_, blocked_dir_, blocked_dist_, movedir_ );
NAV_MoveBlocker( self_, shove_dir_ ) = ccall((:NAV_MoveBlocker, lib), qboolean, ( Ptr{gentity_t}, vec3_t,  ), self_, shove_dir_ );
NAV_ResolveBlock( self_, blocker_, blocked_dir_ ) = ccall((:NAV_ResolveBlock, lib), qboolean, ( Ptr{gentity_t}, Ptr{gentity_t}, vec3_t,  ), self_, blocker_, blocked_dir_ );
NAV_TrueCollision( self_, blocker_, movedir_, blocked_dir_ ) = ccall((:NAV_TrueCollision, lib), qboolean, ( Ptr{gentity_t}, Ptr{gentity_t}, vec3_t, vec3_t,  ), self_, blocker_, movedir_, blocked_dir_ );
NAV_StackedCanyon( self_, blocker_, pathDir_ ) = ccall((:NAV_StackedCanyon, lib), qboolean, ( Ptr{gentity_t}, Ptr{gentity_t}, vec3_t,  ), self_, blocker_, pathDir_ );
NAV_ResolveEntityCollision( self_, blocker_, movedir_, pathDir_ ) = ccall((:NAV_ResolveEntityCollision, lib), qboolean, ( Ptr{gentity_t}, Ptr{gentity_t}, vec3_t, vec3_t,  ), self_, blocker_, movedir_, pathDir_ );
NAV_TestForBlocked( self_, goal_, blocker_, distance_, flags_ ) = ccall((:NAV_TestForBlocked, lib), qboolean, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t}, Float32, Ptr{Int32},  ), self_, goal_, blocker_, distance_, flags_ );
NAV_AvoidCollision( self_, goal_, info_ ) = ccall((:NAV_AvoidCollision, lib), qboolean, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{navInfo_t},  ), self_, goal_, info_ );
NAV_TestBestNode( self_, startID_, endID_, failEdge_ ) = ccall((:NAV_TestBestNode, lib), Int32, ( Ptr{gentity_t}, Int32, Int32, qboolean,  ), self_, startID_, endID_, failEdge_ );
NAV_GetNearestNode( self_, lastNode_ ) = ccall((:NAV_GetNearestNode, lib), Int32, ( Ptr{gentity_t}, Int32,  ), self_, lastNode_ );
NAV_MicroError( start_, end_ ) = ccall((:NAV_MicroError, lib), qboolean, ( vec3_t, vec3_t,  ), start_, end_ );
NAV_MoveToGoal( self_, info_ ) = ccall((:NAV_MoveToGoal, lib), Int32, ( Ptr{gentity_t}, Ptr{navInfo_t},  ), self_, info_ );
waypoint_testDirection( origin_, yaw_, minDist_ ) = ccall((:waypoint_testDirection, lib), Int32, ( vec3_t, Float32, Int32,  ), origin_, yaw_, minDist_ );
waypoint_getRadius( ent_ ) = ccall((:waypoint_getRadius, lib), Int32, ( Ptr{gentity_t},  ), ent_ );
SP_waypoint( ent_ ) = ccall((:SP_waypoint, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SP_waypoint_small( ent_ ) = ccall((:SP_waypoint_small, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SP_waypoint_navgoal( ent_ ) = ccall((:SP_waypoint_navgoal, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SP_waypoint_navgoal_8( ent_ ) = ccall((:SP_waypoint_navgoal_8, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SP_waypoint_navgoal_4( ent_ ) = ccall((:SP_waypoint_navgoal_4, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SP_waypoint_navgoal_2( ent_ ) = ccall((:SP_waypoint_navgoal_2, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SP_waypoint_navgoal_1( ent_ ) = ccall((:SP_waypoint_navgoal_1, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Svcmd_Nav_f() = ccall((:Svcmd_Nav_f, lib), Void, (),  );
NAV_WaypointsTooFar( wp1_, wp2_ ) = ccall((:NAV_WaypointsTooFar, lib), qboolean, ( Ptr{gentity_t}, Ptr{gentity_t},  ), wp1_, wp2_ );
NAV_ClearStoredWaypoints() = ccall((:NAV_ClearStoredWaypoints, lib), Void, (),  );
NAV_StoreWaypoint( ent_ ) = ccall((:NAV_StoreWaypoint, lib), Void, ( Ptr{gentity_t},  ), ent_ );
NAV_GetStoredWaypoint( targetname_ ) = ccall((:NAV_GetStoredWaypoint, lib), Int32, ( Ptr{Char},  ), targetname_ );
NAV_CalculatePaths( filename_, checksum_ ) = ccall((:NAV_CalculatePaths, lib), Void, ( Ptr{Char}, Int32,  ), filename_, checksum_ );
NAV_Shutdown() = ccall((:NAV_Shutdown, lib), Void, (),  );
NAV_ShowDebugInfo() = ccall((:NAV_ShowDebugInfo, lib), Void, (),  );
NAV_FindPlayerWaypoint( clNum_ ) = ccall((:NAV_FindPlayerWaypoint, lib), Void, ( Int32,  ), clNum_ );
