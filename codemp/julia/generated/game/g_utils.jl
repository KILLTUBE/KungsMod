AddRemap( oldShader_, newShader_, timeOffset_ ) = ccall((:AddRemap, lib), Void, ( Ptr{Char}, Ptr{Char}, Float32,  ), oldShader_, newShader_, timeOffset_ );
BuildShaderStateConfig() = ccall((:BuildShaderStateConfig, lib), Char, (),  );
G_FindConfigstringIndex( name_, start_, max_, create_ ) = ccall((:G_FindConfigstringIndex, lib), Int32, ( Ptr{Char}, Int32, Int32, qboolean,  ), name_, start_, max_, create_ );
G_BoneIndex( name_ ) = ccall((:G_BoneIndex, lib), Int32, ( Ptr{Char},  ), name_ );
G_ModelIndex( name_ ) = ccall((:G_ModelIndex, lib), Int32, ( Ptr{Char},  ), name_ );
G_IconIndex( name_ ) = ccall((:G_IconIndex, lib), Int32, ( Ptr{Char},  ), name_ );
G_SoundIndex( name_ ) = ccall((:G_SoundIndex, lib), Int32, ( Ptr{Char},  ), name_ );
G_SoundSetIndex( name_ ) = ccall((:G_SoundSetIndex, lib), Int32, ( Ptr{Char},  ), name_ );
G_EffectIndex( name_ ) = ccall((:G_EffectIndex, lib), Int32, ( Ptr{Char},  ), name_ );
G_BSPIndex( name_ ) = ccall((:G_BSPIndex, lib), Int32, ( Ptr{Char},  ), name_ );
G_PlayerHasCustomSkeleton( ent_ ) = ccall((:G_PlayerHasCustomSkeleton, lib), qboolean, ( Ptr{gentity_t},  ), ent_ );
G_TeamCommand( team_, cmd_ ) = ccall((:G_TeamCommand, lib), Void, ( team_t, Ptr{Char},  ), team_, cmd_ );
G_Find( from_, fieldofs_, match_ ) = ccall((:G_Find, lib), gentity_t, ( Ptr{gentity_t}, Int32, Ptr{Char},  ), from_, fieldofs_, match_ );
G_RadiusList( origin_, radius_, ignore_, takeDamage_, ent_list_ ) = ccall((:G_RadiusList, lib), Int32, ( vec3_t, Float32, Ptr{gentity_t}, qboolean, Ptr{gentity_t},  ), origin_, radius_, ignore_, takeDamage_, ent_list_ );
G_Throw( targ_, newDir_, push_ ) = ccall((:G_Throw, lib), Void, ( Ptr{gentity_t}, vec3_t, Float32,  ), targ_, newDir_, push_ );
G_FreeFakeClient( cl_ ) = ccall((:G_FreeFakeClient, lib), Void, ( Ptr{Ptr{gclient_t}},  ), cl_ );
G_AllocateVehicleObject( pVeh_ ) = ccall((:G_AllocateVehicleObject, lib), Void, ( Ptr{Ptr{Vehicle_t}},  ), pVeh_ );
G_FreeVehicleObject( pVeh_ ) = ccall((:G_FreeVehicleObject, lib), Void, ( Ptr{Vehicle_t},  ), pVeh_ );
G_CreateFakeClient( entNum_, cl_ ) = ccall((:G_CreateFakeClient, lib), Void, ( Int32, Ptr{Ptr{gclient_t}},  ), entNum_, cl_ );
G_CleanAllFakeClients() = ccall((:G_CleanAllFakeClients, lib), Void, (),  );
G_SetAnim( ent_, ucmd_, setAnimParts_, anim_, setAnimFlags_, blendTime_ ) = ccall((:G_SetAnim, lib), Void, ( Ptr{gentity_t}, Ptr{usercmd_t}, Int32, Int32, Int32, Int32,  ), ent_, ucmd_, setAnimParts_, anim_, setAnimFlags_, blendTime_ );
G_PickTarget( targetname_ ) = ccall((:G_PickTarget, lib), gentity_t, ( Ptr{Char},  ), targetname_ );
GlobalUse( self_, other_, activator_ ) = ccall((:GlobalUse, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), self_, other_, activator_ );
G_UseTargets2( ent_, activator_, string_ ) = ccall((:G_UseTargets2, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{Char},  ), ent_, activator_, string_ );
G_UseTargets( ent_, activator_ ) = ccall((:G_UseTargets, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t},  ), ent_, activator_ );
tv( x_, y_, z_ ) = ccall((:tv, lib), Float32, ( Float32, Float32, Float32,  ), x_, y_, z_ );
vtos( v_ ) = ccall((:vtos, lib), Char, ( vec3_t,  ), v_ );
G_SetMovedir( angles_, movedir_ ) = ccall((:G_SetMovedir, lib), Void, ( vec3_t, vec3_t,  ), angles_, movedir_ );
G_InitGentity( e_ ) = ccall((:G_InitGentity, lib), Void, ( Ptr{gentity_t},  ), e_ );
G_SpewEntList() = ccall((:G_SpewEntList, lib), Void, (),  );
G_Spawn() = ccall((:G_Spawn, lib), gentity_t, (),  );
G_EntitiesFree() = ccall((:G_EntitiesFree, lib), qboolean, (),  );
G_SendG2KillQueue() = ccall((:G_SendG2KillQueue, lib), Void, (),  );
G_KillG2Queue( entNum_ ) = ccall((:G_KillG2Queue, lib), Void, ( Int32,  ), entNum_ );
G_FreeEntity( ed_ ) = ccall((:G_FreeEntity, lib), Void, ( Ptr{gentity_t},  ), ed_ );
G_TempEntity( origin_, event_ ) = ccall((:G_TempEntity, lib), gentity_t, ( vec3_t, Int32,  ), origin_, event_ );
G_SoundTempEntity( origin_, event_, channel_ ) = ccall((:G_SoundTempEntity, lib), gentity_t, ( vec3_t, Int32, Int32,  ), origin_, event_, channel_ );
G_ScaleNetHealth( self_ ) = ccall((:G_ScaleNetHealth, lib), Void, ( Ptr{gentity_t},  ), self_ );
G_KillBox( ent_ ) = ccall((:G_KillBox, lib), Void, ( Ptr{gentity_t},  ), ent_ );
G_AddPredictableEvent( ent_, event_, eventParm_ ) = ccall((:G_AddPredictableEvent, lib), Void, ( Ptr{gentity_t}, Int32, Int32,  ), ent_, event_, eventParm_ );
G_AddEvent( ent_, event_, eventParm_ ) = ccall((:G_AddEvent, lib), Void, ( Ptr{gentity_t}, Int32, Int32,  ), ent_, event_, eventParm_ );
G_PlayEffect( fxID_, org_, ang_ ) = ccall((:G_PlayEffect, lib), gentity_t, ( Int32, vec3_t, vec3_t,  ), fxID_, org_, ang_ );
G_PlayEffectID( fxID_, org_, ang_ ) = ccall((:G_PlayEffectID, lib), gentity_t, ( Int32, vec3_t, vec3_t,  ), fxID_, org_, ang_ );
G_ScreenShake( org_, target_, intensity_, duration_, global_ ) = ccall((:G_ScreenShake, lib), gentity_t, ( vec3_t, Ptr{gentity_t}, Float32, Int32, qboolean,  ), org_, target_, intensity_, duration_, global_ );
G_MuteSound( entnum_, channel_ ) = ccall((:G_MuteSound, lib), Void, ( Int32, Int32,  ), entnum_, channel_ );
G_Sound( ent_, channel_, soundIndex_ ) = ccall((:G_Sound, lib), Void, ( Ptr{gentity_t}, Int32, Int32,  ), ent_, channel_, soundIndex_ );
G_SoundAtLoc( loc_, channel_, soundIndex_ ) = ccall((:G_SoundAtLoc, lib), Void, ( vec3_t, Int32, Int32,  ), loc_, channel_, soundIndex_ );
G_EntitySound( ent_, channel_, soundIndex_ ) = ccall((:G_EntitySound, lib), Void, ( Ptr{gentity_t}, Int32, Int32,  ), ent_, channel_, soundIndex_ );
G_SoundOnEnt( ent_, channel_, soundPath_ ) = ccall((:G_SoundOnEnt, lib), Void, ( Ptr{gentity_t}, soundChannel_t, Ptr{Char},  ), ent_, channel_, soundPath_ );
ValidUseTarget( ent_ ) = ccall((:ValidUseTarget, lib), qboolean, ( Ptr{gentity_t},  ), ent_ );
G_UseDispenserOn( ent_, dispType_, target_ ) = ccall((:G_UseDispenserOn, lib), Void, ( Ptr{gentity_t}, Int32, Ptr{gentity_t},  ), ent_, dispType_, target_ );
G_CanUseDispOn( ent_, dispType_ ) = ccall((:G_CanUseDispOn, lib), Int32, ( Ptr{gentity_t}, Int32,  ), ent_, dispType_ );
TryHeal( ent_, target_ ) = ccall((:TryHeal, lib), qboolean, ( Ptr{gentity_t}, Ptr{gentity_t},  ), ent_, target_ );
TryUse( ent_ ) = ccall((:TryUse, lib), Void, ( Ptr{gentity_t},  ), ent_ );
G_PointInBounds( point_, mins_, maxs_ ) = ccall((:G_PointInBounds, lib), qboolean, ( vec3_t, vec3_t, vec3_t,  ), point_, mins_, maxs_ );
G_BoxInBounds( point_, mins_, maxs_, boundsMins_, boundsMaxs_ ) = ccall((:G_BoxInBounds, lib), qboolean, ( vec3_t, vec3_t, vec3_t, vec3_t, vec3_t,  ), point_, mins_, maxs_, boundsMins_, boundsMaxs_ );
G_SetAngles( ent_, angles_ ) = ccall((:G_SetAngles, lib), Void, ( Ptr{gentity_t}, vec3_t,  ), ent_, angles_ );
G_ClearTrace( start_, mins_, maxs_, end_, ignore_, clipmask_ ) = ccall((:G_ClearTrace, lib), qboolean, ( vec3_t, vec3_t, vec3_t, vec3_t, Int32, Int32,  ), start_, mins_, maxs_, end_, ignore_, clipmask_ );
G_SetOrigin( ent_, origin_ ) = ccall((:G_SetOrigin, lib), Void, ( Ptr{gentity_t}, vec3_t,  ), ent_, origin_ );
G_CheckInSolid( self_, fix_ ) = ccall((:G_CheckInSolid, lib), qboolean, ( Ptr{gentity_t}, qboolean,  ), self_, fix_ );
DebugLine( start_, end_, color_ ) = ccall((:DebugLine, lib), Int32, ( vec3_t, vec3_t, Int32,  ), start_, end_, color_ );
G_ROFF_NotetrackCallback( cent_, notetrack_ ) = ccall((:G_ROFF_NotetrackCallback, lib), Void, ( Ptr{gentity_t}, Ptr{Char},  ), cent_, notetrack_ );
G_SpeechEvent( self_, event_ ) = ccall((:G_SpeechEvent, lib), Void, ( Ptr{gentity_t}, Int32,  ), self_, event_ );
G_ExpandPointToBBox( point_, mins_, maxs_, ignore_, clipmask_ ) = ccall((:G_ExpandPointToBBox, lib), qboolean, ( vec3_t, vec3_t, vec3_t, Int32, Int32,  ), point_, mins_, maxs_, ignore_, clipmask_ );
ShortestLineSegBewteen2LineSegs( start1_, end1_, start2_, end2_, close_pnt1_, close_pnt2_ ) = ccall((:ShortestLineSegBewteen2LineSegs, lib), Float32, ( vec3_t, vec3_t, vec3_t, vec3_t, vec3_t, vec3_t,  ), start1_, end1_, start2_, end2_, close_pnt1_, close_pnt2_ );
