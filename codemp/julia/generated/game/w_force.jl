G_PreDefSound( org_, pdSound_ ) = ccall((:G_PreDefSound, lib), gentity_t, ( vec3_t, Int32,  ), org_, pdSound_ );
WP_InitForcePowers( ent_ ) = ccall((:WP_InitForcePowers, lib), Void, ( Ptr{gentity_t},  ), ent_ );
WP_SpawnInitForcePowers( ent_ ) = ccall((:WP_SpawnInitForcePowers, lib), Void, ( Ptr{gentity_t},  ), ent_ );
ForcePowerUsableOn( attacker_, other_, forcePower_ ) = ccall((:ForcePowerUsableOn, lib), Int32, ( Ptr{gentity_t}, Ptr{gentity_t}, forcePowers_t,  ), attacker_, other_, forcePower_ );
WP_ForcePowerAvailable( self_, forcePower_, overrideAmt_ ) = ccall((:WP_ForcePowerAvailable, lib), qboolean, ( Ptr{gentity_t}, forcePowers_t, Int32,  ), self_, forcePower_, overrideAmt_ );
WP_ForcePowerInUse( self_, forcePower_ ) = ccall((:WP_ForcePowerInUse, lib), qboolean, ( Ptr{gentity_t}, forcePowers_t,  ), self_, forcePower_ );
WP_ForcePowerUsable( self_, forcePower_ ) = ccall((:WP_ForcePowerUsable, lib), qboolean, ( Ptr{gentity_t}, forcePowers_t,  ), self_, forcePower_ );
WP_AbsorbConversion( attacked_, atdAbsLevel_, attacker_, atPower_, atPowerLevel_, atForceSpent_ ) = ccall((:WP_AbsorbConversion, lib), Int32, ( Ptr{gentity_t}, Int32, Ptr{gentity_t}, Int32, Int32, Int32,  ), attacked_, atdAbsLevel_, attacker_, atPower_, atPowerLevel_, atForceSpent_ );
WP_ForcePowerRegenerate( self_, overrideAmt_ ) = ccall((:WP_ForcePowerRegenerate, lib), Void, ( Ptr{gentity_t}, Int32,  ), self_, overrideAmt_ );
WP_ForcePowerStart( self_, forcePower_, overrideAmt_ ) = ccall((:WP_ForcePowerStart, lib), Void, ( Ptr{gentity_t}, forcePowers_t, Int32,  ), self_, forcePower_, overrideAmt_ );
ForceHeal( self_ ) = ccall((:ForceHeal, lib), Void, ( Ptr{gentity_t},  ), self_ );
WP_AddToClientBitflags( ent_, entNum_ ) = ccall((:WP_AddToClientBitflags, lib), Void, ( Ptr{gentity_t}, Int32,  ), ent_, entNum_ );
ForceTeamHeal( self_ ) = ccall((:ForceTeamHeal, lib), Void, ( Ptr{gentity_t},  ), self_ );
ForceTeamForceReplenish( self_ ) = ccall((:ForceTeamForceReplenish, lib), Void, ( Ptr{gentity_t},  ), self_ );
ForceGrip( self_ ) = ccall((:ForceGrip, lib), Void, ( Ptr{gentity_t},  ), self_ );
ForceSpeed( self_, forceDuration_ ) = ccall((:ForceSpeed, lib), Void, ( Ptr{gentity_t}, Int32,  ), self_, forceDuration_ );
ForceSeeing( self_ ) = ccall((:ForceSeeing, lib), Void, ( Ptr{gentity_t},  ), self_ );
ForceProtect( self_ ) = ccall((:ForceProtect, lib), Void, ( Ptr{gentity_t},  ), self_ );
ForceAbsorb( self_ ) = ccall((:ForceAbsorb, lib), Void, ( Ptr{gentity_t},  ), self_ );
ForceRage( self_ ) = ccall((:ForceRage, lib), Void, ( Ptr{gentity_t},  ), self_ );
ForceLightning( self_ ) = ccall((:ForceLightning, lib), Void, ( Ptr{gentity_t},  ), self_ );
ForceLightningDamage( self_, traceEnt_, dir_, impactPoint_ ) = ccall((:ForceLightningDamage, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, vec3_t, vec3_t,  ), self_, traceEnt_, dir_, impactPoint_ );
ForceShootLightning( self_ ) = ccall((:ForceShootLightning, lib), Void, ( Ptr{gentity_t},  ), self_ );
ForceDrain( self_ ) = ccall((:ForceDrain, lib), Void, ( Ptr{gentity_t},  ), self_ );
ForceDrainDamage( self_, traceEnt_, dir_, impactPoint_ ) = ccall((:ForceDrainDamage, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, vec3_t, vec3_t,  ), self_, traceEnt_, dir_, impactPoint_ );
ForceShootDrain( self_ ) = ccall((:ForceShootDrain, lib), Int32, ( Ptr{gentity_t},  ), self_ );
ForceJumpCharge( self_, ucmd_ ) = ccall((:ForceJumpCharge, lib), Void, ( Ptr{gentity_t}, Ptr{usercmd_t},  ), self_, ucmd_ );
WP_GetVelocityForForceJump( self_, jumpVel_, ucmd_ ) = ccall((:WP_GetVelocityForForceJump, lib), Int32, ( Ptr{gentity_t}, vec3_t, Ptr{usercmd_t},  ), self_, jumpVel_, ucmd_ );
ForceJump( self_, ucmd_ ) = ccall((:ForceJump, lib), Void, ( Ptr{gentity_t}, Ptr{usercmd_t},  ), self_, ucmd_ );
WP_AddAsMindtricked( fd_, entNum_ ) = ccall((:WP_AddAsMindtricked, lib), Void, ( Ptr{forcedata_t}, Int32,  ), fd_, entNum_ );
ForceTelepathyCheckDirectNPCTarget( self_, tr_, tookPower_ ) = ccall((:ForceTelepathyCheckDirectNPCTarget, lib), qboolean, ( Ptr{gentity_t}, Ptr{trace_t}, Ptr{qboolean},  ), self_, tr_, tookPower_ );
ForceTelepathy( self_ ) = ccall((:ForceTelepathy, lib), Void, ( Ptr{gentity_t},  ), self_ );
GEntity_UseFunc( self_, other_, activator_ ) = ccall((:GEntity_UseFunc, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), self_, other_, activator_ );
CanCounterThrow( self_, thrower_, pull_ ) = ccall((:CanCounterThrow, lib), qboolean, ( Ptr{gentity_t}, Ptr{gentity_t}, qboolean,  ), self_, thrower_, pull_ );
G_InGetUpAnim( ps_ ) = ccall((:G_InGetUpAnim, lib), qboolean, ( Ptr{playerState_t},  ), ps_ );
G_LetGoOfWall( ent_ ) = ccall((:G_LetGoOfWall, lib), Void, ( Ptr{gentity_t},  ), ent_ );
ForceThrow( self_, pull_ ) = ccall((:ForceThrow, lib), Void, ( Ptr{gentity_t}, qboolean,  ), self_, pull_ );
WP_ForcePowerStop( self_, forcePower_ ) = ccall((:WP_ForcePowerStop, lib), Void, ( Ptr{gentity_t}, forcePowers_t,  ), self_, forcePower_ );
DoGripAction( self_, forcePower_ ) = ccall((:DoGripAction, lib), Void, ( Ptr{gentity_t}, forcePowers_t,  ), self_, forcePower_ );
G_IsMindTricked( fd_, client_ ) = ccall((:G_IsMindTricked, lib), qboolean, ( Ptr{forcedata_t}, Int32,  ), fd_, client_ );
RemoveTrickedEnt( fd_, client_ ) = ccall((:RemoveTrickedEnt, lib), Void, ( Ptr{forcedata_t}, Int32,  ), fd_, client_ );
WP_UpdateMindtrickEnts( self_ ) = ccall((:WP_UpdateMindtrickEnts, lib), Void, ( Ptr{gentity_t},  ), self_ );
WP_ForcePowerRun( self_, forcePower_, cmd_ ) = ccall((:WP_ForcePowerRun, lib), Void, ( Ptr{gentity_t}, forcePowers_t, Ptr{usercmd_t},  ), self_, forcePower_, cmd_ );
WP_DoSpecificPower( self_, ucmd_, forcepower_ ) = ccall((:WP_DoSpecificPower, lib), Int32, ( Ptr{gentity_t}, Ptr{usercmd_t}, forcePowers_t,  ), self_, ucmd_, forcepower_ );
FindGenericEnemyIndex( self_ ) = ccall((:FindGenericEnemyIndex, lib), Void, ( Ptr{gentity_t},  ), self_ );
SeekerDroneUpdate( self_ ) = ccall((:SeekerDroneUpdate, lib), Void, ( Ptr{gentity_t},  ), self_ );
HolocronUpdate( self_ ) = ccall((:HolocronUpdate, lib), Void, ( Ptr{gentity_t},  ), self_ );
JediMasterUpdate( self_ ) = ccall((:JediMasterUpdate, lib), Void, ( Ptr{gentity_t},  ), self_ );
WP_HasForcePowers( ps_ ) = ccall((:WP_HasForcePowers, lib), qboolean, ( Ptr{playerState_t},  ), ps_ );
G_SpecialRollGetup( self_ ) = ccall((:G_SpecialRollGetup, lib), qboolean, ( Ptr{gentity_t},  ), self_ );
WP_ForcePowersUpdate( self_, ucmd_ ) = ccall((:WP_ForcePowersUpdate, lib), Void, ( Ptr{gentity_t}, Ptr{usercmd_t},  ), self_, ucmd_ );
Jedi_DodgeEvasion( self_, shooter_, tr_, hitLoc_ ) = ccall((:Jedi_DodgeEvasion, lib), qboolean, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{trace_t}, Int32,  ), self_, shooter_, tr_, hitLoc_ );
