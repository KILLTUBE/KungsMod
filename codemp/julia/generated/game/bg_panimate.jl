BG_SaberStanceAnim( anim_ ) = ccall((:BG_SaberStanceAnim, lib), qboolean, ( Int32,  ), anim_ );
BG_CrouchAnim( anim_ ) = ccall((:BG_CrouchAnim, lib), qboolean, ( Int32,  ), anim_ );
BG_InSpecialJump( anim_ ) = ccall((:BG_InSpecialJump, lib), qboolean, ( Int32,  ), anim_ );
BG_InSaberStandAnim( anim_ ) = ccall((:BG_InSaberStandAnim, lib), qboolean, ( Int32,  ), anim_ );
BG_InReboundJump( anim_ ) = ccall((:BG_InReboundJump, lib), qboolean, ( Int32,  ), anim_ );
BG_InReboundHold( anim_ ) = ccall((:BG_InReboundHold, lib), qboolean, ( Int32,  ), anim_ );
BG_InReboundRelease( anim_ ) = ccall((:BG_InReboundRelease, lib), qboolean, ( Int32,  ), anim_ );
BG_InBackFlip( anim_ ) = ccall((:BG_InBackFlip, lib), qboolean, ( Int32,  ), anim_ );
BG_DirectFlippingAnim( anim_ ) = ccall((:BG_DirectFlippingAnim, lib), qboolean, ( Int32,  ), anim_ );
BG_SaberInAttackPure( move_ ) = ccall((:BG_SaberInAttackPure, lib), qboolean, ( Int32,  ), move_ );
BG_SaberInAttack( move_ ) = ccall((:BG_SaberInAttack, lib), qboolean, ( Int32,  ), move_ );
BG_SaberInKata( saberMove_ ) = ccall((:BG_SaberInKata, lib), qboolean, ( Int32,  ), saberMove_ );
BG_InKataAnim( anim_ ) = ccall((:BG_InKataAnim, lib), qboolean, ( Int32,  ), anim_ );
BG_SaberInSpecial( move_ ) = ccall((:BG_SaberInSpecial, lib), qboolean, ( Int32,  ), move_ );
BG_KickMove( move_ ) = ccall((:BG_KickMove, lib), qboolean, ( Int32,  ), move_ );
BG_SaberInIdle( move_ ) = ccall((:BG_SaberInIdle, lib), qboolean, ( Int32,  ), move_ );
BG_InExtraDefenseSaberMove( move_ ) = ccall((:BG_InExtraDefenseSaberMove, lib), qboolean, ( Int32,  ), move_ );
BG_FlippingAnim( anim_ ) = ccall((:BG_FlippingAnim, lib), qboolean, ( Int32,  ), anim_ );
BG_SpinningSaberAnim( anim_ ) = ccall((:BG_SpinningSaberAnim, lib), qboolean, ( Int32,  ), anim_ );
BG_SaberInSpecialAttack( anim_ ) = ccall((:BG_SaberInSpecialAttack, lib), qboolean, ( Int32,  ), anim_ );
BG_KickingAnim( anim_ ) = ccall((:BG_KickingAnim, lib), qboolean, ( Int32,  ), anim_ );
BG_InGrappleMove( anim_ ) = ccall((:BG_InGrappleMove, lib), Int32, ( Int32,  ), anim_ );
BG_BrokenParryForAttack( move_ ) = ccall((:BG_BrokenParryForAttack, lib), Int32, ( Int32,  ), move_ );
BG_BrokenParryForParry( move_ ) = ccall((:BG_BrokenParryForParry, lib), Int32, ( Int32,  ), move_ );
BG_KnockawayForParry( move_ ) = ccall((:BG_KnockawayForParry, lib), Int32, ( Int32,  ), move_ );
BG_InRoll( ps_, anim_ ) = ccall((:BG_InRoll, lib), qboolean, ( Ptr{playerState_t}, Int32,  ), ps_, anim_ );
BG_InSpecialDeathAnim( anim_ ) = ccall((:BG_InSpecialDeathAnim, lib), qboolean, ( Int32,  ), anim_ );
BG_InDeathAnim( anim_ ) = ccall((:BG_InDeathAnim, lib), qboolean, ( Int32,  ), anim_ );
BG_InKnockDownOnly( anim_ ) = ccall((:BG_InKnockDownOnly, lib), qboolean, ( Int32,  ), anim_ );
BG_InSaberLockOld( anim_ ) = ccall((:BG_InSaberLockOld, lib), qboolean, ( Int32,  ), anim_ );
BG_InSaberLock( anim_ ) = ccall((:BG_InSaberLock, lib), qboolean, ( Int32,  ), anim_ );
PM_InCartwheel( anim_ ) = ccall((:PM_InCartwheel, lib), qboolean, ( Int32,  ), anim_ );
BG_InKnockDownOnGround( ps_ ) = ccall((:BG_InKnockDownOnGround, lib), qboolean, ( Ptr{playerState_t},  ), ps_ );
BG_StabDownAnim( anim_ ) = ccall((:BG_StabDownAnim, lib), qboolean, ( Int32,  ), anim_ );
PM_SaberBounceForAttack( move_ ) = ccall((:PM_SaberBounceForAttack, lib), Int32, ( Int32,  ), move_ );
PM_SaberDeflectionForQuad( quad_ ) = ccall((:PM_SaberDeflectionForQuad, lib), Int32, ( Int32,  ), quad_ );
PM_SaberInDeflect( move_ ) = ccall((:PM_SaberInDeflect, lib), qboolean, ( Int32,  ), move_ );
PM_SaberInParry( move_ ) = ccall((:PM_SaberInParry, lib), qboolean, ( Int32,  ), move_ );
PM_SaberInKnockaway( move_ ) = ccall((:PM_SaberInKnockaway, lib), qboolean, ( Int32,  ), move_ );
PM_SaberInReflect( move_ ) = ccall((:PM_SaberInReflect, lib), qboolean, ( Int32,  ), move_ );
PM_SaberInStart( move_ ) = ccall((:PM_SaberInStart, lib), qboolean, ( Int32,  ), move_ );
PM_SaberInReturn( move_ ) = ccall((:PM_SaberInReturn, lib), qboolean, ( Int32,  ), move_ );
BG_SaberInReturn( move_ ) = ccall((:BG_SaberInReturn, lib), qboolean, ( Int32,  ), move_ );
PM_InSaberAnim( anim_ ) = ccall((:PM_InSaberAnim, lib), qboolean, ( Int32,  ), anim_ );
PM_InKnockDown( ps_ ) = ccall((:PM_InKnockDown, lib), qboolean, ( Ptr{playerState_t},  ), ps_ );
PM_PainAnim( anim_ ) = ccall((:PM_PainAnim, lib), qboolean, ( Int32,  ), anim_ );
PM_JumpingAnim( anim_ ) = ccall((:PM_JumpingAnim, lib), qboolean, ( Int32,  ), anim_ );
PM_LandingAnim( anim_ ) = ccall((:PM_LandingAnim, lib), qboolean, ( Int32,  ), anim_ );
PM_SpinningAnim( anim_ ) = ccall((:PM_SpinningAnim, lib), qboolean, ( Int32,  ), anim_ );
PM_InOnGroundAnim( anim_ ) = ccall((:PM_InOnGroundAnim, lib), qboolean, ( Int32,  ), anim_ );
PM_InRollComplete( ps_, anim_ ) = ccall((:PM_InRollComplete, lib), qboolean, ( Ptr{playerState_t}, Int32,  ), ps_, anim_ );
PM_CanRollFromSoulCal( ps_ ) = ccall((:PM_CanRollFromSoulCal, lib), qboolean, ( Ptr{playerState_t},  ), ps_ );
BG_SuperBreakLoseAnim( anim_ ) = ccall((:BG_SuperBreakLoseAnim, lib), qboolean, ( Int32,  ), anim_ );
BG_SuperBreakWinAnim( anim_ ) = ccall((:BG_SuperBreakWinAnim, lib), qboolean, ( Int32,  ), anim_ );
BG_SaberLockBreakAnim( anim_ ) = ccall((:BG_SaberLockBreakAnim, lib), qboolean, ( Int32,  ), anim_ );
BG_FullBodyTauntAnim( anim_ ) = ccall((:BG_FullBodyTauntAnim, lib), qboolean, ( Int32,  ), anim_ );
BG_AnimLength( index_, anim_ ) = ccall((:BG_AnimLength, lib), Int32, ( Int32, animNumber_t,  ), index_, anim_ );
PM_AnimLength( index_, anim_ ) = ccall((:PM_AnimLength, lib), Int32, ( Int32, animNumber_t,  ), index_, anim_ );
PM_DebugLegsAnim( anim_ ) = ccall((:PM_DebugLegsAnim, lib), Void, ( Int32,  ), anim_ );
PM_SaberInTransition( move_ ) = ccall((:PM_SaberInTransition, lib), qboolean, ( Int32,  ), move_ );
BG_SaberInTransitionAny( move_ ) = ccall((:BG_SaberInTransitionAny, lib), qboolean, ( Int32,  ), move_ );
BG_FlipPart( ps_, part_ ) = ccall((:BG_FlipPart, lib), Void, ( Ptr{playerState_t}, Int32,  ), ps_, part_ );
BG_InitAnimsets() = ccall((:BG_InitAnimsets, lib), Void, (),  );
BG_ClearAnimsets() = ccall((:BG_ClearAnimsets, lib), Void, (),  );
BG_AnimsetAlloc() = ccall((:BG_AnimsetAlloc, lib), animation_t, (),  );
BG_AnimsetFree( animset_ ) = ccall((:BG_AnimsetFree, lib), Void, ( Ptr{animation_t},  ), animset_ );
CheckAnimFrameForEventType( animEvents_, keyFrame_, eventType_ ) = ccall((:CheckAnimFrameForEventType, lib), Int32, ( Ptr{animevent_t}, Int32, animEventType_t,  ), animEvents_, keyFrame_, eventType_ );
ParseAnimationEvtBlock( aeb_filename_, animEvents_, animations_, i_, text_p_ ) = ccall((:ParseAnimationEvtBlock, lib), Void, ( Ptr{Char}, Ptr{animevent_t}, Ptr{animation_t}, Ptr{Int32}, Ptr{Ptr{Char}},  ), aeb_filename_, animEvents_, animations_, i_, text_p_ );
BG_ParseAnimationEvtFile( as_filename_, animFileIndex_, eventFileIndex_ ) = ccall((:BG_ParseAnimationEvtFile, lib), Int32, ( Ptr{Char}, Int32, Int32,  ), as_filename_, animFileIndex_, eventFileIndex_ );
BG_ParseAnimationFile( filename_, animset_, isHumanoid_ ) = ccall((:BG_ParseAnimationFile, lib), Int32, ( Ptr{Char}, Ptr{animation_t}, qboolean,  ), filename_, animset_, isHumanoid_ );
BG_StartLegsAnim( ps_, anim_ ) = ccall((:BG_StartLegsAnim, lib), Void, ( Ptr{playerState_t}, Int32,  ), ps_, anim_ );
PM_ContinueLegsAnim( anim_ ) = ccall((:PM_ContinueLegsAnim, lib), Void, ( Int32,  ), anim_ );
PM_ForceLegsAnim( anim_ ) = ccall((:PM_ForceLegsAnim, lib), Void, ( Int32,  ), anim_ );
BG_StartTorsoAnim( ps_, anim_ ) = ccall((:BG_StartTorsoAnim, lib), Void, ( Ptr{playerState_t}, Int32,  ), ps_, anim_ );
PM_StartTorsoAnim( anim_ ) = ccall((:PM_StartTorsoAnim, lib), Void, ( Int32,  ), anim_ );
BG_SetLegsAnimTimer( ps_, time_ ) = ccall((:BG_SetLegsAnimTimer, lib), Void, ( Ptr{playerState_t}, Int32,  ), ps_, time_ );
PM_SetLegsAnimTimer( time_ ) = ccall((:PM_SetLegsAnimTimer, lib), Void, ( Int32,  ), time_ );
BG_SetTorsoAnimTimer( ps_, time_ ) = ccall((:BG_SetTorsoAnimTimer, lib), Void, ( Ptr{playerState_t}, Int32,  ), ps_, time_ );
PM_SetTorsoAnimTimer( time_ ) = ccall((:PM_SetTorsoAnimTimer, lib), Void, ( Int32,  ), time_ );
BG_SaberStartTransAnim( clientNum_, saberAnimLevel_, weapon_, anim_, animSpeed_, broken_ ) = ccall((:BG_SaberStartTransAnim, lib), Void, ( Int32, Int32, Int32, Int32, Ptr{Float32}, Int32,  ), clientNum_, saberAnimLevel_, weapon_, anim_, animSpeed_, broken_ );
BG_SetAnimFinal( ps_, animations_, setAnimParts_, anim_, setAnimFlags_ ) = ccall((:BG_SetAnimFinal, lib), Void, ( Ptr{playerState_t}, Ptr{animation_t}, Int32, Int32, Int32,  ), ps_, animations_, setAnimParts_, anim_, setAnimFlags_ );
PM_SetAnimFinal( setAnimParts_, anim_, setAnimFlags_ ) = ccall((:PM_SetAnimFinal, lib), Void, ( Int32, Int32, Int32,  ), setAnimParts_, anim_, setAnimFlags_ );
BG_HasAnimation( animIndex_, animation_ ) = ccall((:BG_HasAnimation, lib), qboolean, ( Int32, Int32,  ), animIndex_, animation_ );
BG_PickAnim( animIndex_, minAnim_, maxAnim_ ) = ccall((:BG_PickAnim, lib), Int32, ( Int32, Int32, Int32,  ), animIndex_, minAnim_, maxAnim_ );
BG_SetAnim( ps_, animations_, setAnimParts_, anim_, setAnimFlags_ ) = ccall((:BG_SetAnim, lib), Void, ( Ptr{playerState_t}, Ptr{animation_t}, Int32, Int32, Int32,  ), ps_, animations_, setAnimParts_, anim_, setAnimFlags_ );
PM_SetAnim( setAnimParts_, anim_, setAnimFlags_ ) = ccall((:PM_SetAnim, lib), Void, ( Int32, Int32, Int32,  ), setAnimParts_, anim_, setAnimFlags_ );
