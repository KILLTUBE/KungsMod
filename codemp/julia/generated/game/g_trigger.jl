InitTrigger( self_ ) = ccall((:InitTrigger, lib), Void, ( Ptr{gentity_t},  ), self_ );
multi_wait( ent_ ) = ccall((:multi_wait, lib), Void, ( Ptr{gentity_t},  ), ent_ );
multi_trigger_run( ent_ ) = ccall((:multi_trigger_run, lib), Void, ( Ptr{gentity_t},  ), ent_ );
G_NameInTriggerClassList( list_, str_ ) = ccall((:G_NameInTriggerClassList, lib), qboolean, ( Ptr{Char}, Ptr{Char},  ), list_, str_ );
multi_trigger( ent_, activator_ ) = ccall((:multi_trigger, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t},  ), ent_, activator_ );
Use_Multi( ent_, other_, activator_ ) = ccall((:Use_Multi, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), ent_, other_, activator_ );
Touch_Multi( self_, other_, trace_ ) = ccall((:Touch_Multi, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{trace_t},  ), self_, other_, trace_ );
trigger_cleared_fire( self_ ) = ccall((:trigger_cleared_fire, lib), Void, ( Ptr{gentity_t},  ), self_ );
SP_trigger_multiple( ent_ ) = ccall((:SP_trigger_multiple, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SP_trigger_once( ent_ ) = ccall((:SP_trigger_once, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Do_Strike( ent_ ) = ccall((:Do_Strike, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Think_Strike( ent_ ) = ccall((:Think_Strike, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Use_Strike( ent_, other_, activator_ ) = ccall((:Use_Strike, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), ent_, other_, activator_ );
SP_trigger_lightningstrike( ent_ ) = ccall((:SP_trigger_lightningstrike, lib), Void, ( Ptr{gentity_t},  ), ent_ );
trigger_always_think( ent_ ) = ccall((:trigger_always_think, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SP_trigger_always( ent_ ) = ccall((:SP_trigger_always, lib), Void, ( Ptr{gentity_t},  ), ent_ );
trigger_push_touch( self_, other_, trace_ ) = ccall((:trigger_push_touch, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{trace_t},  ), self_, other_, trace_ );
AimAtTarget( self_ ) = ccall((:AimAtTarget, lib), Void, ( Ptr{gentity_t},  ), self_ );
SP_trigger_push( self_ ) = ccall((:SP_trigger_push, lib), Void, ( Ptr{gentity_t},  ), self_ );
Use_target_push( self_, other_, activator_ ) = ccall((:Use_target_push, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), self_, other_, activator_ );
SP_target_push( self_ ) = ccall((:SP_target_push, lib), Void, ( Ptr{gentity_t},  ), self_ );
trigger_teleporter_touch( self_, other_, trace_ ) = ccall((:trigger_teleporter_touch, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{trace_t},  ), self_, other_, trace_ );
SP_trigger_teleport( self_ ) = ccall((:SP_trigger_teleport, lib), Void, ( Ptr{gentity_t},  ), self_ );
hurt_use( self_, other_, activator_ ) = ccall((:hurt_use, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), self_, other_, activator_ );
hurt_touch( self_, other_, trace_ ) = ccall((:hurt_touch, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{trace_t},  ), self_, other_, trace_ );
SP_trigger_hurt( self_ ) = ccall((:SP_trigger_hurt, lib), Void, ( Ptr{gentity_t},  ), self_ );
space_touch( self_, other_, trace_ ) = ccall((:space_touch, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{trace_t},  ), self_, other_, trace_ );
SP_trigger_space( self_ ) = ccall((:SP_trigger_space, lib), Void, ( Ptr{gentity_t},  ), self_ );
shipboundary_touch( self_, other_, trace_ ) = ccall((:shipboundary_touch, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{trace_t},  ), self_, other_, trace_ );
shipboundary_think( ent_ ) = ccall((:shipboundary_think, lib), Void, ( Ptr{gentity_t},  ), ent_ );
SP_trigger_shipboundary( self_ ) = ccall((:SP_trigger_shipboundary, lib), Void, ( Ptr{gentity_t},  ), self_ );
hyperspace_touch( self_, other_, trace_ ) = ccall((:hyperspace_touch, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{trace_t},  ), self_, other_, trace_ );
SP_trigger_hyperspace( self_ ) = ccall((:SP_trigger_hyperspace, lib), Void, ( Ptr{gentity_t},  ), self_ );
func_timer_think( self_ ) = ccall((:func_timer_think, lib), Void, ( Ptr{gentity_t},  ), self_ );
func_timer_use( self_, other_, activator_ ) = ccall((:func_timer_use, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), self_, other_, activator_ );
SP_func_timer( self_ ) = ccall((:SP_func_timer, lib), Void, ( Ptr{gentity_t},  ), self_ );
asteroid_pick_random_asteroid( self_ ) = ccall((:asteroid_pick_random_asteroid, lib), Ptr{gentity_t}, ( Ptr{gentity_t},  ), self_ );
asteroid_count_num_asteroids( self_ ) = ccall((:asteroid_count_num_asteroids, lib), Int32, ( Ptr{gentity_t},  ), self_ );
asteroid_field_think( self_ ) = ccall((:asteroid_field_think, lib), Void, ( Ptr{gentity_t},  ), self_ );
SP_trigger_asteroid_field( self_ ) = ccall((:SP_trigger_asteroid_field, lib), Void, ( Ptr{gentity_t},  ), self_ );
