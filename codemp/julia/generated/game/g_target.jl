Use_Target_Give( ent_, other_, activator_ ) = ccall((:Use_Target_Give, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), ent_, other_, activator_ );
SP_target_give( ent_ ) = ccall((:SP_target_give, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Use_target_remove_powerups( ent_, other_, activator_ ) = ccall((:Use_target_remove_powerups, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), ent_, other_, activator_ );
SP_target_remove_powerups( ent_ ) = ccall((:SP_target_remove_powerups, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Think_Target_Delay( ent_ ) = ccall((:Think_Target_Delay, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Use_Target_Delay( ent_, other_, activator_ ) = ccall((:Use_Target_Delay, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), ent_, other_, activator_ );
SP_target_delay( ent_ ) = ccall((:SP_target_delay, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Use_Target_Score( ent_, other_, activator_ ) = ccall((:Use_Target_Score, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), ent_, other_, activator_ );
SP_target_score( ent_ ) = ccall((:SP_target_score, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Use_Target_Print( ent_, other_, activator_ ) = ccall((:Use_Target_Print, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), ent_, other_, activator_ );
SP_target_print( ent_ ) = ccall((:SP_target_print, lib), Void, ( Ptr{gentity_t},  ), ent_ );
Use_Target_Speaker( ent_, other_, activator_ ) = ccall((:Use_Target_Speaker, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), ent_, other_, activator_ );
SP_target_speaker( ent_ ) = ccall((:SP_target_speaker, lib), Void, ( Ptr{gentity_t},  ), ent_ );
target_laser_think( self_ ) = ccall((:target_laser_think, lib), Void, ( Ptr{gentity_t},  ), self_ );
target_laser_on( self_ ) = ccall((:target_laser_on, lib), Void, ( Ptr{gentity_t},  ), self_ );
target_laser_off( self_ ) = ccall((:target_laser_off, lib), Void, ( Ptr{gentity_t},  ), self_ );
target_laser_use( self_, other_, activator_ ) = ccall((:target_laser_use, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), self_, other_, activator_ );
target_laser_start( self_ ) = ccall((:target_laser_start, lib), Void, ( Ptr{gentity_t},  ), self_ );
SP_target_laser( self_ ) = ccall((:SP_target_laser, lib), Void, ( Ptr{gentity_t},  ), self_ );
target_teleporter_use( self_, other_, activator_ ) = ccall((:target_teleporter_use, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), self_, other_, activator_ );
SP_target_teleporter( self_ ) = ccall((:SP_target_teleporter, lib), Void, ( Ptr{gentity_t},  ), self_ );
target_relay_use( self_, other_, activator_ ) = ccall((:target_relay_use, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), self_, other_, activator_ );
SP_target_relay( self_ ) = ccall((:SP_target_relay, lib), Void, ( Ptr{gentity_t},  ), self_ );
target_kill_use( self_, other_, activator_ ) = ccall((:target_kill_use, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), self_, other_, activator_ );
SP_target_kill( self_ ) = ccall((:SP_target_kill, lib), Void, ( Ptr{gentity_t},  ), self_ );
SP_target_position( self_ ) = ccall((:SP_target_position, lib), Void, ( Ptr{gentity_t},  ), self_ );
SP_target_location( self_ ) = ccall((:SP_target_location, lib), Void, ( Ptr{gentity_t},  ), self_ );
target_counter_use( self_, other_, activator_ ) = ccall((:target_counter_use, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), self_, other_, activator_ );
SP_target_counter( self_ ) = ccall((:SP_target_counter, lib), Void, ( Ptr{gentity_t},  ), self_ );
target_random_use( self_, other_, activator_ ) = ccall((:target_random_use, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), self_, other_, activator_ );
SP_target_random( self_ ) = ccall((:SP_target_random, lib), Void, ( Ptr{gentity_t},  ), self_ );
scriptrunner_run( self_ ) = ccall((:scriptrunner_run, lib), Void, ( Ptr{gentity_t},  ), self_ );
target_scriptrunner_use( self_, other_, activator_ ) = ccall((:target_scriptrunner_use, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), self_, other_, activator_ );
SP_target_scriptrunner( self_ ) = ccall((:SP_target_scriptrunner, lib), Void, ( Ptr{gentity_t},  ), self_ );
G_SetActiveState( targetstring_, actState_ ) = ccall((:G_SetActiveState, lib), Void, ( Ptr{Char}, qboolean,  ), targetstring_, actState_ );
target_activate_use( self_, other_, activator_ ) = ccall((:target_activate_use, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), self_, other_, activator_ );
target_deactivate_use( self_, other_, activator_ ) = ccall((:target_deactivate_use, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), self_, other_, activator_ );
SP_target_activate( self_ ) = ccall((:SP_target_activate, lib), Void, ( Ptr{gentity_t},  ), self_ );
SP_target_deactivate( self_ ) = ccall((:SP_target_deactivate, lib), Void, ( Ptr{gentity_t},  ), self_ );
target_level_change_use( self_, other_, activator_ ) = ccall((:target_level_change_use, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), self_, other_, activator_ );
SP_target_level_change( self_ ) = ccall((:SP_target_level_change, lib), Void, ( Ptr{gentity_t},  ), self_ );
target_play_music_use( self_, other_, activator_ ) = ccall((:target_play_music_use, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), self_, other_, activator_ );
SP_target_play_music( self_ ) = ccall((:SP_target_play_music, lib), Void, ( Ptr{gentity_t},  ), self_ );
