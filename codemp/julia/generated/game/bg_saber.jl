PM_irand_timesync( val1_, val2_ ) = ccall((:PM_irand_timesync, lib), Int32, ( Int32, Int32,  ), val1_, val2_ );
BG_ForcePowerDrain( ps_, forcePower_, overrideAmt_ ) = ccall((:BG_ForcePowerDrain, lib), Void, ( Ptr{playerState_t}, forcePowers_t, Int32,  ), ps_, forcePower_, overrideAmt_ );
BG_EnoughForcePowerForMove( cost_ ) = ccall((:BG_EnoughForcePowerForMove, lib), qboolean, ( Int32,  ), cost_ );
PM_AttackMoveForQuad( quad_ ) = ccall((:PM_AttackMoveForQuad, lib), saberMoveName_t, ( Int32,  ), quad_ );
PM_SaberAnimTransitionAnim( curmove_, newmove_ ) = ccall((:PM_SaberAnimTransitionAnim, lib), Int32, ( Int32, Int32,  ), curmove_, newmove_ );
PM_CheckStabDown() = ccall((:PM_CheckStabDown, lib), saberMoveName_t, (),  );
PM_SaberMoveQuadrantForMovement( ucmd_ ) = ccall((:PM_SaberMoveQuadrantForMovement, lib), Int32, ( Ptr{usercmd_t},  ), ucmd_ );
PM_SaberInBounce( move_ ) = ccall((:PM_SaberInBounce, lib), qboolean, ( Int32,  ), move_ );
PM_SaberAttackChainAngle( move1_, move2_ ) = ccall((:PM_SaberAttackChainAngle, lib), Int32, ( Int32, Int32,  ), move1_, move2_ );
PM_SaberKataDone( curmove_, newmove_ ) = ccall((:PM_SaberKataDone, lib), qboolean, ( Int32, Int32,  ), curmove_, newmove_ );
PM_SetAnimFrame( gent_, frame_, torso_, legs_ ) = ccall((:PM_SetAnimFrame, lib), Void, ( Ptr{playerState_t}, Int32, qboolean, qboolean,  ), gent_, frame_, torso_, legs_ );
PM_SaberLockWinAnim( victory_, superBreak_ ) = ccall((:PM_SaberLockWinAnim, lib), Int32, ( qboolean, qboolean,  ), victory_, superBreak_ );
PM_SaberLockLoseAnim( genemy_, victory_, superBreak_ ) = ccall((:PM_SaberLockLoseAnim, lib), Int32, ( Ptr{playerState_t}, qboolean, qboolean,  ), genemy_, victory_, superBreak_ );
PM_SaberLockResultAnim( duelist_, superBreak_, won_ ) = ccall((:PM_SaberLockResultAnim, lib), Int32, ( Ptr{playerState_t}, qboolean, qboolean,  ), duelist_, superBreak_, won_ );
PM_SaberLockBreak( genemy_, victory_, strength_ ) = ccall((:PM_SaberLockBreak, lib), Void, ( Ptr{playerState_t}, qboolean, Int32,  ), genemy_, victory_, strength_ );
BG_CheckIncrementLockAnim( anim_, winOrLose_ ) = ccall((:BG_CheckIncrementLockAnim, lib), qboolean, ( Int32, Int32,  ), anim_, winOrLose_ );
PM_SaberLocked() = ccall((:PM_SaberLocked, lib), Void, (),  );
PM_SaberInBrokenParry( move_ ) = ccall((:PM_SaberInBrokenParry, lib), qboolean, ( Int32,  ), move_ );
PM_BrokenParryForParry( move_ ) = ccall((:PM_BrokenParryForParry, lib), Int32, ( Int32,  ), move_ );
PM_CanBackstab() = ccall((:PM_CanBackstab, lib), qboolean, (),  );
PM_SaberFlipOverAttackMove() = ccall((:PM_SaberFlipOverAttackMove, lib), saberMoveName_t, (),  );
PM_SaberBackflipAttackMove() = ccall((:PM_SaberBackflipAttackMove, lib), saberMoveName_t, (),  );
PM_SaberDualJumpAttackMove() = ccall((:PM_SaberDualJumpAttackMove, lib), saberMoveName_t, (),  );
PM_SomeoneInFront( tr_ ) = ccall((:PM_SomeoneInFront, lib), qboolean, ( Ptr{trace_t},  ), tr_ );
PM_SaberLungeAttackMove( noSpecials_ ) = ccall((:PM_SaberLungeAttackMove, lib), saberMoveName_t, ( qboolean,  ), noSpecials_ );
PM_SaberJumpAttackMove2() = ccall((:PM_SaberJumpAttackMove2, lib), saberMoveName_t, (),  );
PM_SaberJumpAttackMove() = ccall((:PM_SaberJumpAttackMove, lib), saberMoveName_t, (),  );
PM_GroundDistance() = ccall((:PM_GroundDistance, lib), Float32, (),  );
PM_WalkableGroundDistance() = ccall((:PM_WalkableGroundDistance, lib), Float32, (),  );
PM_CanDoDualDoubleAttacks() = ccall((:PM_CanDoDualDoubleAttacks, lib), qboolean, (),  );
PM_CheckEnemyPresence( dir_, radius_ ) = ccall((:PM_CheckEnemyPresence, lib), qboolean, ( Int32, Float32,  ), dir_, radius_ );
PM_CheckPullAttack() = ccall((:PM_CheckPullAttack, lib), saberMoveName_t, (),  );
PM_InSecondaryStyle() = ccall((:PM_InSecondaryStyle, lib), qboolean, (),  );
PM_SaberAttackForMovement( curmove_ ) = ccall((:PM_SaberAttackForMovement, lib), saberMoveName_t, ( saberMoveName_t,  ), curmove_ );
PM_KickMoveForConditions() = ccall((:PM_KickMoveForConditions, lib), Int32, (),  );
PM_SaberMoveOkayForKata() = ccall((:PM_SaberMoveOkayForKata, lib), qboolean, (),  );
PM_CanDoKata() = ccall((:PM_CanDoKata, lib), qboolean, (),  );
PM_CheckAltKickAttack() = ccall((:PM_CheckAltKickAttack, lib), qboolean, (),  );
PM_SaberPowerCheck() = ccall((:PM_SaberPowerCheck, lib), qboolean, (),  );
PM_CanDoRollStab() = ccall((:PM_CanDoRollStab, lib), qboolean, (),  );
PM_WeaponLightsaber() = ccall((:PM_WeaponLightsaber, lib), Void, (),  );
PM_SetSaberMove( newMove_ ) = ccall((:PM_SetSaberMove, lib), Void, ( short,  ), newMove_ );
BG_MySaber( clientNum_, saberNum_ ) = ccall((:BG_MySaber, lib), saberInfo_t, ( Int32, Int32,  ), clientNum_, saberNum_ );
