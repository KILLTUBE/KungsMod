G_FindTeams() = ccall((:G_FindTeams, lib), Void, (),  );
G_CacheGametype() = ccall((:G_CacheGametype, lib), Void, (),  );
G_CacheMapname( mapname_ ) = ccall((:G_CacheMapname, lib), Void, ( Ptr{cvar_t},  ), mapname_ );
G_InitGame( levelTime_, randomSeed_, restart_ ) = ccall((:G_InitGame, lib), Void, ( Int32, Int32, Int32,  ), levelTime_, randomSeed_, restart_ );
G_ShutdownGame( restart_ ) = ccall((:G_ShutdownGame, lib), Void, ( Int32,  ), restart_ );
AddTournamentPlayer() = ccall((:AddTournamentPlayer, lib), Void, (),  );
AddTournamentQueue( client_ ) = ccall((:AddTournamentQueue, lib), Void, ( Ptr{gclient_t},  ), client_ );
RemoveTournamentLoser() = ccall((:RemoveTournamentLoser, lib), Void, (),  );
G_PowerDuelCount( loners_, doubles_, countSpec_ ) = ccall((:G_PowerDuelCount, lib), Void, ( Ptr{Int32}, Ptr{Int32}, qboolean,  ), loners_, doubles_, countSpec_ );
AddPowerDuelPlayers() = ccall((:AddPowerDuelPlayers, lib), Void, (),  );
RemovePowerDuelLosers() = ccall((:RemovePowerDuelLosers, lib), Void, (),  );
RemoveDuelDrawLoser() = ccall((:RemoveDuelDrawLoser, lib), Void, (),  );
RemoveTournamentWinner() = ccall((:RemoveTournamentWinner, lib), Void, (),  );
AdjustTournamentScores() = ccall((:AdjustTournamentScores, lib), Void, (),  );
SortRanks( a_, b_ ) = ccall((:SortRanks, lib), Int32, ( Ptr{Void}, Ptr{Void},  ), a_, b_ );
G_CanResetDuelists() = ccall((:G_CanResetDuelists, lib), qboolean, (),  );
G_ResetDuelists() = ccall((:G_ResetDuelists, lib), Void, (),  );
CalculateRanks() = ccall((:CalculateRanks, lib), Void, (),  );
SendScoreboardMessageToAllClients() = ccall((:SendScoreboardMessageToAllClients, lib), Void, (),  );
MoveClientToIntermission( ent_ ) = ccall((:MoveClientToIntermission, lib), Void, ( Ptr{gentity_t},  ), ent_ );
FindIntermissionPoint() = ccall((:FindIntermissionPoint, lib), Void, (),  );
BeginIntermission() = ccall((:BeginIntermission, lib), Void, (),  );
DuelLimitHit() = ccall((:DuelLimitHit, lib), qboolean, (),  );
DuelResetWinsLosses() = ccall((:DuelResetWinsLosses, lib), Void, (),  );
ExitLevel() = ccall((:ExitLevel, lib), Void, (),  );
#G_LogPrintf( fmt_, _ ) = ccall((:G_LogPrintf, lib), Void, ( Ptr{Char}, ,  ), fmt_, _ );
#G_SecurityLogPrintf( fmt_, _ ) = ccall((:G_SecurityLogPrintf, lib), Void, ( Ptr{Char}, ,  ), fmt_, _ );
LogExit( string_ ) = ccall((:LogExit, lib), Void, ( Ptr{Char},  ), string_ );
CheckIntermissionExit() = ccall((:CheckIntermissionExit, lib), Void, (),  );
ScoreIsTied() = ccall((:ScoreIsTied, lib), qboolean, (),  );
CheckExitRules() = ccall((:CheckExitRules, lib), Void, (),  );
G_RemoveDuelist( team_ ) = ccall((:G_RemoveDuelist, lib), Void, ( Int32,  ), team_ );
CheckTournament() = ccall((:CheckTournament, lib), Void, (),  );
G_KickAllBots() = ccall((:G_KickAllBots, lib), Void, (),  );
CheckVote() = ccall((:CheckVote, lib), Void, (),  );
PrintTeam( team_, message_ ) = ccall((:PrintTeam, lib), Void, ( Int32, Ptr{Char},  ), team_, message_ );
SetLeader( team_, client_ ) = ccall((:SetLeader, lib), Void, ( Int32, Int32,  ), team_, client_ );
CheckTeamLeader( team_ ) = ccall((:CheckTeamLeader, lib), Void, ( Int32,  ), team_ );
CheckTeamVote( team_ ) = ccall((:CheckTeamVote, lib), Void, ( Int32,  ), team_ );
CheckCvars() = ccall((:CheckCvars, lib), Void, (),  );
G_RunThink( ent_ ) = ccall((:G_RunThink, lib), Void, ( Ptr{gentity_t},  ), ent_ );
NAV_CheckCalcPaths() = ccall((:NAV_CheckCalcPaths, lib), Void, (),  );
G_RunFrame( levelTime_ ) = ccall((:G_RunFrame, lib), Void, ( Int32,  ), levelTime_ );
G_GetStringEdString( refSection_, refName_ ) = ccall((:G_GetStringEdString, lib), Ptr{Char}, ( Ptr{Char}, Ptr{Char},  ), refSection_, refName_ );
G_SpawnRMGEntity() = ccall((:G_SpawnRMGEntity, lib), Void, (),  );
_G_ROFF_NotetrackCallback( entID_, notetrack_ ) = ccall((:_G_ROFF_NotetrackCallback, lib), Void, ( Int32, Ptr{Char},  ), entID_, notetrack_ );
G_ICARUS_PlaySound() = ccall((:G_ICARUS_PlaySound, lib), Int32, (),  );
G_ICARUS_Set() = ccall((:G_ICARUS_Set, lib), qboolean, (),  );
G_ICARUS_Lerp2Pos() = ccall((:G_ICARUS_Lerp2Pos, lib), Void, (),  );
G_ICARUS_Lerp2Origin() = ccall((:G_ICARUS_Lerp2Origin, lib), Void, (),  );
G_ICARUS_Lerp2Angles() = ccall((:G_ICARUS_Lerp2Angles, lib), Void, (),  );
G_ICARUS_GetTag() = ccall((:G_ICARUS_GetTag, lib), Int32, (),  );
G_ICARUS_Lerp2Start() = ccall((:G_ICARUS_Lerp2Start, lib), Void, (),  );
G_ICARUS_Lerp2End() = ccall((:G_ICARUS_Lerp2End, lib), Void, (),  );
G_ICARUS_Use() = ccall((:G_ICARUS_Use, lib), Void, (),  );
G_ICARUS_Kill() = ccall((:G_ICARUS_Kill, lib), Void, (),  );
G_ICARUS_Remove() = ccall((:G_ICARUS_Remove, lib), Void, (),  );
G_ICARUS_Play() = ccall((:G_ICARUS_Play, lib), Void, (),  );
G_ICARUS_GetFloat() = ccall((:G_ICARUS_GetFloat, lib), Int32, (),  );
G_ICARUS_GetVector() = ccall((:G_ICARUS_GetVector, lib), Int32, (),  );
G_ICARUS_GetString() = ccall((:G_ICARUS_GetString, lib), Int32, (),  );
G_ICARUS_SoundIndex() = ccall((:G_ICARUS_SoundIndex, lib), Void, (),  );
G_ICARUS_GetSetIDForString() = ccall((:G_ICARUS_GetSetIDForString, lib), Int32, (),  );
G_NAV_ClearPathToPoint( entID_, pmins_, pmaxs_, point_, clipmask_, okToHitEnt_ ) = ccall((:G_NAV_ClearPathToPoint, lib), qboolean, ( Int32, vec3_t, vec3_t, vec3_t, Int32, Int32,  ), entID_, pmins_, pmaxs_, point_, clipmask_, okToHitEnt_ );
G_NPC_ClearLOS2( entID_, end_ ) = ccall((:G_NPC_ClearLOS2, lib), qboolean, ( Int32, vec3_t,  ), entID_, end_ );
G_NAV_CheckNodeFailedForEnt( entID_, nodeNum_ ) = ccall((:G_NAV_CheckNodeFailedForEnt, lib), qboolean, ( Int32, Int32,  ), entID_, nodeNum_ );
