BG_SoundIndex( sound_ ) = ccall((:BG_SoundIndex, lib), Int32, ( Ptr{Char},  ), sound_ );
BG_ParseLiteral( data_, string_ ) = ccall((:BG_ParseLiteral, lib), qboolean, ( Ptr{Ptr{Char}}, Ptr{Char},  ), data_, string_ );
BG_ParseLiteralSilent( data_, string_ ) = ccall((:BG_ParseLiteralSilent, lib), qboolean, ( Ptr{Ptr{Char}}, Ptr{Char},  ), data_, string_ );
TranslateSaberColor( name_ ) = ccall((:TranslateSaberColor, lib), saber_colors_t, ( Ptr{Char},  ), name_ );
SaberColorToString( color_ ) = ccall((:SaberColorToString, lib), Char, ( saber_colors_t,  ), color_ );
TranslateSaberStyle( name_ ) = ccall((:TranslateSaberStyle, lib), saber_styles_t, ( Ptr{Char},  ), name_ );
TranslateSaberType( name_ ) = ccall((:TranslateSaberType, lib), saberType_t, ( Ptr{Char},  ), name_ );
WP_SaberBladeUseSecondBladeStyle( saber_, bladeNum_ ) = ccall((:WP_SaberBladeUseSecondBladeStyle, lib), qboolean, ( Ptr{saberInfo_t}, Int32,  ), saber_, bladeNum_ );
WP_SaberBladeDoTransitionDamage( saber_, bladeNum_ ) = ccall((:WP_SaberBladeDoTransitionDamage, lib), qboolean, ( Ptr{saberInfo_t}, Int32,  ), saber_, bladeNum_ );
WP_UseFirstValidSaberStyle( saber1_, saber2_, saberHolstered_, saberAnimLevel_ ) = ccall((:WP_UseFirstValidSaberStyle, lib), qboolean, ( Ptr{saberInfo_t}, Ptr{saberInfo_t}, Int32, Ptr{Int32},  ), saber1_, saber2_, saberHolstered_, saberAnimLevel_ );
WP_SaberStyleValidForSaber( saber1_, saber2_, saberHolstered_, saberAnimLevel_ ) = ccall((:WP_SaberStyleValidForSaber, lib), qboolean, ( Ptr{saberInfo_t}, Ptr{saberInfo_t}, Int32, Int32,  ), saber1_, saber2_, saberHolstered_, saberAnimLevel_ );
WP_SaberCanTurnOffSomeBlades( saber_ ) = ccall((:WP_SaberCanTurnOffSomeBlades, lib), qboolean, ( Ptr{saberInfo_t},  ), saber_ );
WP_SaberSetDefaults( saber_ ) = ccall((:WP_SaberSetDefaults, lib), Void, ( Ptr{saberInfo_t},  ), saber_ );
Saber_ParseName( saber_, p_ ) = ccall((:Saber_ParseName, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberType( saber_, p_ ) = ccall((:Saber_ParseSaberType, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberModel( saber_, p_ ) = ccall((:Saber_ParseSaberModel, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseCustomSkin( saber_, p_ ) = ccall((:Saber_ParseCustomSkin, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSoundOn( saber_, p_ ) = ccall((:Saber_ParseSoundOn, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSoundLoop( saber_, p_ ) = ccall((:Saber_ParseSoundLoop, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSoundOff( saber_, p_ ) = ccall((:Saber_ParseSoundOff, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNumBlades( saber_, p_ ) = ccall((:Saber_ParseNumBlades, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberColor( saber_, p_ ) = ccall((:Saber_ParseSaberColor, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberColor2( saber_, p_ ) = ccall((:Saber_ParseSaberColor2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberColor3( saber_, p_ ) = ccall((:Saber_ParseSaberColor3, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberColor4( saber_, p_ ) = ccall((:Saber_ParseSaberColor4, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberColor5( saber_, p_ ) = ccall((:Saber_ParseSaberColor5, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberColor6( saber_, p_ ) = ccall((:Saber_ParseSaberColor6, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberColor7( saber_, p_ ) = ccall((:Saber_ParseSaberColor7, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberLength( saber_, p_ ) = ccall((:Saber_ParseSaberLength, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberLength2( saber_, p_ ) = ccall((:Saber_ParseSaberLength2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberLength3( saber_, p_ ) = ccall((:Saber_ParseSaberLength3, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberLength4( saber_, p_ ) = ccall((:Saber_ParseSaberLength4, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberLength5( saber_, p_ ) = ccall((:Saber_ParseSaberLength5, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberLength6( saber_, p_ ) = ccall((:Saber_ParseSaberLength6, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberLength7( saber_, p_ ) = ccall((:Saber_ParseSaberLength7, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberRadius( saber_, p_ ) = ccall((:Saber_ParseSaberRadius, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberRadius2( saber_, p_ ) = ccall((:Saber_ParseSaberRadius2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberRadius3( saber_, p_ ) = ccall((:Saber_ParseSaberRadius3, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberRadius4( saber_, p_ ) = ccall((:Saber_ParseSaberRadius4, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberRadius5( saber_, p_ ) = ccall((:Saber_ParseSaberRadius5, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberRadius6( saber_, p_ ) = ccall((:Saber_ParseSaberRadius6, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberRadius7( saber_, p_ ) = ccall((:Saber_ParseSaberRadius7, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberStyle( saber_, p_ ) = ccall((:Saber_ParseSaberStyle, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberStyleLearned( saber_, p_ ) = ccall((:Saber_ParseSaberStyleLearned, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSaberStyleForbidden( saber_, p_ ) = ccall((:Saber_ParseSaberStyleForbidden, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseMaxChain( saber_, p_ ) = ccall((:Saber_ParseMaxChain, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseLockable( saber_, p_ ) = ccall((:Saber_ParseLockable, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseThrowable( saber_, p_ ) = ccall((:Saber_ParseThrowable, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseDisarmable( saber_, p_ ) = ccall((:Saber_ParseDisarmable, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBlocking( saber_, p_ ) = ccall((:Saber_ParseBlocking, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseTwoHanded( saber_, p_ ) = ccall((:Saber_ParseTwoHanded, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseForceRestrict( saber_, p_ ) = ccall((:Saber_ParseForceRestrict, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseLockBonus( saber_, p_ ) = ccall((:Saber_ParseLockBonus, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseParryBonus( saber_, p_ ) = ccall((:Saber_ParseParryBonus, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBreakParryBonus( saber_, p_ ) = ccall((:Saber_ParseBreakParryBonus, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBreakParryBonus2( saber_, p_ ) = ccall((:Saber_ParseBreakParryBonus2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseDisarmBonus( saber_, p_ ) = ccall((:Saber_ParseDisarmBonus, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseDisarmBonus2( saber_, p_ ) = ccall((:Saber_ParseDisarmBonus2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSingleBladeStyle( saber_, p_ ) = ccall((:Saber_ParseSingleBladeStyle, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSingleBladeThrowable( saber_, p_ ) = ccall((:Saber_ParseSingleBladeThrowable, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBrokenSaber1( saber_, p_ ) = ccall((:Saber_ParseBrokenSaber1, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBrokenSaber2( saber_, p_ ) = ccall((:Saber_ParseBrokenSaber2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseReturnDamage( saber_, p_ ) = ccall((:Saber_ParseReturnDamage, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSpinSound( saber_, p_ ) = ccall((:Saber_ParseSpinSound, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSwingSound1( saber_, p_ ) = ccall((:Saber_ParseSwingSound1, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSwingSound2( saber_, p_ ) = ccall((:Saber_ParseSwingSound2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSwingSound3( saber_, p_ ) = ccall((:Saber_ParseSwingSound3, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseMoveSpeedScale( saber_, p_ ) = ccall((:Saber_ParseMoveSpeedScale, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseAnimSpeedScale( saber_, p_ ) = ccall((:Saber_ParseAnimSpeedScale, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBounceOnWalls( saber_, p_ ) = ccall((:Saber_ParseBounceOnWalls, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBoltToWrist( saber_, p_ ) = ccall((:Saber_ParseBoltToWrist, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseKataMove( saber_, p_ ) = ccall((:Saber_ParseKataMove, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseLungeAtkMove( saber_, p_ ) = ccall((:Saber_ParseLungeAtkMove, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseJumpAtkUpMove( saber_, p_ ) = ccall((:Saber_ParseJumpAtkUpMove, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseJumpAtkFwdMove( saber_, p_ ) = ccall((:Saber_ParseJumpAtkFwdMove, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseJumpAtkBackMove( saber_, p_ ) = ccall((:Saber_ParseJumpAtkBackMove, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseJumpAtkRightMove( saber_, p_ ) = ccall((:Saber_ParseJumpAtkRightMove, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseJumpAtkLeftMove( saber_, p_ ) = ccall((:Saber_ParseJumpAtkLeftMove, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseReadyAnim( saber_, p_ ) = ccall((:Saber_ParseReadyAnim, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseDrawAnim( saber_, p_ ) = ccall((:Saber_ParseDrawAnim, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParsePutawayAnim( saber_, p_ ) = ccall((:Saber_ParsePutawayAnim, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseTauntAnim( saber_, p_ ) = ccall((:Saber_ParseTauntAnim, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBowAnim( saber_, p_ ) = ccall((:Saber_ParseBowAnim, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseMeditateAnim( saber_, p_ ) = ccall((:Saber_ParseMeditateAnim, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseFlourishAnim( saber_, p_ ) = ccall((:Saber_ParseFlourishAnim, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseGloatAnim( saber_, p_ ) = ccall((:Saber_ParseGloatAnim, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoRollStab( saber_, p_ ) = ccall((:Saber_ParseNoRollStab, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoPullAttack( saber_, p_ ) = ccall((:Saber_ParseNoPullAttack, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoBackAttack( saber_, p_ ) = ccall((:Saber_ParseNoBackAttack, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoStabDown( saber_, p_ ) = ccall((:Saber_ParseNoStabDown, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoWallRuns( saber_, p_ ) = ccall((:Saber_ParseNoWallRuns, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoWallFlips( saber_, p_ ) = ccall((:Saber_ParseNoWallFlips, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoWallGrab( saber_, p_ ) = ccall((:Saber_ParseNoWallGrab, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoRolls( saber_, p_ ) = ccall((:Saber_ParseNoRolls, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoFlips( saber_, p_ ) = ccall((:Saber_ParseNoFlips, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoCartwheels( saber_, p_ ) = ccall((:Saber_ParseNoCartwheels, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoKicks( saber_, p_ ) = ccall((:Saber_ParseNoKicks, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoMirrorAttacks( saber_, p_ ) = ccall((:Saber_ParseNoMirrorAttacks, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseOnInWater( saber_, p_ ) = ccall((:Saber_ParseOnInWater, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNotInMP( saber_, p_ ) = ccall((:Saber_ParseNotInMP, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBladeStyle2Start( saber_, p_ ) = ccall((:Saber_ParseBladeStyle2Start, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoWallMarks( saber_, p_ ) = ccall((:Saber_ParseNoWallMarks, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoDLight( saber_, p_ ) = ccall((:Saber_ParseNoDLight, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoBlade( saber_, p_ ) = ccall((:Saber_ParseNoBlade, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseTrailStyle( saber_, p_ ) = ccall((:Saber_ParseTrailStyle, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseG2MarksShader( saber_, p_ ) = ccall((:Saber_ParseG2MarksShader, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseG2WeaponMarkShader( saber_, p_ ) = ccall((:Saber_ParseG2WeaponMarkShader, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseKnockbackScale( saber_, p_ ) = ccall((:Saber_ParseKnockbackScale, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseDamageScale( saber_, p_ ) = ccall((:Saber_ParseDamageScale, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoDismemberment( saber_, p_ ) = ccall((:Saber_ParseNoDismemberment, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoIdleEffect( saber_, p_ ) = ccall((:Saber_ParseNoIdleEffect, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseAlwaysBlock( saber_, p_ ) = ccall((:Saber_ParseAlwaysBlock, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoManualDeactivate( saber_, p_ ) = ccall((:Saber_ParseNoManualDeactivate, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseTransitionDamage( saber_, p_ ) = ccall((:Saber_ParseTransitionDamage, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSplashRadius( saber_, p_ ) = ccall((:Saber_ParseSplashRadius, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSplashDamage( saber_, p_ ) = ccall((:Saber_ParseSplashDamage, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSplashKnockback( saber_, p_ ) = ccall((:Saber_ParseSplashKnockback, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseHitSound1( saber_, p_ ) = ccall((:Saber_ParseHitSound1, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseHitSound2( saber_, p_ ) = ccall((:Saber_ParseHitSound2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseHitSound3( saber_, p_ ) = ccall((:Saber_ParseHitSound3, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBlockSound1( saber_, p_ ) = ccall((:Saber_ParseBlockSound1, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBlockSound2( saber_, p_ ) = ccall((:Saber_ParseBlockSound2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBlockSound3( saber_, p_ ) = ccall((:Saber_ParseBlockSound3, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBounceSound1( saber_, p_ ) = ccall((:Saber_ParseBounceSound1, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBounceSound2( saber_, p_ ) = ccall((:Saber_ParseBounceSound2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBounceSound3( saber_, p_ ) = ccall((:Saber_ParseBounceSound3, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBlockEffect( saber_, p_ ) = ccall((:Saber_ParseBlockEffect, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseHitPersonEffect( saber_, p_ ) = ccall((:Saber_ParseHitPersonEffect, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseHitOtherEffect( saber_, p_ ) = ccall((:Saber_ParseHitOtherEffect, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBladeEffect( saber_, p_ ) = ccall((:Saber_ParseBladeEffect, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoClashFlare( saber_, p_ ) = ccall((:Saber_ParseNoClashFlare, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoWallMarks2( saber_, p_ ) = ccall((:Saber_ParseNoWallMarks2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoDLight2( saber_, p_ ) = ccall((:Saber_ParseNoDLight2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoBlade2( saber_, p_ ) = ccall((:Saber_ParseNoBlade2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseTrailStyle2( saber_, p_ ) = ccall((:Saber_ParseTrailStyle2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseG2MarksShader2( saber_, p_ ) = ccall((:Saber_ParseG2MarksShader2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseG2WeaponMarkShader2( saber_, p_ ) = ccall((:Saber_ParseG2WeaponMarkShader2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseKnockbackScale2( saber_, p_ ) = ccall((:Saber_ParseKnockbackScale2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseDamageScale2( saber_, p_ ) = ccall((:Saber_ParseDamageScale2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoDismemberment2( saber_, p_ ) = ccall((:Saber_ParseNoDismemberment2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoIdleEffect2( saber_, p_ ) = ccall((:Saber_ParseNoIdleEffect2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseAlwaysBlock2( saber_, p_ ) = ccall((:Saber_ParseAlwaysBlock2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoManualDeactivate2( saber_, p_ ) = ccall((:Saber_ParseNoManualDeactivate2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseTransitionDamage2( saber_, p_ ) = ccall((:Saber_ParseTransitionDamage2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSplashRadius2( saber_, p_ ) = ccall((:Saber_ParseSplashRadius2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSplashDamage2( saber_, p_ ) = ccall((:Saber_ParseSplashDamage2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseSplashKnockback2( saber_, p_ ) = ccall((:Saber_ParseSplashKnockback2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseHit2Sound1( saber_, p_ ) = ccall((:Saber_ParseHit2Sound1, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseHit2Sound2( saber_, p_ ) = ccall((:Saber_ParseHit2Sound2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseHit2Sound3( saber_, p_ ) = ccall((:Saber_ParseHit2Sound3, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBlock2Sound1( saber_, p_ ) = ccall((:Saber_ParseBlock2Sound1, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBlock2Sound2( saber_, p_ ) = ccall((:Saber_ParseBlock2Sound2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBlock2Sound3( saber_, p_ ) = ccall((:Saber_ParseBlock2Sound3, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBounce2Sound1( saber_, p_ ) = ccall((:Saber_ParseBounce2Sound1, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBounce2Sound2( saber_, p_ ) = ccall((:Saber_ParseBounce2Sound2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBounce2Sound3( saber_, p_ ) = ccall((:Saber_ParseBounce2Sound3, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBlockEffect2( saber_, p_ ) = ccall((:Saber_ParseBlockEffect2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseHitPersonEffect2( saber_, p_ ) = ccall((:Saber_ParseHitPersonEffect2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseHitOtherEffect2( saber_, p_ ) = ccall((:Saber_ParseHitOtherEffect2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseBladeEffect2( saber_, p_ ) = ccall((:Saber_ParseBladeEffect2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
Saber_ParseNoClashFlare2( saber_, p_ ) = ccall((:Saber_ParseNoClashFlare2, lib), Void, ( Ptr{saberInfo_t}, Ptr{Ptr{Char}},  ), saber_, p_ );
KeywordHash_Key( keyword_ ) = ccall((:KeywordHash_Key, lib), Int32, ( Ptr{Char},  ), keyword_ );
KeywordHash_Add( table_, key_ ) = ccall((:KeywordHash_Add, lib), Void, ( Ptr{keywordHash_t}, Ptr{keywordHash_t},  ), table_, key_ );
KeywordHash_Find( table_, keyword_ ) = ccall((:KeywordHash_Find, lib), keywordHash_t, ( Ptr{keywordHash_t}, Ptr{Char},  ), table_, keyword_ );
WP_SaberSetupKeywordHash() = ccall((:WP_SaberSetupKeywordHash, lib), Void, (),  );
WP_SaberParseParms( saberName_, saber_ ) = ccall((:WP_SaberParseParms, lib), qboolean, ( Ptr{Char}, Ptr{saberInfo_t},  ), saberName_, saber_ );
WP_SaberParseParm( saberName_, parmname_, saberData_ ) = ccall((:WP_SaberParseParm, lib), qboolean, ( Ptr{Char}, Ptr{Char}, Ptr{Char},  ), saberName_, parmname_, saberData_ );
WP_SaberValidForPlayerInMP( saberName_ ) = ccall((:WP_SaberValidForPlayerInMP, lib), qboolean, ( Ptr{Char},  ), saberName_ );
WP_RemoveSaber( sabers_, saberNum_ ) = ccall((:WP_RemoveSaber, lib), Void, ( Ptr{saberInfo_t}, Int32,  ), sabers_, saberNum_ );
WP_SetSaber( entNum_, sabers_, saberNum_, saberName_ ) = ccall((:WP_SetSaber, lib), Void, ( Int32, Ptr{saberInfo_t}, Int32, Ptr{Char},  ), entNum_, sabers_, saberNum_, saberName_ );
WP_SaberSetColor( sabers_, saberNum_, bladeNum_, colorName_ ) = ccall((:WP_SaberSetColor, lib), Void, ( Ptr{saberInfo_t}, Int32, Int32, Ptr{Char},  ), sabers_, saberNum_, bladeNum_, colorName_ );
WP_SaberLoadParms() = ccall((:WP_SaberLoadParms, lib), Void, (),  );
WP_IsSaberTwoHanded( saberName_ ) = ccall((:WP_IsSaberTwoHanded, lib), qboolean, ( Ptr{Char},  ), saberName_ );
WP_SaberGetHiltInfo( singleHilts_, staffHilts_ ) = ccall((:WP_SaberGetHiltInfo, lib), Void, ( Ptr{Char}, Ptr{Char},  ), singleHilts_, staffHilts_ );
BG_BLADE_ActivateTrail( blade_, duration_ ) = ccall((:BG_BLADE_ActivateTrail, lib), Void, ( Ptr{bladeInfo_t}, Float32,  ), blade_, duration_ );
BG_BLADE_DeactivateTrail( blade_, duration_ ) = ccall((:BG_BLADE_DeactivateTrail, lib), Void, ( Ptr{bladeInfo_t}, Float32,  ), blade_, duration_ );
BG_SI_Activate( saber_ ) = ccall((:BG_SI_Activate, lib), Void, ( Ptr{saberInfo_t},  ), saber_ );
BG_SI_Deactivate( saber_ ) = ccall((:BG_SI_Deactivate, lib), Void, ( Ptr{saberInfo_t},  ), saber_ );
BG_SI_BladeActivate( saber_, iBlade_, bActive_ ) = ccall((:BG_SI_BladeActivate, lib), Void, ( Ptr{saberInfo_t}, Int32, qboolean,  ), saber_, iBlade_, bActive_ );
BG_SI_Active( saber_ ) = ccall((:BG_SI_Active, lib), qboolean, ( Ptr{saberInfo_t},  ), saber_ );
BG_SI_SetLength( saber_, length_ ) = ccall((:BG_SI_SetLength, lib), Void, ( Ptr{saberInfo_t}, Float32,  ), saber_, length_ );
BG_SI_SetDesiredLength( saber_, len_, bladeNum_ ) = ccall((:BG_SI_SetDesiredLength, lib), Void, ( Ptr{saberInfo_t}, Float32, Int32,  ), saber_, len_, bladeNum_ );
BG_SI_SetLengthGradual( saber_, time_ ) = ccall((:BG_SI_SetLengthGradual, lib), Void, ( Ptr{saberInfo_t}, Int32,  ), saber_, time_ );
BG_SI_Length( saber_ ) = ccall((:BG_SI_Length, lib), Float32, ( Ptr{saberInfo_t},  ), saber_ );
BG_SI_LengthMax( saber_ ) = ccall((:BG_SI_LengthMax, lib), Float32, ( Ptr{saberInfo_t},  ), saber_ );
BG_SI_ActivateTrail( saber_, duration_ ) = ccall((:BG_SI_ActivateTrail, lib), Void, ( Ptr{saberInfo_t}, Float32,  ), saber_, duration_ );
BG_SI_DeactivateTrail( saber_, duration_ ) = ccall((:BG_SI_DeactivateTrail, lib), Void, ( Ptr{saberInfo_t}, Float32,  ), saber_, duration_ );
