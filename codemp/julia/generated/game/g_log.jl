G_LogWeaponInit() = ccall((:G_LogWeaponInit, lib), Void, (),  );
G_LogWeaponPickup( client_, weaponid_ ) = ccall((:G_LogWeaponPickup, lib), Void, ( Int32, Int32,  ), client_, weaponid_ );
G_LogWeaponFire( client_, weaponid_ ) = ccall((:G_LogWeaponFire, lib), Void, ( Int32, Int32,  ), client_, weaponid_ );
G_LogWeaponDamage( client_, mod_, amount_ ) = ccall((:G_LogWeaponDamage, lib), Void, ( Int32, Int32, Int32,  ), client_, mod_, amount_ );
G_LogWeaponKill( client_, mod_ ) = ccall((:G_LogWeaponKill, lib), Void, ( Int32, Int32,  ), client_, mod_ );
G_LogWeaponFrag( attacker_, deadguy_ ) = ccall((:G_LogWeaponFrag, lib), Void, ( Int32, Int32,  ), attacker_, deadguy_ );
G_LogWeaponDeath( client_, weaponid_ ) = ccall((:G_LogWeaponDeath, lib), Void, ( Int32, Int32,  ), client_, weaponid_ );
G_LogWeaponPowerup( client_, powerupid_ ) = ccall((:G_LogWeaponPowerup, lib), Void, ( Int32, Int32,  ), client_, powerupid_ );
G_LogWeaponItem( client_, itemid_ ) = ccall((:G_LogWeaponItem, lib), Void, ( Int32, Int32,  ), client_, itemid_ );
G_LogWeaponOutput() = ccall((:G_LogWeaponOutput, lib), Void, (),  );
CalculateEfficiency( ent_, efficiency_ ) = ccall((:CalculateEfficiency, lib), qboolean, ( Ptr{gentity_t}, Ptr{Int32},  ), ent_, efficiency_ );
CalculateSharpshooter( ent_, frags_ ) = ccall((:CalculateSharpshooter, lib), qboolean, ( Ptr{gentity_t}, Ptr{Int32},  ), ent_, frags_ );
CalculateUntouchable( ent_ ) = ccall((:CalculateUntouchable, lib), qboolean, ( Ptr{gentity_t},  ), ent_ );
CalculateLogistics( ent_, stuffUsed_ ) = ccall((:CalculateLogistics, lib), qboolean, ( Ptr{gentity_t}, Ptr{Int32},  ), ent_, stuffUsed_ );
CalculateTactician( ent_, kills_ ) = ccall((:CalculateTactician, lib), qboolean, ( Ptr{gentity_t}, Ptr{Int32},  ), ent_, kills_ );
CalculateDemolitionist( ent_, kills_ ) = ccall((:CalculateDemolitionist, lib), qboolean, ( Ptr{gentity_t}, Ptr{Int32},  ), ent_, kills_ );
CalculateStreak( ent_ ) = ccall((:CalculateStreak, lib), Int32, ( Ptr{gentity_t},  ), ent_ );
CalculateTeamMVP( ent_ ) = ccall((:CalculateTeamMVP, lib), qboolean, ( Ptr{gentity_t},  ), ent_ );
CalculateTeamDefender( ent_ ) = ccall((:CalculateTeamDefender, lib), qboolean, ( Ptr{gentity_t},  ), ent_ );
CalculateTeamWarrior( ent_ ) = ccall((:CalculateTeamWarrior, lib), qboolean, ( Ptr{gentity_t},  ), ent_ );
CalculateTeamCarrier( ent_ ) = ccall((:CalculateTeamCarrier, lib), qboolean, ( Ptr{gentity_t},  ), ent_ );
CalculateTeamInterceptor( ent_ ) = ccall((:CalculateTeamInterceptor, lib), qboolean, ( Ptr{gentity_t},  ), ent_ );
CalculateTeamRedShirt( ent_ ) = ccall((:CalculateTeamRedShirt, lib), qboolean, ( Ptr{gentity_t},  ), ent_ );
CalculateTeamAward( ent_ ) = ccall((:CalculateTeamAward, lib), Int32, ( Ptr{gentity_t},  ), ent_ );
CalculateSection31Award( ent_ ) = ccall((:CalculateSection31Award, lib), qboolean, ( Ptr{gentity_t},  ), ent_ );
CalculateAwards( ent_, msg_ ) = ccall((:CalculateAwards, lib), Void, ( Ptr{gentity_t}, Ptr{Char},  ), ent_, msg_ );
GetMaxDeathsForClient( nClient_ ) = ccall((:GetMaxDeathsForClient, lib), Int32, ( Int32,  ), nClient_ );
GetMaxKillsForClient( nClient_ ) = ccall((:GetMaxKillsForClient, lib), Int32, ( Int32,  ), nClient_ );
GetFavoriteTargetForClient( nClient_ ) = ccall((:GetFavoriteTargetForClient, lib), Int32, ( Int32,  ), nClient_ );
GetWorstEnemyForClient( nClient_ ) = ccall((:GetWorstEnemyForClient, lib), Int32, ( Int32,  ), nClient_ );
GetFavoriteWeaponForClient( nClient_ ) = ccall((:GetFavoriteWeaponForClient, lib), Int32, ( Int32,  ), nClient_ );
G_ClearClientLog( client_ ) = ccall((:G_ClearClientLog, lib), Void, ( Int32,  ), client_ );
