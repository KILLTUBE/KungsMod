touch_NULL( ent_, other_, trace_ ) = ccall((:touch_NULL, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{trace_t},  ), ent_, other_, trace_ );
WP_SpeedOfMissileForWeapon( wp_, alt_fire_ ) = ccall((:WP_SpeedOfMissileForWeapon, lib), Float32, ( Int32, qboolean,  ), wp_, alt_fire_ );
W_TraceSetStart( ent_, start_, mins_, maxs_ ) = ccall((:W_TraceSetStart, lib), Void, ( Ptr{gentity_t}, vec3_t, vec3_t, vec3_t,  ), ent_, start_, mins_, maxs_ );
WP_FireBryarPistol( ent_, altFire_ ) = ccall((:WP_FireBryarPistol, lib), Void, ( Ptr{gentity_t}, qboolean,  ), ent_, altFire_ );
WP_FireTurretMissile( ent_, start_, dir_, altFire_, damage_, velocity_, mod_, ignore_ ) = ccall((:WP_FireTurretMissile, lib), Void, ( Ptr{gentity_t}, vec3_t, vec3_t, qboolean, Int32, Int32, Int32, Ptr{gentity_t},  ), ent_, start_, dir_, altFire_, damage_, velocity_, mod_, ignore_ );
WP_Explode( self_ ) = ccall((:WP_Explode, lib), Void, ( Ptr{gentity_t},  ), self_ );
WP_FireGenericBlasterMissile( ent_, start_, dir_, altFire_, damage_, velocity_, mod_ ) = ccall((:WP_FireGenericBlasterMissile, lib), Void, ( Ptr{gentity_t}, vec3_t, vec3_t, qboolean, Int32, Int32, Int32,  ), ent_, start_, dir_, altFire_, damage_, velocity_, mod_ );
WP_FireBlasterMissile( ent_, start_, dir_, altFire_ ) = ccall((:WP_FireBlasterMissile, lib), Void, ( Ptr{gentity_t}, vec3_t, vec3_t, qboolean,  ), ent_, start_, dir_, altFire_ );
WP_FireTurboLaserMissile( ent_, start_, dir_ ) = ccall((:WP_FireTurboLaserMissile, lib), Void, ( Ptr{gentity_t}, vec3_t, vec3_t,  ), ent_, start_, dir_ );
WP_FireEmplacedMissile( ent_, start_, dir_, altFire_, ignore_ ) = ccall((:WP_FireEmplacedMissile, lib), Void, ( Ptr{gentity_t}, vec3_t, vec3_t, qboolean, Ptr{gentity_t},  ), ent_, start_, dir_, altFire_, ignore_ );
WP_FireBlaster( ent_, altFire_ ) = ccall((:WP_FireBlaster, lib), Void, ( Ptr{gentity_t}, qboolean,  ), ent_, altFire_ );
WP_DisruptorMainFire( ent_ ) = ccall((:WP_DisruptorMainFire, lib), Void, ( Ptr{gentity_t},  ), ent_ );
G_CanDisruptify( ent_ ) = ccall((:G_CanDisruptify, lib), qboolean, ( Ptr{gentity_t},  ), ent_ );
WP_DisruptorAltFire( ent_ ) = ccall((:WP_DisruptorAltFire, lib), Void, ( Ptr{gentity_t},  ), ent_ );
WP_FireDisruptor( ent_, altFire_ ) = ccall((:WP_FireDisruptor, lib), Void, ( Ptr{gentity_t}, qboolean,  ), ent_, altFire_ );
WP_BowcasterAltFire( ent_ ) = ccall((:WP_BowcasterAltFire, lib), Void, ( Ptr{gentity_t},  ), ent_ );
WP_BowcasterMainFire( ent_ ) = ccall((:WP_BowcasterMainFire, lib), Void, ( Ptr{gentity_t},  ), ent_ );
WP_FireBowcaster( ent_, altFire_ ) = ccall((:WP_FireBowcaster, lib), Void, ( Ptr{gentity_t}, qboolean,  ), ent_, altFire_ );
WP_RepeaterMainFire( ent_, dir_ ) = ccall((:WP_RepeaterMainFire, lib), Void, ( Ptr{gentity_t}, vec3_t,  ), ent_, dir_ );
WP_RepeaterAltFire( ent_ ) = ccall((:WP_RepeaterAltFire, lib), Void, ( Ptr{gentity_t},  ), ent_ );
WP_FireRepeater( ent_, altFire_ ) = ccall((:WP_FireRepeater, lib), Void, ( Ptr{gentity_t}, qboolean,  ), ent_, altFire_ );
WP_DEMP2_MainFire( ent_ ) = ccall((:WP_DEMP2_MainFire, lib), Void, ( Ptr{gentity_t},  ), ent_ );
DEMP2_AltRadiusDamage( ent_ ) = ccall((:DEMP2_AltRadiusDamage, lib), Void, ( Ptr{gentity_t},  ), ent_ );
DEMP2_AltDetonate( ent_ ) = ccall((:DEMP2_AltDetonate, lib), Void, ( Ptr{gentity_t},  ), ent_ );
WP_DEMP2_AltFire( ent_ ) = ccall((:WP_DEMP2_AltFire, lib), Void, ( Ptr{gentity_t},  ), ent_ );
WP_FireDEMP2( ent_, altFire_ ) = ccall((:WP_FireDEMP2, lib), Void, ( Ptr{gentity_t}, qboolean,  ), ent_, altFire_ );
WP_FlechetteMainFire( ent_ ) = ccall((:WP_FlechetteMainFire, lib), Void, ( Ptr{gentity_t},  ), ent_ );
prox_mine_think( ent_ ) = ccall((:prox_mine_think, lib), Void, ( Ptr{gentity_t},  ), ent_ );
WP_TraceSetStart( ent_, start_, mins_, maxs_ ) = ccall((:WP_TraceSetStart, lib), Void, ( Ptr{gentity_t}, vec3_t, vec3_t, vec3_t,  ), ent_, start_, mins_, maxs_ );
WP_ExplosiveDie( self_, inflictor_, attacker_, damage_, mod_ ) = ccall((:WP_ExplosiveDie, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t}, Int32, Int32,  ), self_, inflictor_, attacker_, damage_, mod_ );
WP_flechette_alt_blow( ent_ ) = ccall((:WP_flechette_alt_blow, lib), Void, ( Ptr{gentity_t},  ), ent_ );
WP_CreateFlechetteBouncyThing( start_, fwd_, self_ ) = ccall((:WP_CreateFlechetteBouncyThing, lib), Void, ( vec3_t, vec3_t, Ptr{gentity_t},  ), start_, fwd_, self_ );
WP_FlechetteAltFire( self_ ) = ccall((:WP_FlechetteAltFire, lib), Void, ( Ptr{gentity_t},  ), self_ );
WP_FireFlechette( ent_, altFire_ ) = ccall((:WP_FireFlechette, lib), Void, ( Ptr{gentity_t}, qboolean,  ), ent_, altFire_ );
rocketThink( ent_ ) = ccall((:rocketThink, lib), Void, ( Ptr{gentity_t},  ), ent_ );
RocketDie( self_, inflictor_, attacker_, damage_, mod_ ) = ccall((:RocketDie, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t}, Int32, Int32,  ), self_, inflictor_, attacker_, damage_, mod_ );
WP_FireRocket( ent_, altFire_ ) = ccall((:WP_FireRocket, lib), Void, ( Ptr{gentity_t}, qboolean,  ), ent_, altFire_ );
thermalDetonatorExplode( ent_ ) = ccall((:thermalDetonatorExplode, lib), Void, ( Ptr{gentity_t},  ), ent_ );
thermalThinkStandard( ent_ ) = ccall((:thermalThinkStandard, lib), Void, ( Ptr{gentity_t},  ), ent_ );
WP_FireThermalDetonator( ent_, altFire_ ) = ccall((:WP_FireThermalDetonator, lib), Ptr{gentity_t}, ( Ptr{gentity_t}, qboolean,  ), ent_, altFire_ );
WP_DropThermal( ent_ ) = ccall((:WP_DropThermal, lib), Ptr{gentity_t}, ( Ptr{gentity_t},  ), ent_ );
WP_LobFire( self_, start_, target_, mins_, maxs_, clipmask_, velocity_, tracePath_, ignoreEntNum_, enemyNum_, minSpeed_, maxSpeed_, idealSpeed_, mustHit_ ) = ccall((:WP_LobFire, lib), qboolean, ( Ptr{gentity_t}, vec3_t, vec3_t, vec3_t, vec3_t, Int32, vec3_t, qboolean, Int32, Int32, Float32, Float32, Float32, qboolean,  ), self_, start_, target_, mins_, maxs_, clipmask_, velocity_, tracePath_, ignoreEntNum_, enemyNum_, minSpeed_, maxSpeed_, idealSpeed_, mustHit_ );
laserTrapExplode( self_ ) = ccall((:laserTrapExplode, lib), Void, ( Ptr{gentity_t},  ), self_ );
laserTrapDelayedExplode( self_, inflictor_, attacker_, damage_, meansOfDeath_ ) = ccall((:laserTrapDelayedExplode, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t}, Int32, Int32,  ), self_, inflictor_, attacker_, damage_, meansOfDeath_ );
touchLaserTrap( ent_, other_, trace_ ) = ccall((:touchLaserTrap, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{trace_t},  ), ent_, other_, trace_ );
proxMineThink( ent_ ) = ccall((:proxMineThink, lib), Void, ( Ptr{gentity_t},  ), ent_ );
laserTrapThink( ent_ ) = ccall((:laserTrapThink, lib), Void, ( Ptr{gentity_t},  ), ent_ );
laserTrapStick( ent_, endpos_, normal_ ) = ccall((:laserTrapStick, lib), Void, ( Ptr{gentity_t}, vec3_t, vec3_t,  ), ent_, endpos_, normal_ );
TrapThink( ent_ ) = ccall((:TrapThink, lib), Void, ( Ptr{gentity_t},  ), ent_ );
CreateLaserTrap( laserTrap_, start_, owner_ ) = ccall((:CreateLaserTrap, lib), Void, ( Ptr{gentity_t}, vec3_t, Ptr{gentity_t},  ), laserTrap_, start_, owner_ );
WP_PlaceLaserTrap( ent_, alt_fire_ ) = ccall((:WP_PlaceLaserTrap, lib), Void, ( Ptr{gentity_t}, qboolean,  ), ent_, alt_fire_ );
VectorNPos( in_, out_ ) = ccall((:VectorNPos, lib), Void, ( vec3_t, vec3_t,  ), in_, out_ );
charge_stick( self_, other_, trace_ ) = ccall((:charge_stick, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{trace_t},  ), self_, other_, trace_ );
DetPackBlow( self_ ) = ccall((:DetPackBlow, lib), Void, ( Ptr{gentity_t},  ), self_ );
DetPackPain( self_, attacker_, damage_ ) = ccall((:DetPackPain, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Int32,  ), self_, attacker_, damage_ );
DetPackDie( self_, inflictor_, attacker_, damage_, mod_ ) = ccall((:DetPackDie, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t}, Int32, Int32,  ), self_, inflictor_, attacker_, damage_, mod_ );
drop_charge( self_, start_, dir_ ) = ccall((:drop_charge, lib), Void, ( Ptr{gentity_t}, vec3_t, vec3_t,  ), self_, start_, dir_ );
BlowDetpacks( ent_ ) = ccall((:BlowDetpacks, lib), Void, ( Ptr{gentity_t},  ), ent_ );
RemoveDetpacks( ent_ ) = ccall((:RemoveDetpacks, lib), Void, ( Ptr{gentity_t},  ), ent_ );
CheatsOn() = ccall((:CheatsOn, lib), qboolean, (),  );
WP_DropDetPack( ent_, alt_fire_ ) = ccall((:WP_DropDetPack, lib), Void, ( Ptr{gentity_t}, qboolean,  ), ent_, alt_fire_ );
WP_FireConcussionAlt( ent_ ) = ccall((:WP_FireConcussionAlt, lib), Void, ( Ptr{gentity_t},  ), ent_ );
WP_FireConcussion( ent_ ) = ccall((:WP_FireConcussion, lib), Void, ( Ptr{gentity_t},  ), ent_ );
WP_FireStunBaton( ent_, alt_fire_ ) = ccall((:WP_FireStunBaton, lib), Void, ( Ptr{gentity_t}, qboolean,  ), ent_, alt_fire_ );
WP_FireMelee( ent_, alt_fire_ ) = ccall((:WP_FireMelee, lib), Void, ( Ptr{gentity_t}, qboolean,  ), ent_, alt_fire_ );
SnapVectorTowards( v_, to_ ) = ccall((:SnapVectorTowards, lib), Void, ( vec3_t, vec3_t,  ), v_, to_ );
LogAccuracyHit( target_, attacker_ ) = ccall((:LogAccuracyHit, lib), qboolean, ( Ptr{gentity_t}, Ptr{gentity_t},  ), target_, attacker_ );
CalcMuzzlePoint( ent_, inForward_, inRight_, inUp_, muzzlePoint_ ) = ccall((:CalcMuzzlePoint, lib), Void, ( Ptr{gentity_t}, vec3_t, vec3_t, vec3_t, vec3_t,  ), ent_, inForward_, inRight_, inUp_, muzzlePoint_ );
WP_TouchVehMissile( ent_, other_, trace_ ) = ccall((:WP_TouchVehMissile, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{trace_t},  ), ent_, other_, trace_ );
WP_CalcVehMuzzle( ent_, muzzleNum_ ) = ccall((:WP_CalcVehMuzzle, lib), Void, ( Ptr{gentity_t}, Int32,  ), ent_, muzzleNum_ );
WP_VehWeapSetSolidToOwner( self_ ) = ccall((:WP_VehWeapSetSolidToOwner, lib), Void, ( Ptr{gentity_t},  ), self_ );
WP_FireVehicleWeapon( ent_, start_, dir_, vehWeapon_, alt_fire_, isTurretWeap_ ) = ccall((:WP_FireVehicleWeapon, lib), Ptr{gentity_t}, ( Ptr{gentity_t}, vec3_t, vec3_t, Ptr{vehWeaponInfo_t}, qboolean, qboolean,  ), ent_, start_, dir_, vehWeapon_, alt_fire_, isTurretWeap_ );
G_VehMuzzleFireFX( ent_, broadcaster_, muzzlesFired_ ) = ccall((:G_VehMuzzleFireFX, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Int32,  ), ent_, broadcaster_, muzzlesFired_ );
G_EstimateCamPos( viewAngles_, cameraFocusLoc_, viewheight_, thirdPersonRange_, thirdPersonHorzOffset_, vertOffset_, pitchOffset_, ignoreEntNum_, camPos_ ) = ccall((:G_EstimateCamPos, lib), Void, ( vec3_t, vec3_t, Float32, Float32, Float32, Float32, Float32, Int32, vec3_t,  ), viewAngles_, cameraFocusLoc_, viewheight_, thirdPersonRange_, thirdPersonHorzOffset_, vertOffset_, pitchOffset_, ignoreEntNum_, camPos_ );
WP_GetVehicleCamPos( ent_, pilot_, camPos_ ) = ccall((:WP_GetVehicleCamPos, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, vec3_t,  ), ent_, pilot_, camPos_ );
WP_VehLeadCrosshairVeh( camTraceEnt_, newEnd_, dir_, shotStart_, shotDir_ ) = ccall((:WP_VehLeadCrosshairVeh, lib), Void, ( Ptr{gentity_t}, vec3_t, vec3_t, vec3_t, vec3_t,  ), camTraceEnt_, newEnd_, dir_, shotStart_, shotDir_ );
WP_VehCheckTraceFromCamPos( ent_, shotStart_, shotDir_ ) = ccall((:WP_VehCheckTraceFromCamPos, lib), qboolean, ( Ptr{gentity_t}, vec3_t, vec3_t,  ), ent_, shotStart_, shotDir_ );
FireVehicleWeapon( ent_, alt_fire_ ) = ccall((:FireVehicleWeapon, lib), Void, ( Ptr{gentity_t}, qboolean,  ), ent_, alt_fire_ );
FireWeapon( ent_, altFire_ ) = ccall((:FireWeapon, lib), Void, ( Ptr{gentity_t}, qboolean,  ), ent_, altFire_ );
WP_FireEmplaced( ent_, altFire_ ) = ccall((:WP_FireEmplaced, lib), Void, ( Ptr{gentity_t}, qboolean,  ), ent_, altFire_ );
emplaced_gun_use( self_, other_, trace_ ) = ccall((:emplaced_gun_use, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{trace_t},  ), self_, other_, trace_ );
emplaced_gun_realuse( self_, other_, activator_ ) = ccall((:emplaced_gun_realuse, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t},  ), self_, other_, activator_ );
emplaced_gun_pain( self_, attacker_, damage_ ) = ccall((:emplaced_gun_pain, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Int32,  ), self_, attacker_, damage_ );
emplaced_gun_update( self_ ) = ccall((:emplaced_gun_update, lib), Void, ( Ptr{gentity_t},  ), self_ );
emplaced_gun_die( self_, inflictor_, attacker_, damage_, mod_ ) = ccall((:emplaced_gun_die, lib), Void, ( Ptr{gentity_t}, Ptr{gentity_t}, Ptr{gentity_t}, Int32, Int32,  ), self_, inflictor_, attacker_, damage_, mod_ );
SP_emplaced_gun( ent_ ) = ccall((:SP_emplaced_gun, lib), Void, ( Ptr{gentity_t},  ), ent_ );
