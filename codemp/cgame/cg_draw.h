/* This file was automatically generated.  Do not edit! */
void CG_DrawActive(stereoFrame_t stereoView);
void CG_DrawMiscStaticModels(void);
qboolean CG_CullPointAndRadius(const vec3_t pt,float radius);
void CG_ChatBox_ArrayInsert(chatBoxItem_t **array,int insPoint,int maxNum,chatBoxItem_t *item);
void CG_ChatBox_AddString(char *chatStr);
void CG_ChatBox_StrInsert(char *buffer,int place,char *str);
extern int cgSiegeEntityRender;
extern int cgSiegeRoundCountTime;
extern int cgSiegeRoundBeganTime;
extern int cg_beatingSiegeTime;
extern int team2Timed;
extern int team1Timed;
extern int cgSiegeRoundTime;
extern int cgSiegeRoundState;
extern vec3_t gCGFallVector;
extern qboolean gCGHasFallVector;
extern float cgYsalFadeVal;
extern int cgYsalFadeTime;
extern int cgYsalTime;
extern float cgProtectFadeVal;
extern int cgProtectFadeTime;
extern int cgProtectTime;
extern float cgAbsorbFadeVal;
extern int cgAbsorbFadeTime;
extern int cgAbsorbTime;
extern float cgRageRecFadeVal;
extern int cgRageRecFadeTime;
extern int cgRageRecTime;
extern float cgRageFadeVal;
extern int cgRageFadeTime;
extern int cgRageTime;
void CG_DrawCloakFuel(void);
void CG_DrawEWebHealth(void);
void CG_DrawJetpackFuel(void);
void CG_DrawFlagStatus();
void CG_DrawTimedMenus();
void CG_CalcEWebMuzzlePoint(centity_t *cent,vec3_t start,vec3_t d_f,vec3_t d_rt,vec3_t d_up);
qboolean CG_CalcVehicleMuzzlePoint(int entityNum,vec3_t start,vec3_t d_f,vec3_t d_rt,vec3_t d_up);
void CG_CalcVehMuzzle(Vehicle_t *pVeh,centity_t *ent,int muzzleNum);
void CG_DrawBracketedEntities(void);
qboolean CG_InATST(void);
qboolean CG_InFighter(void);
void CG_BracketEntity(centity_t *cent,float radius);
void CG_DottedLine(float x1,float y1,float x2,float y2,float dotSize,int numDots,vec4_t color,float alpha);
void CG_SaberClashFlare(void);
extern vec3_t cg_saberFlashPos;
extern int cg_saberFlashTime;
qboolean CG_WorldCoordToScreenCoord(vec3_t worldCoord,int *x,int *y);
extern vec3_t cg_crosshairPos;
void CG_LerpCrosshairPos(float *x,float *y);
extern float cg_crosshairPrevPosY;
extern float cg_crosshairPrevPosX;
void CG_DrawGenericTimerBar(void);
extern vec4_t cg_genericTimerColor;
extern int cg_genericTimerDur;
extern int cg_genericTimerBar;
void CG_DrawHaqrBar(float chX,float chY,float chW,float chH);
void CG_DrawHealthBar(centity_t *cent,float chX,float chY,float chW,float chH);
void CG_DrawSiegeInfo(centity_t *cent,float chX,float chY,float chW,float chH);
qboolean BG_IsWhiteSpace(char c);
void CG_CenterPrint(const char *str,int y,int charWidth);
void CG_DrawSiegeMessageNonMenu(const char *str);
void CG_DrawSiegeMessage(const char *str,int objectiveScreen);
void CG_AddLagometerSnapshotInfo(snapshot_t *snap);
void CG_AddLagometerFrameInfo(void);
const char *CG_GetLocationString(const char *loc);
float CG_DrawRadar(float y);
extern float cg_radarRange;
void CG_DrawHealthBarRough(float x,float y,int width,int height,float ratio,const float *color1,const float *color2);
void CG_DrawTeamBackground(int x,int y,int w,int h,float alpha,int team);
qboolean CG_DrawVehicleHud(const centity_t *cent);
void CG_DrawVehicleDamageHUD(const centity_t *veh,int brokenLimbs,float percShields,char *menuName,float alpha);
void CG_DrawVehicleDamage(const centity_t *veh,int brokenLimbs,const menuDef_t *menuHUD,float alpha,int index);
extern veh_damage_t vehDamageData[4];
void CG_DrawVehicleArmor(const menuDef_t *menuHUD,const centity_t *veh);
void CG_DrawVehicleSpeed(const menuDef_t *menuHUD,const centity_t *veh);
void CG_DrawVehicleWeaponsLinked(const menuDef_t *menuHUD,const centity_t *veh);
extern qboolean cg_drawLink;
void CG_DrawVehicleTurboRecharge(const menuDef_t *menuHUD,const centity_t *veh);
void CG_DrawVehicleAmmoLower(const menuDef_t *menuHUD,const centity_t *veh);
void CG_DrawVehicleAmmoUpper(const menuDef_t *menuHUD,const centity_t *veh);
void CG_DrawVehicleAmmo(const menuDef_t *menuHUD,const centity_t *veh);
extern int cg_vehicleAmmoWarningTime;
extern int cg_vehicleAmmoWarning;
float CG_DrawVehicleShields(const menuDef_t *menuHUD,const centity_t *veh);
qboolean CG_CheckTargetVehicle(centity_t **pTargetVeh,float *alpha);
extern int cg_targVehLastTime;
extern int cg_targVeh;
void CG_DrawInvenSelect(void);
void CG_DrawForceSelect(void);
qboolean ForcePower_Valid(int i);
void CG_DrawHUD(centity_t *cent);
void CG_DrawForcePower(menuDef_t *menuHUD);
void CG_DrawArmor(menuDef_t *menuHUD);
void CG_DrawHealth(menuDef_t *menuHUD);
void CG_DrawFlagModel(float x,float y,float w,float h,int team,qboolean force2D);
void CG_DrawHead(float x,float y,float w,float h,int clientNum,vec3_t headAngles);
void CG_Draw3DModel(float x,float y,float w,float h,qhandle_t model,void *ghoul2,int g2radius,qhandle_t skin,vec3_t origin,vec3_t angles);
void CG_Text_Paint(float x,float y,float scale,vec4_t color,const char *text,float adjust,int limit,int style,int iMenuFont);
int CG_Text_Height(const char *text,float scale,int iMenuFont);
int CG_Text_Width(const char *text,float scale,int iMenuFont);
int MenuFontToHandle_CG(int iMenuFont);
extern char *showPowersName[];
extern const char *ammoTicName[MAX_HUD_TICS];
extern const char *forceTicName[MAX_HUD_TICS];
extern const char *healthTicName[MAX_HUD_TICS];
extern const char *armorTicName[MAX_HUD_TICS];
extern int cg_siegeDeathTime;
extern char teamChat2[256];
extern char teamChat1[256];
extern char systemChat[256];
extern float zoomFov;
extern int lastvalidlockdif;
extern int numSortedTeamPlayers;
extern int sortedTeamPlayers[TEAM_MAXOVERLAY];
extern displayContextDef_t cgDC;
void CG_DrawDuelistHealth(float x,float y,float w,float h,int duelist);
void CG_DrawDuelistHealth(float x,float y,float w,float h,int duelist);
qboolean CG_CalcMuzzlePoint(int entityNum,vec3_t muzzle);
qboolean CG_WorldCoordToScreenCoordFloat(vec3_t worldCoord,float *x,float *y);
qboolean CG_WorldCoordToScreenCoordFloat(vec3_t worldCoord,float *x,float *y);
float CG_RadiusForCent(centity_t *cent);
