/* This file was automatically generated.  Do not edit! */
CCALL void CG_FX_CameraShake(void);
CCALL void CG_AutomapInput(void);
CCALL void CG_MapChange(void);
CCALL void _CG_ROFF_NotetrackCallback(int entID,const char *notetrack);
CCALL trajectory_t *CG_GetAngleTrajectory(int entID);
CCALL trajectory_t *CG_GetOriginTrajectory(int entID);
CCALL void CG_GetAngles(int entID,vec3_t out);
CCALL void CG_GetOrigin(int entID,vec3_t out);
CCALL qboolean CG_IncomingConsoleCommand(void);
CCALL void _CG_MouseEvent(int x,int y);
void CG_PrevInventory_f(void);
void CG_PrevForcePower_f(void);
void CG_NextInventory_f(void);
void CG_NextForcePower_f(void);
void CG_DestroyAllGhoul2(void);
void CG_KillCEntityG2(int entNum);
const char *CG_GetLocationString(const char *loc);
void BG_VehicleLoadParms(void);
void WP_SaberLoadParms(void);
void CG_PmoveClientPointerUpdate();
extern playerState_t *cgSendPS[MAX_GENTITIES];
void CG_TransitionPermanent(void);
void CG_Init_CGents(void);
void CG_Init_CG(void);
void CG_AssetCache();
void CG_LoadHudMenu();
void CG_LoadMenus(const char *menuFile);
void CG_Text_PaintWithCursor(float x,float y,float scale,vec4_t color,const char *text,int cursorPos,char cursor,int limit,int style,int iMenuFont);
void CG_SetScoreSelection(void *p);
qboolean CG_Load_Menu(const char **p);
void CG_ParseMenu(const char *menuFile);
qboolean CG_Asset_Parse(int handle);
char *CG_GetMenuBuffer(const char *filename);
void CG_StartMusic(qboolean bForceStart);
void CG_BuildSpectatorString(void);
void CG_SiegeCountCvars(void);
int CG_GetTeamNonScoreCount(team_t team);
int CG_GetClassCount(team_t team,int siegeClass);
const char *CG_GetStringEdString(char *refSection,char *refName);
void CG_CacheG2AnimInfo(char *modelName);
int CG_HandleAppendedSkin(char *modelName);
extern char *forceHolocronModels[];
const char *CG_ConfigString(int index);
extern int cg_siegeWinTeam;
extern int cg_beatingSiegeTime;
void CG_ParseSiegeObjectiveStatus(const char *str);
void CG_PrecacheNPCSounds(const char *str);
void CG_ParseSiegeState(const char *str);
extern int cgSiegeRoundBeganTime;
void CG_ParseWeatherEffect(const char *str);
const char *CG_Argv(int arg);
CCALL int CG_LastAttacker(void);
CCALL int CG_CrosshairPlayer(void);
extern itemInfo_t cg_items[MAX_ITEMS];
extern weaponInfo_t cg_weapons[MAX_WEAPONS];
extern int cg_numpermanents;
extern centity_t *cg_permanents[MAX_GENTITIES];
extern cgs_t cgs;
CCALL int CG_RagCallback(int callType);
CCALL void C_G2Mark(void);
CCALL void C_G2Trace(void);
CCALL void C_Trace(void);
CCALL void C_GetLerpData(void);
extern centity_t cg_entities[MAX_GENTITIES];
CCALL void C_GetLerpOrigin(void);
CCALL int C_PointContents(void);
extern cg_t cg;
CCALL qboolean CG_NoUseableForce(void);
extern EXTERNC cvar_t *bg_showevents;
void CG_DoCameraShake(vec3_t origin,float intensity,int radius,int time);
void CG_MiscEnt(void);
CCALL void CG_MiscEnt(void);
extern vec3_t cg_autoMapAngle;
extern int cg_autoMapInputTime;
extern autoMapInput_t cg_autoMapInput;
void UI_CleanupGhoul2(void);
void CG_ROFF_NotetrackCallback(centity_t *cent,const char *notetrack);
void CG_CalcEntityLerpPositions(centity_t *cent);
void CG_Shutdown(void);
CCALL void CG_Shutdown(void);
void CG_Init(int serverMessageNum,int serverCommandSequence,int clientNum);
CCALL void CG_Init(int serverMessageNum,int serverCommandSequence,int clientNum);
void CG_CleanJetpackGhoul2(void);
void CG_InitJetpackGhoul2(void);
void CG_InitItems(void);
void CG_InitItems(void);
extern int cgSiegeRoundTime;
extern int cgSiegeRoundState;
extern displayContextDef_t cgDC;
