CCALL qboolean CG_NoUseableForce();
CCALL int C_PointContents();
CCALL void C_GetLerpOrigin();
CCALL void C_GetLerpData();
CCALL void C_Trace();
CCALL void C_G2Trace();
CCALL void C_G2Mark();
CCALL void CG_DebugBoxLines( vec3_t mins, vec3_t maxs, int duration );
CCALL int CG_RagCallback( int callType );
CCALL void C_ImpactMark();
CCALL void CG_MiscEnt();
CCALL int CG_CrosshairPlayer();
CCALL int CG_LastAttacker();
CCALL const char *CG_Argv( int arg );
CCALL void CG_RegisterItemSounds( int itemNum );
CCALL void CG_AS_Register();
CCALL void CG_ParseWeatherEffect( const char *str );
CCALL void CG_ParseSiegeState( const char *str );
CCALL void CG_RegisterSounds();
CCALL void CG_RegisterEffects();
CCALL void CG_RegisterGraphics();
CCALL const char *CG_GetStringEdString( char *refSection, char *refName );
CCALL void CG_SiegeCountCvars();
CCALL void CG_BuildSpectatorString();
CCALL void CG_RegisterClients();
CCALL const char *CG_ConfigString( int index );
CCALL void CG_StartMusic( qboolean bForceStart );
CCALL char *CG_GetMenuBuffer( const char *filename );
CCALL qboolean CG_Asset_Parse( int handle );
CCALL void CG_ParseMenu( const char *menuFile );
CCALL qboolean CG_Load_Menu( const char **p );
CCALL qboolean CG_OwnerDrawHandleKey( int ownerDraw, int flags, float *special, int key );
CCALL int CG_FeederCount( float feederID );
CCALL void CG_SetScoreSelection( void *p );
CCALL clientInfo_t *CG_InfoFromScoreIndex( int index, int team, int *scoreIndex );
CCALL const char *CG_FeederItemText( float feederID, int index, int column, qhandle_t *handle1, qhandle_t *handle2, qhandle_t *handle3 );
CCALL qhandle_t CG_FeederItemImage( float feederID, int index );
CCALL qboolean CG_FeederSelection( float feederID, int index, itemDef_t *item );
CCALL float CG_Cvar_Get( const char *cvar );
CCALL void CG_Text_PaintWithCursor( float x, float y, float scale, vec4_t color, const char *text, int cursorPos, char cursor, int limit, int style, int iMenuFont );
CCALL int CG_OwnerDrawWidth( int ownerDraw, float scale );
CCALL int CG_PlayCinematic( const char *name, float x, float y, float w, float h );
CCALL void CG_StopCinematic( int handle );
CCALL void CG_DrawCinematic( int handle, float x, float y, float w, float h );
CCALL void CG_RunCinematicFrame( int handle );
CCALL void CG_LoadMenus( const char *menuFile );
CCALL void CG_LoadHudMenu();
CCALL void CG_AssetCache();
CCALL void CG_Init_CG();
CCALL void CG_Init_CGents();
CCALL void CG_InitItems();
CCALL void CG_TransitionPermanent();
CCALL void CG_Init( int serverMessageNum, int serverCommandSequence, int clientNum );
CCALL const char *CG_GetLocationString( const char *loc );
CCALL void CG_DestroyAllGhoul2();
CCALL void CG_Shutdown();
CCALL void CG_NextForcePower_f();
CCALL void CG_PrevForcePower_f();
CCALL void CG_NextInventory_f();
CCALL void CG_PrevInventory_f();
CCALL void _CG_MouseEvent( int x, int y );
CCALL qboolean CG_IncomingConsoleCommand();
CCALL void CG_GetOrigin( int entID, vec3_t out );
CCALL void CG_GetAngles( int entID, vec3_t out );
CCALL trajectory_t *CG_GetOriginTrajectory( int entID );
CCALL trajectory_t *CG_GetAngleTrajectory( int entID );
CCALL void _CG_ROFF_NotetrackCallback( int entID, const char *notetrack );
CCALL void CG_MapChange();
CCALL void CG_AutomapInput();
CCALL void CG_FX_CameraShake();
