sfxHandle_t CG_CustomSound( int clientNum, const char *soundName );
qboolean CG_ParseSurfsFile( const char *modelName, const char *skinName, char *surfOff, char *surfOn );
static qboolean CG_RegisterClientModelname( clientInfo_t *ci, const char *modelName, const char *skinName, const char *teamName, int clientNum );
static void CG_ColorFromString( const char *v, vec3_t color );
static void CG_ColorFromInt( int val, vec3_t color );
int CG_G2SkelForModel( void *g2 );
int CG_G2EvIndexForModel( void *g2, int animIndex );
void CG_LoadCISounds( clientInfo_t *ci, qboolean modelloaded );
void CG_LoadClientInfo( clientInfo_t *ci );
static void CG_InitG2SaberData( int saberNum, clientInfo_t *ci );
static void CG_CopyClientInfoModel( clientInfo_t *from, clientInfo_t *to );
static qboolean CG_ScanForExistingClientInfo( clientInfo_t *ci, int clientNum );
static void CG_SetDeferredClientInfo( clientInfo_t *ci );
void CG_NewClientInfo( int clientNum, qboolean entitiesInitialized );
void CG_ActualLoadDeferredPlayers();
void CG_LoadDeferredPlayers();
static void _PlayerFootStep( const vec3_t origin, const float orientation, const float radius, const centity_t *cent, footstepType_t footStepType );
static void CG_PlayerFootsteps( centity_t *cent, footstepType_t footStepType );
void CG_PlayerAnimEventDo( centity_t *cent, animevent_t *animEvent );
void CG_PlayerAnimEvents( int animFileIndex, int eventFileIndex, qboolean torso, int oldFrame, int frame, int entNum );
void CG_TriggerAnimSounds( centity_t *cent );
qboolean CG_InRoll( centity_t *cent );
qboolean CG_InRollAnim( centity_t *cent );
static void CG_SetLerpFrameAnimation( centity_t *cent, clientInfo_t *ci, lerpFrame_t *lf, int newAnimation, float animSpeedMult, qboolean torsoOnly, qboolean flipState );
static qboolean CG_FirstAnimFrame( lerpFrame_t *lf, qboolean torsoOnly, float speedScale );
static void CG_RunLerpFrame( centity_t *cent, clientInfo_t *ci, lerpFrame_t *lf, qboolean flipState, int newAnimation, float speedScale, qboolean torsoOnly );
static void CG_ClearLerpFrame( centity_t *cent, clientInfo_t *ci, lerpFrame_t *lf, int animationNumber, qboolean torsoOnly );
static void CG_PlayerAnimation( centity_t *cent, int *legsOld, int *legs, float *legsBackLerp, int *torsoOld, int *torso, float *torsoBackLerp );
void CG_G2SetBoneAngles( void *ghoul2, int modelIndex, const char *boneName, const vec3_t angles, const int flags, const int up, const int right, const int forward, qhandle_t *modelList, int blendTime, int currentTime );
void CG_Rag_Trace( trace_t *result, const vec3_t start, const vec3_t mins, const vec3_t maxs, const vec3_t end, int skipNumber, int mask );
void CG_TempTestFunction( centity_t *cent, vec3_t forcedAngles );
static int CG_RagAnimForPositioning( centity_t *cent );
qboolean CG_RagDoll( centity_t *cent, vec3_t forcedAngles );
void CG_G2ServerBoneAngles( centity_t *cent );
static void CG_G2SetHeadBlink( centity_t *cent, qboolean bStart );
static void CG_G2SetHeadAnim( centity_t *cent, int anim );
qboolean CG_G2PlayerHeadAnims( centity_t *cent );
static void CG_G2PlayerAngles( centity_t *cent, matrix3_t legs, vec3_t legsAngles );
static void CG_TrailItem( centity_t *cent, qhandle_t hModel );
static void CG_PlayerFlag( centity_t *cent, qhandle_t hModel );
static void CG_PlayerPowerups( centity_t *cent, refEntity_t *torso );
static void CG_PlayerFloatSprite( centity_t *cent, qhandle_t shader );
static void CG_PlayerFloatSpriteRGBA( centity_t *cent, qhandle_t shader, vec4_t rgba );
static void CG_PlayerSprites( centity_t *cent );
static qboolean CG_PlayerShadow( centity_t *cent, float *shadowPlane );
static void CG_PlayerSplash( centity_t *cent );
static void CG_ForcePushBlur( vec3_t org, centity_t *cent );
static void CG_ForcePushBodyBlur( centity_t *cent );
static void CG_ForceGripEffect( vec3_t org );
void CG_AddRefEntityWithPowerups( refEntity_t *ent, entityState_t *state, int team );
void CG_PlayerShieldHit( int entitynum, vec3_t dir, int amount );
void CG_DrawPlayerShield( centity_t *cent, vec3_t origin );
void CG_PlayerHitFX( centity_t *cent );
int CG_LightVerts( vec3_t normal, int numVerts, polyVert_t *verts );
static void CG_RGBForSaberColor( saber_colors_t color, vec3_t rgb );
static void CG_DoSaberLight( saberInfo_t *saber );
void CG_DoSaber( vec3_t origin, vec3_t dir, float length, float lengthMax, float radius, saber_colors_t color, int rfx, qboolean doLight );
void CG_GetTagWorldPosition( refEntity_t *model, char *tag, vec3_t pos, matrix3_t axis );
void CG_CreateSaberMarks( vec3_t start, vec3_t end, vec3_t normal );
qboolean CG_G2TraceCollide( trace_t *tr, const vec3_t mins, const vec3_t maxs, const vec3_t lastValidStart, const vec3_t lastValidEnd );
void CG_G2SaberEffects( vec3_t start, vec3_t end, centity_t *owner );
void CG_AddGhoul2Mark( int shader, float size, vec3_t start, vec3_t end, int entnum, vec3_t entposition, float entangle, void *ghoul2, vec3_t scale, int lifeTime );
void CG_SaberCompWork( vec3_t start, vec3_t end, centity_t *owner, int saberNum, int bladeNum );
void CG_AddSaberBlade( centity_t *cent, centity_t *scent, refEntity_t *saber, int renderfx, int modelIndex, int saberNum, int bladeNum, vec3_t origin, vec3_t angles, qboolean fromSaber, qboolean dontDraw );
int CG_IsMindTricked( int trickIndex1, int trickIndex2, int trickIndex3, int trickIndex4, int client );
void CG_DrawPlayerSphere( centity_t *cent, vec3_t origin, float scale, int shader );
void CG_AddLightningBeam( vec3_t start, vec3_t end );
void CG_AddRandomLightning( vec3_t start, vec3_t end );
qboolean CG_ThereIsAMaster();
void CG_DrawNoForceSphere( centity_t *cent, vec3_t origin, float scale, int shader );
int CG_HandleAppendedSkin( char *modelName );
void CG_CacheG2AnimInfo( char *modelName );
static void CG_RegisterVehicleAssets( Vehicle_t *pVeh );
void CG_G2AnimEntModelLoad( centity_t *cent );
static void CG_CreateSurfaceDebris( centity_t *cent, int surfNum, int fxID, qboolean throwPart );
static void CG_CreateSurfaceSmoke( centity_t *cent, int shipSurf, int fxID );
qboolean CG_VehicleShouldDrawShields( centity_t *vehCent );
qboolean CG_VehicleAttachDroidUnit( centity_t *droidCent, refEntity_t *legs );
void CG_G2Animated( centity_t *cent );
void CG_ForceFPLSPlayerModel( centity_t *cent, clientInfo_t *ci );
void CG_CreateNPCClient( clientInfo_t **ci );
void CG_DestroyNPCClient( clientInfo_t **ci );
static void CG_ForceElectrocution( centity_t *cent, const vec3_t origin, vec3_t tempAngles, qhandle_t shader, qboolean alwaysDo );
void CG_InitJetpackGhoul2();
void CG_CleanJetpackGhoul2();
static void CG_VehicleHeatEffect( vec3_t org, centity_t *cent );
QINLINE static void CG_VehicleEffects( centity_t *cent );
float CG_RadiusForCent( centity_t *cent );
void CG_CheckThirdPersonAlpha( centity_t *cent, refEntity_t *legs );
void CG_Player( centity_t *cent );
void CG_ResetPlayerEntity( centity_t *cent );
