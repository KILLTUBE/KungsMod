void CG_PositionEntityOnTag( refEntity_t *entity, const refEntity_t *parent, qhandle_t parentModel, char *tagName );
void CG_PositionRotatedEntityOnTag( refEntity_t *entity, const refEntity_t *parent, qhandle_t parentModel, char *tagName );
void CG_SetEntitySoundPosition( centity_t *cent );
void CG_S_AddLoopingSound( int entityNum, const vec3_t origin, const vec3_t velocity, sfxHandle_t sfx );
void CG_S_AddRealLoopingSound( int entityNum, const vec3_t origin, const vec3_t velocity, sfxHandle_t sfx );
void CG_S_StopLoopingSound( int entityNum, sfxHandle_t sfx );
void CG_S_UpdateLoopingSounds( int entityNum );
static void CG_EntityEffects( centity_t *cent );
localEntity_t *FX_AddOrientedLine( vec3_t start, vec3_t end, vec3_t normal, float stScale, float scale, float dscale, float startalpha, float endalpha, float killTime, qhandle_t shader );
void FX_DrawPortableShield( centity_t *cent );
void CG_Special( centity_t *cent );
void CG_SetGhoul2Info( refEntity_t *ent, centity_t *cent );
void CG_CreateBBRefEnts( entityState_t *s1, vec3_t origin );
void G2_BoltToGhoul2Model( centity_t *cent, refEntity_t *ent );
void ScaleModelAxis( refEntity_t *ent );
void CG_Disintegration( centity_t *cent, refEntity_t *ent );
static qboolean CG_RenderTimeEntBolt( centity_t *cent );
void CG_AddRadarEnt( centity_t *cent );
void CG_AddBracketedEnt( centity_t *cent );
static void CG_General( centity_t *cent );
static void CG_Speaker( centity_t *cent );
qboolean CG_GreyItem( int type, int tag, int plSide );
static void CG_Item( centity_t *cent );
void CG_CreateDistortionTrailPart( centity_t *cent, float scale, vec3_t pos );
static void CG_Missile( centity_t *cent );
void CG_PlayDoorLoopSound( centity_t *cent );
void CG_PlayDoorSound( centity_t *cent, int type );
static void CG_Mover( centity_t *cent );
void CG_Beam( centity_t *cent );
static void CG_Portal( centity_t *cent );
void CG_AdjustPositionForMover( const vec3_t in, int moverNum, int fromTime, int toTime, vec3_t out );
static void CG_InterpolateEntityPosition( centity_t *cent );
void CG_CalcEntityLerpPositions( centity_t *cent );
static void CG_FX( centity_t *cent );
static void CG_AddCEntity( centity_t *cent );
void CG_ManualEntityRender( centity_t *cent );
void CG_AddPacketEntities( qboolean isPortal );
void CG_ROFF_NotetrackCallback( centity_t *cent, const char *notetrack );
void CG_Cube( vec3_t mins, vec3_t maxs, vec3_t color, float alpha );
