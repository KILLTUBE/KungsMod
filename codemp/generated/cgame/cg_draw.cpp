int MenuFontToHandle_CG();
int CG_Text_Width( const char *text, float scale, int iMenuFont );
int CG_Text_Height( const char *text, float scale, int iMenuFont );
void CG_Text_Paint( float x, float y, float scale, vec4_t color, const char *text, float adjust, int limit, int style, int iMenuFont );
static void CG_DrawZoomMask();
void CG_Draw3DModel( float x, float y, float w, float h, qhandle_t model, void *ghoul2, int g2radius, qhandle_t skin, vec3_t origin, vec3_t angles );
void CG_DrawHead( float x, float y, float w, float h, int clientNum, vec3_t headAngles );
void CG_DrawFlagModel( float x, float y, float w, float h, int team, qboolean force2D );
void CG_DrawHealth( menuDef_t *menuHUD );
void CG_DrawArmor( menuDef_t *menuHUD );
static void CG_DrawSaberStyle( centity_t *cent, menuDef_t *menuHUD );
static void CG_DrawAmmo( centity_t *cent, menuDef_t *menuHUD );
void CG_DrawForcePower( menuDef_t *menuHUD );
static void CG_DrawSimpleSaberStyle( const centity_t *cent );
static void CG_DrawSimpleAmmo( const centity_t *cent );
static void CG_DrawSimpleForcePower( const centity_t *cent );
void CG_DrawHUD( centity_t *cent );
qboolean ForcePower_Valid();
void CG_DrawForceSelect();
void CG_DrawInvenSelect();
qboolean CG_CheckTargetVehicle( centity_t **pTargetVeh, float *alpha );
float CG_DrawVehicleShields( const menuDef_t *menuHUD, const centity_t *veh );
void CG_DrawVehicleAmmo( const menuDef_t *menuHUD, const centity_t *veh );
void CG_DrawVehicleAmmoUpper( const menuDef_t *menuHUD, const centity_t *veh );
void CG_DrawVehicleAmmoLower( const menuDef_t *menuHUD, const centity_t *veh );
void CG_DrawVehicleTurboRecharge( const menuDef_t *menuHUD, const centity_t *veh );
void CG_DrawVehicleWeaponsLinked( const menuDef_t *menuHUD, const centity_t *veh );
void CG_DrawVehicleSpeed( const menuDef_t *menuHUD, const centity_t *veh );
void CG_DrawVehicleArmor( const menuDef_t *menuHUD, const centity_t *veh );
void CG_DrawVehicleDamage( const centity_t *veh, int brokenLimbs, const menuDef_t *menuHUD, float alpha, int index );
void CG_DrawVehicleDamageHUD( const centity_t *veh, int brokenLimbs, float percShields, char *menuName, float alpha );
qboolean CG_DrawVehicleHud( const centity_t *cent );
static void CG_DrawStats();
static void CG_DrawPickupItem();
void CG_DrawTeamBackground( int x, int y, int w, int h, float alpha, int team );
static float CG_DrawMiniScoreboard();
static float CG_DrawEnemyInfo();
static float CG_DrawSnapshot();
static float CG_DrawFPS();
void CG_DrawHealthBarRough( float x, float y, int width, int height, float ratio, const float *color1, const float *color2 );
void CG_DrawDuelistHealth( float x, float y, float w, float h, int duelist );
float CG_DrawRadar();
static float CG_DrawTimer();
static float CG_DrawTeamOverlay( float y, qboolean right, qboolean upper );
static void CG_DrawPowerupIcons();
static void CG_DrawUpperRight();
static void CG_DrawReward();
void CG_AddLagometerFrameInfo();
void CG_AddLagometerSnapshotInfo( snapshot_t *snap );
static void CG_DrawDisconnect();
static void CG_DrawLagometer();
void CG_DrawSiegeMessage( const char *str, int objectiveScreen );
void CG_DrawSiegeMessageNonMenu( const char *str );
void CG_CenterPrint( const char *str, int y, int charWidth );
qboolean BG_IsWhiteSpace();
static void CG_DrawCenterString();
void CG_DrawSiegeInfo( centity_t *cent, float chX, float chY, float chW, float chH );
void CG_DrawHealthBar( centity_t *cent, float chX, float chY, float chW, float chH );
void CG_DrawHaqrBar( float chX, float chY, float chW, float chH );
void CG_DrawGenericTimerBar();
void CG_LerpCrosshairPos( float *x, float *y );
static void CG_DrawCrosshair( vec3_t worldPoint, int chEntValid );
qboolean CG_WorldCoordToScreenCoordFloat( vec3_t worldCoord, float *x, float *y );
qboolean CG_WorldCoordToScreenCoord( vec3_t worldCoord, int *x, int *y );
void CG_SaberClashFlare();
void CG_DottedLine( float x1, float y1, float x2, float y2, float dotSize, int numDots, vec4_t color, float alpha );
void CG_BracketEntity( centity_t *cent, float radius );
qboolean CG_InFighter();
qboolean CG_InATST();
void CG_DrawBracketedEntities();
static void CG_DrawHolocronIcons();
static qboolean CG_IsDurationPower();
static void CG_DrawActivePowers();
static void CG_DrawRocketLocking( int lockEntNum, int lockTime );
qboolean CG_CalcVehicleMuzzlePoint( int entityNum, vec3_t start, vec3_t d_f, vec3_t d_rt, vec3_t d_up );
void CG_CalcEWebMuzzlePoint( centity_t *cent, vec3_t start, vec3_t d_f, vec3_t d_rt, vec3_t d_up );
static void CG_ScanForCrosshairEntity();
static void CG_DrawCrosshairNames();
static void CG_DrawSpectator();
static void CG_DrawVote();
static void CG_DrawTeamVote();
static qboolean CG_DrawScoreboard();
static void CG_DrawIntermission();
static qboolean CG_DrawFollow();
static void CG_DrawTemporaryStats();
void CG_DrawAmmoWarning();
static void CG_DrawWarmup();
void CG_DrawTimedMenus();
void CG_DrawFlagStatus();
void CG_DrawJetpackFuel();
void CG_DrawEWebHealth();
void CG_DrawCloakFuel();
static void CG_DrawSiegeTimer( int timeRemaining, qboolean isMyTeam );
static void CG_DrawSiegeDeathTimer();
static void CG_DrawSiegeHUDItem();
void CG_ChatBox_StrInsert( char *buffer, int place, char *str );
void CG_ChatBox_AddString( char *chatStr );
void CG_ChatBox_ArrayInsert( chatBoxItem_t **array, int insPoint, int maxNum, chatBoxItem_t *item );
static void CG_ChatBox_DrawStrings();
static void CG_Draw2DScreenTints();
static void CG_Draw2D();
void CG_DrawMiscStaticModels();
static void CG_DrawTourneyScoreboard();
void CG_DrawActive();
