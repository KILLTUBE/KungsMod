void SP_info_camp( gentity_t *self );
void SP_info_null( gentity_t *self );
void SP_info_notnull( gentity_t *self );
static void misc_lightstyle_set( gentity_t *ent );
void misc_dlight_use( gentity_t *ent, gentity_t *other, gentity_t *activator );
void SP_light( gentity_t *self );
void TeleportPlayer( gentity_t *player, vec3_t origin, vec3_t angles );
void SP_misc_teleporter_dest( gentity_t *ent );
void SP_misc_model( gentity_t *ent );
void SP_misc_model_static( gentity_t *ent );
void SP_misc_model_breakable( gentity_t *ent );
void misc_model_breakable_gravity_init( gentity_t *ent, qboolean dropToFloor );
void misc_model_breakable_init( gentity_t *ent );
void SP_misc_G2model( gentity_t *ent );
void locateCamera( gentity_t *ent );
void SP_misc_portal_surface( gentity_t *ent );
void SP_misc_portal_camera( gentity_t *ent );
void SP_misc_bsp( gentity_t *ent );
void SP_terrain( gentity_t *ent );
void G_PortalifyEntities( gentity_t *ent );
void SP_misc_skyportal_orient( gentity_t *ent );
void SP_misc_skyportal( gentity_t *ent );
void HolocronRespawn( gentity_t *self );
void HolocronPopOut( gentity_t *self );
void HolocronTouch( gentity_t *self, gentity_t *other, trace_t *trace );
void HolocronThink( gentity_t *ent );
void SP_misc_holocron( gentity_t *ent );
void Use_Shooter( gentity_t *ent, gentity_t *other, gentity_t *activator );
static void InitShooter_Finish( gentity_t *ent );
void InitShooter( gentity_t *ent, int weapon );
void SP_shooter_blaster( gentity_t *ent );
void check_recharge( gentity_t *ent );
void EnergyShieldStationSettings( gentity_t *ent );
void shield_power_converter_use( gentity_t *self, gentity_t *other, gentity_t *activator );
void ammo_generic_power_converter_use( gentity_t *self, gentity_t *other, gentity_t *activator );
void SP_misc_ammo_floor_unit( gentity_t *ent );
void SP_misc_shield_floor_unit( gentity_t *ent );
void SP_misc_model_shield_power_converter( gentity_t *ent );
void EnergyAmmoStationSettings( gentity_t *ent );
void ammo_power_converter_use( gentity_t *self, gentity_t *other, gentity_t *activator );
void SP_misc_model_ammo_power_converter( gentity_t *ent );
void EnergyHealthStationSettings( gentity_t *ent );
void health_power_converter_use( gentity_t *self, gentity_t *other, gentity_t *activator );
void SP_misc_model_health_power_converter( gentity_t *ent );
void DmgBoxHit( gentity_t *self, gentity_t *other, trace_t *trace );
void DmgBoxUpdateSelf( gentity_t *self );
void DmgBoxAbsorb_Die( gentity_t *self, gentity_t *inflictor, gentity_t *attacker, int damage, int mod );
void DmgBoxAbsorb_Pain( gentity_t *self, gentity_t *attacker, int damage );
gentity_t *CreateNewDamageBox( gentity_t *ent );
void ATST_ManageDamageBoxes( gentity_t *ent );
int G_PlayerBecomeATST( gentity_t *ent );
void fx_runner_think( gentity_t *ent );
void fx_runner_use( gentity_t *self, gentity_t *other, gentity_t *activator );
void fx_runner_link( gentity_t *ent );
void SP_fx_runner( gentity_t *ent );
void SP_CreateWind( gentity_t *ent );
void SP_CreateSpaceDust( gentity_t *ent );
void SP_CreateSnow( gentity_t *ent );
void SP_CreateRain( gentity_t *ent );
void Use_Target_Screenshake( gentity_t *ent, gentity_t *other, gentity_t *activator );
void SP_target_screenshake( gentity_t *ent );
void Use_Target_Escapetrig( gentity_t *ent, gentity_t *other, gentity_t *activator );
void SP_target_escapetrig( gentity_t *ent );
void maglock_die( gentity_t *self, gentity_t *inflictor, gentity_t *attacker, int damage, int mod );
void SP_misc_maglock( gentity_t *self );
void maglock_link( gentity_t *self );
void faller_touch( gentity_t *self, gentity_t *other, trace_t *trace );
void faller_think( gentity_t *ent );
void misc_faller_create( gentity_t *ent, gentity_t *other, gentity_t *activator );
void misc_faller_think( gentity_t *ent );
void SP_misc_faller( gentity_t *ent );
tagOwner_t *FirstFreeTagOwner();
reference_tag_t *FirstFreeRefTag( tagOwner_t *tagOwner );
void TAG_Init();
tagOwner_t *TAG_FindOwner( const char *owner );
reference_tag_t *TAG_Find( const char *owner, const char *name );
reference_tag_t *TAG_Add( const char *name, const char *owner, vec3_t origin, vec3_t angles, int radius, int flags );
int TAG_GetOrigin( const char *owner, const char *name, vec3_t origin );
int TAG_GetOrigin2( const char *owner, const char *name, vec3_t origin );
int TAG_GetAngles( const char *owner, const char *name, vec3_t angles );
int TAG_GetRadius( const char *owner, const char *name );
int TAG_GetFlags( const char *owner, const char *name );
void ref_link( gentity_t *ent );
void SP_reference_tag( gentity_t *ent );
gclient_t *G_ClientForShooter();
void G_FreeClientForShooter( gclient_t *cl );
void misc_weapon_shooter_fire( gentity_t *self );
void misc_weapon_shooter_use( gentity_t *self, gentity_t *other, gentity_t *activator );
void misc_weapon_shooter_aim( gentity_t *self );
void SP_misc_weapon_shooter( gentity_t *self );
void SP_misc_weather_zone( gentity_t *ent );
void SP_misc_cubemap( gentity_t *ent );
