int AI_GetGroupSize( vec3_t origin, int radius, team_t playerTeam, gentity_t *avoid );
int AI_GetGroupSize2( gentity_t *ent, int radius );
void AI_SetClosestBuddy( AIGroupInfo_t *group );
void AI_SortGroupByPathCostToEnemy( AIGroupInfo_t *group );
qboolean AI_FindSelfInPreviousGroup( gentity_t *self );
void AI_InsertGroupMember( AIGroupInfo_t *group, gentity_t *member );
qboolean AI_TryJoinPreviousGroup( gentity_t *self );
qboolean AI_GetNextEmptyGroup( gentity_t *self );
qboolean AI_ValidateNoEnemyGroupMember( AIGroupInfo_t *group, gentity_t *member );
qboolean AI_ValidateGroupMember( AIGroupInfo_t *group, gentity_t *member );
void AI_GetGroup( gentity_t *self );
void AI_SetNewGroupCommander( AIGroupInfo_t *group );
void AI_DeleteGroupMember( AIGroupInfo_t *group, int memberNum );
void AI_DeleteSelfFromGroup( gentity_t *self );
void AI_GroupMemberKilled( gentity_t *self );
void AI_GroupUpdateEnemyLastSeen( AIGroupInfo_t *group, vec3_t spot );
void AI_GroupUpdateClearShotTime( AIGroupInfo_t *group );
void AI_GroupUpdateSquadstates( AIGroupInfo_t *group, gentity_t *member, int newSquadState );
qboolean AI_RefreshGroup( AIGroupInfo_t *group );
void AI_UpdateGroups();
qboolean AI_GroupContainsEntNum( AIGroupInfo_t *group, int entNum );
qboolean AI_CheckEnemyCollision( gentity_t *ent, qboolean takeEnemy );
gentity_t *AI_DistributeAttack( gentity_t *attacker, gentity_t *enemy, team_t team, int threshold );
