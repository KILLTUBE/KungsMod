void G_ClearEnemy( gentity_t *self );
void G_AngerAlert( gentity_t *self );
qboolean G_TeamEnemy( gentity_t *self );
void G_AttackDelay( gentity_t *self, gentity_t *enemy );
void G_ForceSaberOn( gentity_t *ent );
void G_SetEnemy( gentity_t *self, gentity_t *enemy );
void ChangeWeapon( gentity_t *ent, int newWeapon );
void NPC_ChangeWeapon( int newWeapon );
void NPC_ApplyWeaponFireDelay();
void ShootThink();
void WeaponThink( qboolean inCombat );
qboolean HaveWeapon( int weapon );
qboolean EntIsGlass( gentity_t *check );
qboolean ShotThroughGlass( trace_t *tr, gentity_t *target, vec3_t spot, int mask );
qboolean CanShoot( gentity_t *ent, gentity_t *shooter );
void NPC_CheckPossibleEnemy( gentity_t *other, visibility_t vis );
int NPC_AttackDebounceForWeapon();
float NPC_MaxDistSquaredForWeapon();
qboolean ValidEnemy( gentity_t *ent );
qboolean NPC_EnemyTooFar( gentity_t *enemy, float dist, qboolean toShoot );
gentity_t *NPC_PickEnemy( gentity_t *closestTo, int enemyTeam, qboolean checkVis, qboolean findPlayersFirst, qboolean findClosest );
gentity_t *NPC_PickAlly( qboolean facingEachOther, float range, qboolean ignoreGroup, qboolean movingOnly );
gentity_t *NPC_CheckEnemy( qboolean findNew, qboolean tooFarOk, qboolean setEnemy );
qboolean NPC_ClearShot( gentity_t *ent );
int NPC_ShotEntity( gentity_t *ent, vec3_t impactPos );
qboolean NPC_EvaluateShot( int hit, qboolean glassOK );
qboolean NPC_CheckAttack( float scale );
qboolean NPC_CheckDefend( float scale );
qboolean NPC_CheckCanAttack( float attack_scale, qboolean stationary );
float IdealDistance( gentity_t *self );
void SP_point_combat( gentity_t *self );
void CP_FindCombatPointWaypoints();
static int NPC_CollectCombatPoints( const vec3_t origin, const float radius, combatPt_t *points, const int flags );
int NPC_FindCombatPoint( const vec3_t position, const vec3_t avoidPosition, vec3_t enemyPosition, const int flags, const float avoidDist, const int ignorePoint );
int NPC_FindSquadPoint( vec3_t position );
qboolean NPC_ReserveCombatPoint( int combatPointID );
qboolean NPC_FreeCombatPoint( int combatPointID, qboolean failed );
qboolean NPC_SetCombatPoint( int combatPointID );
gentity_t *NPC_SearchForWeapons();
void NPC_SetPickUpGoal( gentity_t *foundWeap );
void NPC_CheckGetNewWeapon();
void NPC_AimAdjust( int change );
void G_AimSet( gentity_t *self, int aim );
