float RandFloat( float min, float max );
void G_DebugBoxLines( vec3_t mins, vec3_t maxs, int duration );
qboolean G_CanBeEnemy( gentity_t *self, gentity_t *enemy );
QINLINE static int G_SaberAttackPower( gentity_t *ent, qboolean attacking );
void WP_DeactivateSaber( gentity_t *self, qboolean clearLength );
void WP_ActivateSaber( gentity_t *self );
void SaberUpdateSelf( gentity_t *ent );
void SaberGotHit( gentity_t *self, gentity_t *other, trace_t *trace );
QINLINE static void SetSaberBoxSize( gentity_t *saberent );
void WP_SaberInitBladeData( gentity_t *ent );
QINLINE static qboolean G_CheckLookTarget( gentity_t *ent, vec3_t lookAngles, float *lookingSpeed );
QINLINE static void G_G2NPCAngles( gentity_t *ent, matrix3_t legs, vec3_t angles );
QINLINE static void G_G2PlayerAngles( gentity_t *ent, matrix3_t legs, vec3_t legsAngles );
QINLINE static qboolean SaberAttacking( gentity_t *self );
int G_SaberLockAnim( int attackerSaberStyle, int defenderSaberStyle, int topOrSide, int lockOrBreakOrSuperBreak, int winOrLose );
QINLINE static qboolean WP_SabersCheckLock2( gentity_t *attacker, gentity_t *defender, sabersLockMode_t lockMode );
qboolean WP_SabersCheckLock( gentity_t *ent1, gentity_t *ent2 );
QINLINE static int G_GetParryForBlock( int block );
QINLINE static qboolean WP_GetSaberDeflectionAngle( gentity_t *attacker, gentity_t *defender, float saberHitFraction );
int G_KnockawayForParry( int move );
QINLINE static int G_GetAttackDamage( gentity_t *self, int minDmg, int maxDmg, float multPoint );
QINLINE static float G_GetAnimPoint( gentity_t *self );
QINLINE static qboolean G_ClientIdleInWorld( gentity_t *ent );
QINLINE static qboolean G_G2TraceCollide( trace_t *tr, vec3_t lastValidStart, vec3_t lastValidEnd, vec3_t traceMins, vec3_t traceMaxs );
QINLINE static qboolean G_SaberInBackAttack( int move );
QINLINE static void G_BuildSaberFaces( vec3_t base, vec3_t tip, float radius, vec3_t fwd, vec3_t right, int *fNum, saberFace_t **fList );
QINLINE static void G_SabCol_CalcPlaneEq( vec3_t x, vec3_t y, vec3_t z, float *planeEq );
QINLINE static int G_SabCol_PointRelativeToPlane( vec3_t pos, float *side, float *planeEq );
QINLINE static qboolean G_SaberFaceCollisionCheck( int fNum, saberFace_t *fList, vec3_t atkStart, vec3_t atkEnd, vec3_t atkMins, vec3_t atkMaxs, vec3_t impactPoint );
QINLINE static qboolean G_SaberCollide( gentity_t *atk, gentity_t *def, vec3_t atkStart, vec3_t atkEnd, vec3_t atkMins, vec3_t atkMaxs, vec3_t impactPoint );
float WP_SaberBladeLength( saberInfo_t *saber );
float WP_SaberLength( gentity_t *ent );
int WPDEBUG_SaberColor( saber_colors_t saberColor );
qboolean WP_SabersIntersect( gentity_t *ent1, int ent1SaberNum, int ent1BladeNum, gentity_t *ent2, qboolean checkDir );
QINLINE static int G_PowerLevelForSaberAnim( gentity_t *ent, int saberNum, qboolean mySaberHit );
void WP_SaberClearDamage();
void WP_SaberDamageAdd( int trVictimEntityNum, vec3_t trDmgDir, vec3_t trDmgSpot, int trDmg, qboolean doDismemberment, int knockBackFlags );
void WP_SaberApplyDamage( gentity_t *self );
void WP_SaberDoHit( gentity_t *self, int saberNum, int bladeNum );
void WP_SaberRadiusDamage( gentity_t *ent, vec3_t point, float radius, int damage, float knockBack );
void WP_SaberDoClash( gentity_t *self, int saberNum, int bladeNum );
void WP_SaberBounceSound( gentity_t *ent, int saberNum, int bladeNum );
QINLINE static qboolean CheckSaberDamage( gentity_t *self, int rSaberNum, int rBladeNum, vec3_t saberStart, vec3_t saberEnd, qboolean doInterpolate, int trMask, qboolean extrapolate );
void G_SPSaberDamageTraceLerped( gentity_t *self, int saberNum, int bladeNum, vec3_t baseNew, vec3_t endNew, int clipmask );
void WP_SaberStartMissileBlockCheck( gentity_t *self, usercmd_t *ucmd );
QINLINE static qboolean CheckThrownSaberDamaged( gentity_t *saberent, gentity_t *saberOwner, gentity_t *ent, int dist, int returning, qboolean noDCheck );
QINLINE static void saberCheckRadiusDamage( gentity_t *saberent, int returning );
QINLINE static void saberMoveBack( gentity_t *ent, qboolean goingBack );
void SaberBounceSound( gentity_t *self, gentity_t *other, trace_t *trace );
void DeadSaberThink( gentity_t *saberent );
void MakeDeadSaber( gentity_t *ent );
void DownedSaberThink( gentity_t *saberent );
void saberReactivate( gentity_t *saberent, gentity_t *saberOwner );
void saberKnockDown( gentity_t *saberent, gentity_t *saberOwner, gentity_t *other );
void WP_SaberRemoveG2Model( gentity_t *saberent );
void WP_SaberAddG2Model( gentity_t *saberent, const char *saberModel, qhandle_t saberSkin );
qboolean saberKnockOutOfHand( gentity_t *saberent, gentity_t *saberOwner, vec3_t velocity );
qboolean saberCheckKnockdown_DuelLoss( gentity_t *saberent, gentity_t *saberOwner, gentity_t *other );
qboolean saberCheckKnockdown_BrokenParry( gentity_t *saberent, gentity_t *saberOwner, gentity_t *other );
qboolean saberCheckKnockdown_Smashed( gentity_t *saberent, gentity_t *saberOwner, gentity_t *other, int damage );
qboolean saberCheckKnockdown_Thrown( gentity_t *saberent, gentity_t *saberOwner, gentity_t *other );
void saberBackToOwner( gentity_t *saberent );
void thrownSaberTouch( gentity_t *saberent, gentity_t *other, trace_t *trace );
void saberFirstThrown( gentity_t *saberent );
void UpdateClientRenderBolts( gentity_t *self, vec3_t renderOrigin, vec3_t renderAngles );
void UpdateClientRenderinfo( gentity_t *self, vec3_t renderOrigin, vec3_t renderAngles );
static qboolean G_KickDownable( gentity_t *ent );
static void G_TossTheMofo( gentity_t *ent, vec3_t tossDir, float tossStr );
static gentity_t *G_KickTrace( gentity_t *ent, vec3_t kickDir, float kickDist, vec3_t kickEnd, int kickDamage, float kickPush );
static void G_KickSomeMofos( gentity_t *ent );
QINLINE static qboolean G_PrettyCloseIGuess( float a, float b, float tolerance );
static void G_GrabSomeMofos( gentity_t *self );
void WP_SaberPositionUpdate( gentity_t *self, usercmd_t *ucmd );
int WP_MissileBlockForBlock( int saberBlock );
void WP_SaberBlockNonRandom( gentity_t *self, vec3_t hitloc, qboolean missileBlock );
void WP_SaberBlock( gentity_t *playerent, vec3_t hitloc, qboolean missileBlock );
int WP_SaberCanBlock( gentity_t *self, vec3_t point, int dflags, int mod, qboolean projectile, int attackStr );
qboolean HasSetSaberOnly();
