void Vehicle_SetAnim( gentity_t *ent, int setAnimParts, int anim, int setAnimFlags, int iBlend );
void G_VehicleTrace( trace_t *results, const vec3_t start, const vec3_t tMins, const vec3_t tMaxs, const vec3_t end, int passEntityNum, int contentmask );
Vehicle_t *G_IsRidingVehicle( gentity_t *pEnt );
float G_CanJumpToEnemyVeh( Vehicle_t *pVeh, const usercmd_t *pUcmd );
void G_VehicleSpawn( gentity_t *self );
void G_AttachToVehicle( gentity_t *pEnt, usercmd_t **ucmd );
void Animate( Vehicle_t *pVeh );
qboolean ValidateBoard( Vehicle_t *pVeh, bgEntity_t *pEnt );
void FighterStorePilotViewAngles( Vehicle_t *pVeh, bgEntity_t *parent );
qboolean Board( Vehicle_t *pVeh, bgEntity_t *pEnt );
qboolean VEH_TryEject( Vehicle_t *pVeh, gentity_t *parent, gentity_t *ent, int ejectDir, vec3_t vExitPos );
void G_EjectDroidUnit( Vehicle_t *pVeh, qboolean kill );
qboolean Eject( Vehicle_t *pVeh, bgEntity_t *pEnt, qboolean forceEject );
qboolean EjectAll( Vehicle_t *pVeh );
static void StartDeathDelay( Vehicle_t *pVeh, int iDelayTimeOverride );
static void DeathUpdate( Vehicle_t *pVeh );
void RegisterAssets( Vehicle_t *pVeh );
qboolean Initialize( Vehicle_t *pVeh );
static qboolean Update( Vehicle_t *pVeh, const usercmd_t *pUmcd );
static qboolean UpdateRider( Vehicle_t *pVeh, bgEntity_t *pRider, usercmd_t *pUmcd );
static void AttachRiders( Vehicle_t *pVeh );
static void Ghost( Vehicle_t *pVeh, bgEntity_t *pEnt );
static void UnGhost( Vehicle_t *pVeh, bgEntity_t *pEnt );
void G_VehicleDamageBoxSizing( Vehicle_t *pVeh );
int G_FlyVehicleImpactDir( gentity_t *veh, trace_t *trace );
int G_ShipSurfaceForSurfName( const char *surfaceName );
void G_SetVehDamageFlags( gentity_t *veh, int shipSurf, int damageLevel );
void G_VehicleSetDamageLocFlags( gentity_t *veh, int impactDir, int deathPoint );
qboolean G_FlyVehicleDestroySurface( gentity_t *veh, int surface );
void G_FlyVehicleSurfaceDestruction( gentity_t *veh, trace_t *trace, int magnitude, qboolean force );
void G_VehUpdateShields( gentity_t *targ );
void _SetParent( Vehicle_t *pVeh, bgEntity_t *pParentEntity );
void SetPilot( Vehicle_t *pVeh, bgEntity_t *pPilot );
qboolean AddPassenger( Vehicle_t *pVeh );
qboolean Inhabited( Vehicle_t *pVeh );
void G_SetSharedVehicleFunctions( vehicleInfo_t *pVehInfo );
