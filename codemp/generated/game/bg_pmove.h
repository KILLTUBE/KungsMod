bgEntity_t *PM_BGEntForNum( int num );
qboolean BG_SabersOff( playerState_t *ps );
qboolean BG_KnockDownable( playerState_t *ps );
QINLINE static qboolean PM_IsRocketTrooper();
int PM_GetSaberStance();
qboolean PM_DoSlowFall();
void PM_pitch_roll_for_slope( bgEntity_t *forwhom, vec3_t pass_slope, vec3_t storeAngles );
void PM_SetSpecialMoveValues();
static void PM_SetVehicleAngles( vec3_t normal );
void BG_VehicleTurnRateForSpeed( Vehicle_t *pVeh, float speed, float *mPitchOverride, float *mYawOverride );
void PM_HoverTrace();
void PM_AddEvent( int newEvent );
void PM_AddEventWithParm( int newEvent, int parm );
void PM_AddTouchEnt( int entityNum );
void PM_ClipVelocity( vec3_t in, vec3_t normal, vec3_t out, float overbounce );
static void PM_Friction();
static void PM_Accelerate( vec3_t wishdir, float wishspeed, float accel );
static float PM_CmdScale( usercmd_t *cmd );
static void PM_SetMovementDir();
qboolean PM_ForceJumpingUp();
static void PM_JumpForDir();
void PM_SetPMViewAngle( playerState_t *ps, vec3_t angle, usercmd_t *ucmd );
qboolean PM_AdjustAngleForWallRun( playerState_t *ps, usercmd_t *ucmd, qboolean doMove );
qboolean PM_AdjustAnglesForWallRunUpFlipAlt( usercmd_t *ucmd );
qboolean PM_AdjustAngleForWallRunUp( playerState_t *ps, usercmd_t *ucmd, qboolean doMove );
static float BG_ForceWallJumpStrength();
qboolean PM_AdjustAngleForWallJump( playerState_t *ps, usercmd_t *ucmd, qboolean doMove );
void PM_SetForceJumpZStart( float value );
void PM_GrabWallForJump( int anim );
static qboolean PM_CheckJump();
static qboolean PM_CheckWaterJump();
static void PM_WaterJumpMove();
static void PM_WaterMove();
static void PM_FlyVehicleMove();
static void PM_FlyMove();
static void PM_AirMove();
static void PM_WalkMove();
static void PM_DeadMove();
static void PM_NoclipMove();
static int PM_FootstepForSurface();
static int PM_TryRoll();
static void PM_CrashLandEffect();
static void PM_CrashLand();
static int PM_CorrectAllSolid( trace_t *trace );
static void PM_GroundTraceMissed();
static void PM_GroundTrace();
static void PM_SetWaterLevel();
qboolean PM_CheckDualForwardJumpDuck();
void PM_CheckFixMins();
static qboolean PM_CanStand();
static void PM_CheckDuck();
void PM_Use();
qboolean PM_WalkingAnim( int anim );
qboolean PM_RunningAnim( int anim );
qboolean PM_SwimmingAnim( int anim );
qboolean PM_RollingAnim( int anim );
void PM_AnglesForSlope( const float yaw, const vec3_t slope, vec3_t angles );
void PM_FootSlopeTrace( float *pDiff, float *pInterval );
qboolean BG_InSlopeAnim( int anim );
qboolean PM_AdjustStandAnimForSlope();
int PM_LegsSlopeBackTransition( int desiredAnim );
static void PM_Footsteps();
static void PM_WaterEvents();
void BG_ClearRocketLock( playerState_t *ps );
void PM_BeginWeaponChange( int weapon );
void PM_FinishWeaponChange();
int BG_VehTraceFromCamPos( trace_t *camTrace, bgEntity_t *bgEnt, const vec3_t entOrg, const vec3_t shotStart, const vec3_t end, vec3_t newEnd, vec3_t shotDir, float bestDist );
void PM_RocketLock( float lockDist, qboolean vehicleLock );
static qboolean PM_DoChargedWeapons( qboolean vehicleRocketLock, bgEntity_t *veh );
int PM_ItemUsable( playerState_t *ps, int forcedUse );
qboolean PM_CanSetWeaponAnims();
void PM_VehicleWeaponAnimate();
static void PM_Weapon();
static void PM_Animate();
static void PM_DropTimers();
qboolean BG_UnrestrainedPitchRoll( playerState_t *ps, Vehicle_t *pVeh );
void PM_UpdateViewAngles( playerState_t *ps, const usercmd_t *cmd );
void PM_AdjustAttackStates( pmove_t *pmove );
void BG_CmdForRoll( playerState_t *ps, int anim, usercmd_t *pCmd );
void BG_AdjustClientSpeed( playerState_t *ps, usercmd_t *cmd, int svTime );
qboolean BG_InRollAnim( entityState_t *cent );
qboolean BG_InKnockDown( int anim );
qboolean BG_InRollES( entityState_t *ps, int anim );
void BG_IK_MoveArm( void *ghoul2, int lHandBolt, int time, entityState_t *ent, int basePose, vec3_t desiredPos, qboolean *ikInProgress, vec3_t origin, vec3_t angles, vec3_t scale, int blendTime, qboolean forceHalt );
void BG_UpdateLookAngles( int lookingDebounceTime, vec3_t lastHeadAngles, int time, vec3_t lookAngles, float lookSpeed, float minPitch, float maxPitch, float minYaw, float maxYaw, float minRoll, float maxRoll );
static void BG_G2ClientNeckAngles( void *ghoul2, int time, const vec3_t lookAngles, vec3_t headAngles, vec3_t neckAngles, vec3_t thoracicAngles, vec3_t headClampMinAngles, vec3_t headClampMaxAngles );
static void BG_G2ClientSpineAngles( void *ghoul2, int motionBolt, vec3_t cent_lerpOrigin, vec3_t cent_lerpAngles, entityState_t *cent, int time, vec3_t viewAngles, int ciLegs, int ciTorso, const vec3_t angles, vec3_t thoracicAngles, vec3_t ulAngles, vec3_t llAngles, vec3_t modelScale, float *tPitchAngle, float *tYawAngle, int *corrTime );
static float BG_SwingAngles( float destination, float swingTolerance, float clampTolerance, float speed, float *angle, qboolean *swinging, int frametime );
qboolean BG_InRoll2( entityState_t *es );
void BG_G2PlayerAngles( void *ghoul2, int motionBolt, entityState_t *cent, int time, vec3_t cent_lerpOrigin, vec3_t cent_lerpAngles, matrix3_t legs, vec3_t legsAngles, qboolean *tYawing, qboolean *tPitching, qboolean *lYawing, float *tYawAngle, float *tPitchAngle, float *lYawAngle, int frametime, vec3_t turAngles, vec3_t modelScale, int ciLegs, int ciTorso, int *corrTime, vec3_t lookAngles, vec3_t lastHeadAngles, int lookTime, entityState_t *emplaced, int *crazySmoothFactor );
void BG_G2ATSTAngles( void *ghoul2, int time, vec3_t cent_lerpAngles );
static qboolean PM_AdjustAnglesForDualJumpAttack( playerState_t *ps, usercmd_t *ucmd );
QINLINE static void PM_CmdForSaberMoves( usercmd_t *ucmd );
void PM_VehicleViewAngles( playerState_t *ps, bgEntity_t *veh, usercmd_t *ucmd );
qboolean PM_WeaponOkOnVehicle( int weapon );
int PM_GetOkWeaponForVehicle();
void PM_VehForcedTurning( bgEntity_t *veh );
void PM_VehFaceHyperspacePoint( bgEntity_t *veh );
void PM_VehFaceHyperspacePoint( bgEntity_t *veh );
void BG_VehicleAdjustBBoxForOrientation( Vehicle_t *veh, vec3_t origin, vec3_t mins, vec3_t maxs, int clientNum, int tracemask, void *trace_t, const vec3_t start, const vec3_t mins, const vec3_t maxs, const vec3_t end, int passEntityNum, int contentMask );
void PM_MoveForKata( usercmd_t *ucmd );
void PmoveSingle( pmove_t *pmove );
void Pmove( pmove_t *pmove );
