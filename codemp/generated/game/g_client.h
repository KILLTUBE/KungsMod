CCALL qboolean isGame();
CCALL qboolean isCGame();
CCALL qboolean isUI();
void SP_info_player_duel( gentity_t *ent );
void SP_info_player_duel1( gentity_t *ent );
void SP_info_player_duel2( gentity_t *ent );
void SP_info_player_deathmatch( gentity_t *ent );
void SP_info_player_start( gentity_t *ent );
void SP_info_player_start_red( gentity_t *ent );
void SP_info_player_start_blue( gentity_t *ent );
void SiegePointUse( gentity_t *self, gentity_t *other, gentity_t *activator );
void SP_info_player_siegeteam1( gentity_t *ent );
void SP_info_player_siegeteam2( gentity_t *ent );
void SP_info_player_intermission( gentity_t *ent );
void SP_info_player_intermission_red( gentity_t *ent );
void SP_info_player_intermission_blue( gentity_t *ent );
void ThrowSaberToAttacker( gentity_t *self, gentity_t *attacker );
void JMSaberThink( gentity_t *ent );
void JMSaberTouch( gentity_t *self, gentity_t *other, trace_t *trace );
void SP_info_jedimaster_start( gentity_t *ent );
qboolean SpotWouldTelefrag( gentity_t *spot );
qboolean SpotWouldTelefrag2( gentity_t *mover, vec3_t dest );
gentity_t *SelectNearestDeathmatchSpawnPoint( vec3_t from );
gentity_t *SelectRandomDeathmatchSpawnPoint( qboolean isbot );
gentity_t *SelectRandomFurthestSpawnPoint( vec3_t avoidPoint, vec3_t origin, vec3_t angles, team_t team, qboolean isbot );
gentity_t *SelectDuelSpawnPoint( int team, vec3_t avoidPoint, vec3_t origin, vec3_t angles, qboolean isbot );
gentity_t *SelectSpawnPoint( vec3_t avoidPoint, vec3_t origin, vec3_t angles, team_t team, qboolean isbot );
gentity_t *SelectInitialSpawnPoint( vec3_t origin, vec3_t angles, team_t team, qboolean isbot );
gentity_t *SelectSpectatorSpawnPoint( vec3_t origin, vec3_t angles );
void InitBodyQue();
void BodySink( gentity_t *ent );
static qboolean CopyToBodyQue( gentity_t *ent );
void SetClientViewAngle( gentity_t *ent, vec3_t angle );
void MaintainBodyQueue( gentity_t *ent );
void ClientRespawn( gentity_t *ent );
int TeamCount( int ignoreClientNum, team_t team );
int TeamLeader( int team );
team_t PickTeam( int ignoreClientNum );
static void ClientCleanName( const char *in, char *out, int outSize );
void G_DebugWrite( const char *path, const char *text );
qboolean G_SaberModelSetup( gentity_t *ent );
void SetupGameGhoul2Model( gentity_t *ent, char *modelname, char *skinName );
void Svcmd_ToggleUserinfoValidation_f();
char *G_ValidateUserinfo( const char *userinfo );
qboolean ClientUserinfoChanged( int clientNum );
static qboolean CompareIPs( const char *ip1, const char *ip2 );
char *ClientConnect( int clientNum, qboolean firstTime, qboolean isBot );
void ClientBegin( int clientNum, qboolean allowTeamReset );
static qboolean AllForceDisabled( int force );
void G_BreakArm( gentity_t *ent, int arm );
void G_UpdateClientAnims( gentity_t *self, float animSpeedScale );
void ClientSpawn( gentity_t *ent );
void G_ClearVote( gentity_t *ent );
void G_ClearTeamVote( gentity_t *ent, int team );
void ClientDisconnect( int clientNum );
