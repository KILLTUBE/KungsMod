void DeathmatchScoreboardMessage( gentity_t *ent );
void Cmd_Score_f( gentity_t *ent );
char *ConcatArgs( int start );
qboolean StringIsInteger( const char *s );
int ClientNumberFromString( gentity_t *to, const char *s, qboolean allowconnecting );
void G_Give( gentity_t *ent, const char *name, const char *args, int argc );
void Cmd_Give_f( gentity_t *ent );
void Cmd_GiveOther_f( gentity_t *ent );
void Cmd_God_f( gentity_t *ent );
void Cmd_Notarget_f( gentity_t *ent );
void Cmd_Noclip_f( gentity_t *ent );
void Cmd_LevelShot_f( gentity_t *ent );
void Cmd_TeamTask_f( gentity_t *ent );
void G_Kill( gentity_t *ent );
void Cmd_Kill_f( gentity_t *ent );
void Cmd_KillOther_f( gentity_t *ent );
void BroadcastTeamChange( gclient_t *client, int oldTeam );
qboolean G_PowerDuelCheckFail( gentity_t *ent );
void SetTeam( gentity_t *ent, char *s );
void StopFollowing( gentity_t *ent );
void Cmd_Team_f( gentity_t *ent );
void Cmd_DuelTeam_f( gentity_t *ent );
int G_TeamForSiegeClass( const char *clName );
void Cmd_SiegeClass_f( gentity_t *ent );
void Cmd_ForceChanged_f( gentity_t *ent );
qboolean G_SetSaber( gentity_t *ent, int saberNum, char *saberName, qboolean siegeOverride );
void Cmd_Follow_f( gentity_t *ent );
void Cmd_FollowCycle_f( gentity_t *ent, int dir );
void Cmd_FollowNext_f( gentity_t *ent );
void Cmd_FollowPrev_f( gentity_t *ent );
static void G_SayTo( gentity_t *ent, gentity_t *other, int mode, int color, const char *name, const char *message, char *locMsg );
void G_Say( gentity_t *ent, gentity_t *target, int mode, const char *chatText );
static void Cmd_Say_f( gentity_t *ent );
static void Cmd_SayTeam_f( gentity_t *ent );
static void Cmd_Tell_f( gentity_t *ent );
static void Cmd_VoiceCommand_f( gentity_t *ent );
void Cmd_GameCommand_f( gentity_t *ent );
void Cmd_Where_f( gentity_t *ent );
qboolean G_VoteCapturelimit( gentity_t *ent, int numArgs, const char *arg1, const char *arg2 );
qboolean G_VoteClientkick( gentity_t *ent, int numArgs, const char *arg1, const char *arg2 );
qboolean G_VoteFraglimit( gentity_t *ent, int numArgs, const char *arg1, const char *arg2 );
qboolean G_VoteGametype( gentity_t *ent, int numArgs, const char *arg1, const char *arg2 );
qboolean G_VoteKick( gentity_t *ent, int numArgs, const char *arg1, const char *arg2 );
void Cmd_MapList_f( gentity_t *ent );
qboolean G_VoteMap( gentity_t *ent, int numArgs, const char *arg1, const char *arg2 );
qboolean G_VoteMapRestart( gentity_t *ent, int numArgs, const char *arg1, const char *arg2 );
qboolean G_VoteNextmap( gentity_t *ent, int numArgs, const char *arg1, const char *arg2 );
qboolean G_VoteTimelimit( gentity_t *ent, int numArgs, const char *arg1, const char *arg2 );
qboolean G_VoteWarmup( gentity_t *ent, int numArgs, const char *arg1, const char *arg2 );
void Svcmd_ToggleAllowVote_f();
void Cmd_CallVote_f( gentity_t *ent );
void Cmd_Vote_f( gentity_t *ent );
qboolean G_TeamVoteLeader( gentity_t *ent, int cs_offset, team_t team, int numArgs, const char *arg1, const char *arg2 );
void Cmd_CallTeamVote_f( gentity_t *ent );
void Cmd_TeamVote_f( gentity_t *ent );
void Cmd_SetViewpos_f( gentity_t *ent );
void G_LeaveVehicle( gentity_t *ent, qboolean ConCheck );
int G_ItemUsable( playerState_t *ps, int forcedUse );
void Cmd_ToggleSaber_f( gentity_t *ent );
void Cmd_SaberAttackCycle_f( gentity_t *ent );
qboolean G_OtherPlayersDueling();
void Cmd_EngageDuel_f( gentity_t *ent );
void Cmd_DebugSetSaberMove_f( gentity_t *self );
void Cmd_DebugSetBodyAnim_f( gentity_t *self );
void StandardSetBodyAnim( gentity_t *self, int anim, int flags );
qboolean TryGrapple( gentity_t *ent );
void Cmd_TargetUse_f( gentity_t *ent );
void Cmd_TheDestroyer_f( gentity_t *ent );
void Cmd_BotMoveForward_f( gentity_t *ent );
void Cmd_BotMoveBack_f( gentity_t *ent );
void Cmd_BotMoveRight_f( gentity_t *ent );
void Cmd_BotMoveLeft_f( gentity_t *ent );
void Cmd_BotMoveUp_f( gentity_t *ent );
void Cmd_AddBot_f( gentity_t *ent );
int cmdcmp( const void *a, const void *b );
void ClientCommand( int clientNum );
