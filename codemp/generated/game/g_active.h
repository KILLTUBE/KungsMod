void P_SetTwitchInfo( gclient_t *client );
void P_DamageFeedback( gentity_t *player );
void P_WorldEffects( gentity_t *ent );
void DoImpact( gentity_t *self, gentity_t *other, qboolean damageSelf );
void Client_CheckImpactBBrush( gentity_t *self, gentity_t *other );
void G_SetClientSound( gentity_t *ent );
void ClientImpacts( gentity_t *ent, pmove_t *pmove );
void G_TouchTriggers( gentity_t *ent );
void G_MoverTouchPushTriggers( gentity_t *ent, vec3_t oldOrg );
static void SV_PMTrace( trace_t *results, const vec3_t start, const vec3_t mins, const vec3_t maxs, const vec3_t end, int passEntityNum, int contentMask );
void SpectatorThink( gentity_t *ent, usercmd_t *ucmd );
qboolean ClientInactivityTimer( gclient_t *client );
void ClientTimerActions( gentity_t *ent, int msec );
void ClientIntermissionThink( gclient_t *client );
void G_VehicleAttachDroidUnit( gentity_t *vehEnt );
void G_CheapWeaponFire( int entNum, int ev );
void ClientEvents( gentity_t *ent, int oldEventSequence );
void SendPendingPredictableEvents( playerState_t *ps );
void G_UpdateClientBroadcasts( gentity_t *self );
void G_AddPushVecToUcmd( gentity_t *self, usercmd_t *ucmd );
qboolean G_StandingAnim( int anim );
qboolean G_ActionButtonPressed( int buttons );
void G_CheckClientIdle( gentity_t *ent, usercmd_t *ucmd );
void NPC_Accelerate( gentity_t *ent, qboolean fullWalkAcc, qboolean fullRunAcc );
static int NPC_GetWalkSpeed( gentity_t *ent );
static int NPC_GetRunSpeed( gentity_t *ent );
void G_CheckMovingLoopingSounds( gentity_t *ent, usercmd_t *ucmd );
void G_HeldByMonster( gentity_t *ent, usercmd_t *ucmd );
void G_SetTauntAnim( gentity_t *ent, int taunt );
void ClientThink_real( gentity_t *ent );
void G_CheckClientTimeouts( gentity_t *ent );
void ClientThink( int clientNum, usercmd_t *ucmd );
void G_RunClient( gentity_t *ent );
void SpectatorClientEndFrame( gentity_t *ent );
void ClientEndFrame( gentity_t *ent );
