void ObjectDie( gentity_t *self, gentity_t *inflictor, gentity_t *attacker, int damage, int meansOfDeath );
qboolean G_HeavyMelee( gentity_t *attacker );
int G_GetHitLocation( gentity_t *target, vec3_t ppoint );
void ExplodeDeath( gentity_t *self );
void ScorePlum( gentity_t *ent, vec3_t origin, int score );
void AddScore( gentity_t *ent, vec3_t origin, int score );
void TossClientWeapon( gentity_t *self, vec3_t direction, float speed );
void TossClientItems( gentity_t *self );
void LookAtKiller( gentity_t *self, gentity_t *inflictor, gentity_t *attacker );
void GibEntity( gentity_t *self, int killer );
void BodyRid( gentity_t *ent );
void body_die( gentity_t *self, gentity_t *inflictor, gentity_t *attacker, int damage, int meansOfDeath );
void CheckAlmostCapture( gentity_t *self, gentity_t *attacker );
qboolean G_InKnockDown( playerState_t *ps );
static int G_CheckSpecialDeathAnim( gentity_t *self, vec3_t point, int damage, int mod, int hitLoc );
int G_PickDeathAnim( gentity_t *self, vec3_t point, int damage, int mod, int hitLoc );
gentity_t *G_GetJediMaster();
void G_AlertTeam( gentity_t *victim, gentity_t *attacker, float radius, float soundDist );
void G_DeathAlert( gentity_t *victim, gentity_t *attacker );
void DeathFX( gentity_t *ent );
void G_CheckVictoryScript( gentity_t *self );
void G_AddPowerDuelScore( int team, int score );
void G_AddPowerDuelLoserScore( int team, int score );
void player_die( gentity_t *self, gentity_t *inflictor, gentity_t *attacker, int damage, int meansOfDeath );
int CheckArmor( gentity_t *ent, int damage, int dflags );
void G_ApplyKnockback( gentity_t *targ, vec3_t newDir, float knockback );
int RaySphereIntersections( vec3_t origin, float radius, vec3_t point, vec3_t dir, vec3_t intersections[2] );
void G_GetDismemberLoc( gentity_t *self, vec3_t boltPoint, int limbType );
void G_GetDismemberBolt( gentity_t *self, vec3_t boltPoint, int limbType );
void LimbTouch( gentity_t *self, gentity_t *other, trace_t *trace );
void LimbThink( gentity_t *ent );
void G_Dismember( gentity_t *ent, gentity_t *enemy, vec3_t point, int limbType, float limbRollBase, float limbPitchBase, int deathAnim, qboolean postDeath );
void DismembermentTest( gentity_t *self );
void DismembermentByNum( gentity_t *self, int num );
int G_GetHitQuad( gentity_t *self, vec3_t hitloc );
qboolean G_GetHitLocFromSurfName( gentity_t *ent, const char *surfName, int *hitLoc, vec3_t point, vec3_t dir, vec3_t bladeDir, int mod );
void G_CheckForDismemberment( gentity_t *ent, gentity_t *enemy, vec3_t point, int damage, int deathAnim, qboolean postDeath );
void G_LocationBasedDamageModifier( gentity_t *ent, vec3_t point, int mod, int dflags, int *damage );
qboolean G_ThereIsAMaster();
void G_Knockdown( gentity_t *victim );
void G_Damage( gentity_t *targ, gentity_t *inflictor, gentity_t *attacker, vec3_t dir, vec3_t point, int damage, int dflags, int mod );
qboolean CanDamage( gentity_t *targ, vec3_t origin );
qboolean G_RadiusDamage( vec3_t origin, gentity_t *attacker, float damage, float radius, gentity_t *ignore, gentity_t *missile, int mod );
