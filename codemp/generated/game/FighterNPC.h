qboolean BG_FighterUpdate( Vehicle_t *pVeh, const usercmd_t *pUcmd, vec3_t trMins, vec3_t trMaxs, float gravity, void *trace_t, const vec3_t start, const vec3_t lmins, const vec3_t lmaxs, const vec3_t end, int passEntityNum, int contentMask );
static qboolean Update( Vehicle_t *pVeh, const usercmd_t *pUcmd );
static qboolean Board( Vehicle_t *pVeh, bgEntity_t *pEnt );
static qboolean Eject( Vehicle_t *pVeh, bgEntity_t *pEnt, qboolean forceEject );
static float PredictedAngularDecrement( float scale, float timeMod, float originalAngle );
qboolean FighterIsInSpace( gentity_t *gParent );
qboolean FighterOverValidLandingSurface( Vehicle_t *pVeh );
qboolean FighterIsLanded( Vehicle_t *pVeh, playerState_t *parentPS );
qboolean FighterIsLanding( Vehicle_t *pVeh, playerState_t *parentPS );
qboolean FighterIsLaunching( Vehicle_t *pVeh, playerState_t *parentPS );
qboolean FighterSuspended( Vehicle_t *pVeh, playerState_t *parentPS );
static void ProcessMoveCommands( Vehicle_t *pVeh );
static void FighterWingMalfunctionCheck( Vehicle_t *pVeh, playerState_t *parentPS );
static void FighterNoseMalfunctionCheck( Vehicle_t *pVeh, playerState_t *parentPS );
static void FighterDamageRoutine( Vehicle_t *pVeh, bgEntity_t *parent, playerState_t *parentPS, playerState_t *riderPS, qboolean isDead );
void FighterRollAdjust( Vehicle_t *pVeh, playerState_t *riderPS, playerState_t *parentPS );
void FighterYawAdjust( Vehicle_t *pVeh, playerState_t *riderPS, playerState_t *parentPS );
void FighterPitchAdjust( Vehicle_t *pVeh, playerState_t *riderPS, playerState_t *parentPS );
void FighterYawAdjust( Vehicle_t *pVeh, playerState_t *riderPS, playerState_t *parentPS );
void FighterPitchAdjust( Vehicle_t *pVeh, playerState_t *riderPS, playerState_t *parentPS );
void FighterPitchClamp( Vehicle_t *pVeh, playerState_t *riderPS, playerState_t *parentPS, int curTime );
static void ProcessOrientCommands( Vehicle_t *pVeh );
static void AnimateVehicle( Vehicle_t *pVeh );
static void AnimateRiders( Vehicle_t *pVeh );
void G_SetFighterVehicleFunctions( vehicleInfo_t *pVehInfo );
void G_CreateFighterNPC( Vehicle_t **pVeh, const char *strType );
