qboolean CG_NoUseableForce();
int C_PointContents();
void C_GetLerpOrigin();
void C_GetLerpData();
void C_Trace();
void C_G2Trace();
void C_G2Mark();
static void CG_DebugBoxLines( vec3_t mins, vec3_t maxs, int duration );
int CG_RagCallback();
static void C_ImpactMark();
void CG_MiscEnt();
int CG_CrosshairPlayer();
int CG_LastAttacker();
const char *CG_Argv();
static void CG_RegisterItemSounds();
static void CG_AS_Register();
void CG_ParseWeatherEffect( const char *str );
void CG_ParseSiegeState( const char *str );
static void CG_RegisterSounds();
static void CG_RegisterEffects();
static void CG_RegisterGraphics();
const char *CG_GetStringEdString( char *refSection, char *refName );
void CG_SiegeCountCvars();
void CG_BuildSpectatorString();
static void CG_RegisterClients();
const char *CG_ConfigString();
void CG_StartMusic();
char *CG_GetMenuBuffer( const char *filename );
qboolean CG_Asset_Parse();
void CG_ParseMenu( const char *menuFile );
qboolean CG_Load_Menu( const char **p );
static qboolean CG_OwnerDrawHandleKey( int ownerDraw, int flags, float *special, int key );
static int CG_FeederCount();
void CG_SetScoreSelection( void *p );
static clientInfo_t *CG_InfoFromScoreIndex( int index, int team, int *scoreIndex );
const static char *CG_FeederItemText( float feederID, int index, int column, qhandle_t *handle1, qhandle_t *handle2, qhandle_t *handle3 );
static qhandle_t CG_FeederItemImage( float feederID, int index );
static qboolean CG_FeederSelection( float feederID, int index, itemDef_t *item );
static float CG_Cvar_Get( const char *cvar );
void CG_Text_PaintWithCursor( float x, float y, float scale, vec4_t color, const char *text, int cursorPos, char cursor, int limit, int style, int iMenuFont );
static int CG_OwnerDrawWidth( int ownerDraw, float scale );
static int CG_PlayCinematic( const char *name, float x, float y, float w, float h );
static void CG_StopCinematic();
static void CG_DrawCinematic( int handle, float x, float y, float w, float h );
static void CG_RunCinematicFrame();
void CG_LoadMenus( const char *menuFile );
void CG_LoadHudMenu();
void CG_AssetCache();
void CG_Init_CG();
void CG_Init_CGents();
void CG_InitItems();
void CG_TransitionPermanent();
void CG_Init( int serverMessageNum, int serverCommandSequence, int clientNum );
const char *CG_GetLocationString( const char *loc );
void CG_DestroyAllGhoul2();
void CG_Shutdown();
void CG_NextForcePower_f();
void CG_PrevForcePower_f();
void CG_NextInventory_f();
void CG_PrevInventory_f();
void _CG_MouseEvent( int x, int y );
qboolean CG_IncomingConsoleCommand();
void CG_GetOrigin( int entID, vec3_t out );
void CG_GetAngles( int entID, vec3_t out );
trajectory_t *CG_GetOriginTrajectory();
trajectory_t *CG_GetAngleTrajectory();
void _CG_ROFF_NotetrackCallback( int entID, const char *notetrack );
void CG_MapChange();
void CG_AutomapInput();
void CG_FX_CameraShake();
