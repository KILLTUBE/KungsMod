#pragma once

#include "../game/g_local.h"

EXTERNC qboolean gDuelExit;
EXTERNC gclient_t g_clients[MAX_CLIENTS];
EXTERNC gentity_t g_entities[MAX_GENTITIES];
EXTERNC int killPlayerTimer;
EXTERNC int fatalErrors;
EXTERNC int eventClearTime;
EXTERNC level_locals_t level;
EXTERNC cg_t cg;
EXTERNC int gSiegeRoundWinningTeam;
EXTERNC qboolean gSiegeRoundEnded;
EXTERNC qboolean gSiegeRoundBegun;
EXTERNC siegePers_t g_siegePersistant;
EXTERNC qboolean gDidDuelStuff;
EXTERNC int g_duelPrintTimer;
EXTERNC int gSlowMoDuelTime;
EXTERNC int g_TimeSinceLastFrame;
EXTERNC int g_LastFrameTime;
EXTERNC int g_siegeRespawnCheck;
EXTERNC qboolean g_dontFrickinCheck;
EXTERNC int gQueueScoreMessageTime;
EXTERNC qboolean g_noPDuelCheck;
EXTERNC qboolean gQueueScoreMessage;
EXTERNC qboolean g_duelAssigning;
EXTERNC qboolean gDoSlowMoDuel;
EXTERNC qboolean g_endPDuel;
EXTERNC sharedBuffer_t gSharedBuffer;
EXTERNC stringID_table_t setTable[];

CCALL qboolean G_NAV_CheckNodeFailedForEnt(int entID,int nodeNum);
CCALL qboolean G_NPC_ClearLOS2(int entID,const vec3_t end);
CCALL qboolean G_NAV_ClearPathToPoint(int entID,vec3_t pmins,vec3_t pmaxs,vec3_t point,int clipmask,int okToHitEnt);
CCALL int G_ICARUS_GetSetIDForString(void);
CCALL void G_ICARUS_SoundIndex(void);
CCALL int G_ICARUS_GetString(void);
CCALL int G_ICARUS_GetVector(void);
CCALL int G_ICARUS_GetFloat(void);
CCALL void G_ICARUS_Play(void);
CCALL void G_ICARUS_Remove(void);
CCALL void G_ICARUS_Kill(void);
CCALL void G_ICARUS_Use(void);
CCALL void G_ICARUS_Lerp2End(void);
CCALL void G_ICARUS_Lerp2Start(void);
CCALL int G_ICARUS_GetTag(void);
CCALL void G_ICARUS_Lerp2Angles(void);
CCALL void G_ICARUS_Lerp2Origin(void);
CCALL void G_ICARUS_Lerp2Pos(void);
CCALL qboolean G_ICARUS_Set(void);
CCALL int G_ICARUS_PlaySound(void);
CCALL void _G_ROFF_NotetrackCallback(int entID,const char *notetrack);
CCALL void G_SpawnRMGEntity(void);
CCALL void NAV_CheckCalcPaths(void);
CCALL void G_RunThink(gentity_t *ent);
CCALL void CheckCvars(void);
CCALL void CheckTeamVote(int team);
CCALL void CheckTeamLeader(int team);
CCALL void SetLeader(int team,int client);
CCALL void PrintTeam(int team,char *message);
CCALL void CheckVote(void);
CCALL void G_KickAllBots(void);
CCALL void CheckTournament(void);
CCALL void G_RemoveDuelist(int team);
CCALL const char *G_GetStringEdString(char *refSection,char *refName);
CCALL qboolean ScoreIsTied(void);
CCALL void CheckIntermissionExit(void);
CCALL void LogExit(const char *string);
CCALL void ExitLevel(void);
CCALL void SiegeDoTeamAssign(void);
CCALL void DuelResetWinsLosses(void);
CCALL void BeginIntermission(void);
CCALL qboolean DuelLimitHit(void);
CCALL qboolean DuelLimitHit(void);
CCALL void FindIntermissionPoint(void);
CCALL void MoveClientToIntermission(gentity_t *ent);
CCALL void G_LeaveVehicle(gentity_t *ent,qboolean ConCheck);
CCALL void SendScoreboardMessageToAllClients(void);
CCALL void G_ResetDuelists(void);
CCALL qboolean G_CanResetDuelists(void);
CCALL int QDECL SortRanks(const void *a,const void *b);
CCALL void AdjustTournamentScores(void);
CCALL void RemoveTournamentWinner(void);
CCALL void RemoveDuelDrawLoser(void);
CCALL void CalculateRanks(void);
CCALL void RemovePowerDuelLosers(void);
CCALL void AddPowerDuelPlayers(void);
CCALL void G_PowerDuelCount(int *loners,int *doubles,qboolean countSpec);
CCALL void RemoveTournamentLoser(void);
CCALL void AddTournamentQueue(gclient_t *client);
CCALL void AddTournamentPlayer(void);
CCALL void QDECL G_SecurityLogPrintf(const char *fmt,...);
CCALL void QDECL G_LogPrintf(const char *fmt,...);
CCALL void G_CacheMapname(const cvar_t *mapname);
CCALL void G_CacheGametype(void);
CCALL void G_FindTeams(void);
CCALL void CP_FindCombatPointWaypoints(void);
CCALL qboolean G_EntIsRemovableUsable(int entNum);
CCALL qboolean G_EntIsBreakable(int entityNum);
CCALL qboolean G_EntIsDoor(int entityNum);
CCALL qboolean G_EntIsUnlockedDoor(int entityNum);
CCALL qboolean NAV_CheckNodeFailedForEnt(gentity_t *ent,int nodeNum);
CCALL int NAVNEW_ClearPathBetweenPoints(vec3_t start,vec3_t end,vec3_t mins,vec3_t maxs,int ignore,int clipmask);
CCALL qboolean NPC_ClearLOS2(gentity_t *ent,const vec3_t end);
CCALL qboolean NAV_ClearPathToPoint(gentity_t *self,vec3_t pmins,vec3_t pmaxs,vec3_t point,int clipmask,int okToHitEntNum);
CCALL void G_SpawnGEntityFromSpawnVars(qboolean inSubBSP);
CCALL qboolean G_ParseSpawnVars(qboolean inSubBSP);
CCALL void G_ROFF_NotetrackCallback(gentity_t *cent,const char *notetrack);
CCALL void CheckExitRules(void);
CCALL void CheckExitRules(void);
CCALL void G_ShutdownGame(int restart);
CCALL void G_ShutdownGame(int restart);
CCALL void G_RunFrame(int levelTime);
CCALL void G_RunFrame(int levelTime);
CCALL void G_InitGame(int levelTime,int randomSeed,int restart);
CCALL void G_InitGame(int levelTime,int randomSeed,int restart);
CCALL void SiegeCheckTimers(void);
CCALL void ClearNPCGlobals(void);
CCALL void Jedi_Decloak(gentity_t *self);
